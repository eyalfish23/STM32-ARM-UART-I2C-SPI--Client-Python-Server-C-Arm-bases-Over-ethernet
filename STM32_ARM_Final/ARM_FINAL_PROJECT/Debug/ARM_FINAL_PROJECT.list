
ARM_FINAL_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014a40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e38  08014c10  08014c10  00024c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a48  08017a48  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08017a48  08017a48  00027a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a50  08017a50  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017a50  08017a50  00027a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017a54  08017a54  00027a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08017a58  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d70  2000007c  08017ad4  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008dec  08017ad4  00038dec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037f6c  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068ad  00000000  00000000  00068018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c18  00000000  00000000  0006e8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b28  00000000  00000000  000704e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032f04  00000000  00000000  00072008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d89d  00000000  00000000  000a4f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105821  00000000  00000000  000d27a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d7fca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d4c  00000000  00000000  001d8020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014bf8 	.word	0x08014bf8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08014bf8 	.word	0x08014bf8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80005c0:	1d39      	adds	r1, r7, #4
 80005c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c6:	2201      	movs	r2, #1
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <__io_putchar+0x20>)
 80005ca:	f007 fbcf 	bl	8007d6c <HAL_UART_Transmit>
	return ch;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200002e4 	.word	0x200002e4

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b598      	push	{r3, r4, r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fad5 	bl	8001b8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f96a 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fc08 	bl	8000dfc <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fbb4 	bl	8000d58 <MX_DMA_Init>
  MX_I2C1_Init();
 80005f0:	f000 f9fc 	bl	80009ec <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 fb52 	bl	8000c9c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 fb80 	bl	8000cfc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 80005fc:	f000 fa36 	bl	8000a6c <MX_I2C2_Init>
  MX_SPI4_Init();
 8000600:	f000 fa74 	bl	8000aec <MX_SPI4_Init>
  MX_SPI5_Init();
 8000604:	f000 fab0 	bl	8000b68 <MX_SPI5_Init>
  MX_UART4_Init();
 8000608:	f000 fae8 	bl	8000bdc <MX_UART4_Init>
  MX_USART2_UART_Init();
 800060c:	f000 fb16 	bl	8000c3c <MX_USART2_UART_Init>
  MX_LWIP_Init();
 8000610:	f008 fe82 	bl	8009318 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  conn=udp_new();
 8000614:	f010 ff10 	bl	8011438 <udp_new>
 8000618:	4603      	mov	r3, r0
 800061a:	4a8b      	ldr	r2, [pc, #556]	; (8000848 <main+0x26c>)
 800061c:	6013      	str	r3, [r2, #0]
  udp_bind(conn, IP_ANY_TYPE, PORT_NUM);
 800061e:	4b8a      	ldr	r3, [pc, #552]	; (8000848 <main+0x26c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000626:	4989      	ldr	r1, [pc, #548]	; (800084c <main+0x270>)
 8000628:	4618      	mov	r0, r3
 800062a:	f010 fe5d 	bl	80112e8 <udp_bind>


  //UART (UART-4) receive data from UART (UART-2)
  HAL_UART_Receive_DMA(&huart4, shared_buffer_uart, BUFFER_MAX_SIZE);
 800062e:	2214      	movs	r2, #20
 8000630:	4987      	ldr	r1, [pc, #540]	; (8000850 <main+0x274>)
 8000632:	4888      	ldr	r0, [pc, #544]	; (8000854 <main+0x278>)
 8000634:	f007 fc2d 	bl	8007e92 <HAL_UART_Receive_DMA>
  //Slave (I2C-2) receive data from Master (I2C-1)
  HAL_I2C_Slave_Receive_DMA(&hi2c2, shared_buffer_i2c, BUFFER_MAX_SIZE);
 8000638:	2214      	movs	r2, #20
 800063a:	4987      	ldr	r1, [pc, #540]	; (8000858 <main+0x27c>)
 800063c:	4887      	ldr	r0, [pc, #540]	; (800085c <main+0x280>)
 800063e:	f003 fd31 	bl	80040a4 <HAL_I2C_Slave_Receive_DMA>
  //Slave (SPI5) receive data from Master (SPI4)
  HAL_SPI_Receive_DMA(&hspi5, shared_buffer_spi, BUFFER_MAX_SIZE);
 8000642:	2214      	movs	r2, #20
 8000644:	4986      	ldr	r1, [pc, #536]	; (8000860 <main+0x284>)
 8000646:	4887      	ldr	r0, [pc, #540]	; (8000864 <main+0x288>)
 8000648:	f006 fcc2 	bl	8006fd0 <HAL_SPI_Receive_DMA>

  udp_recv(conn, udp_echoserver_recv, NULL);
 800064c:	4b7e      	ldr	r3, [pc, #504]	; (8000848 <main+0x26c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2200      	movs	r2, #0
 8000652:	4985      	ldr	r1, [pc, #532]	; (8000868 <main+0x28c>)
 8000654:	4618      	mov	r0, r3
 8000656:	f010 fecf 	bl	80113f8 <udp_recv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(uart_callback)
 800065a:	4b84      	ldr	r3, [pc, #528]	; (800086c <main+0x290>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d04e      	beq.n	8000700 <main+0x124>
	  {
		  printf("Data successfully transfered from UART2 to UART4\r\n");
 8000662:	4883      	ldr	r0, [pc, #524]	; (8000870 <main+0x294>)
 8000664:	f013 fabe 	bl	8013be4 <puts>
		  printf("Data received: %s\r\n",shared_buffer_uart);
 8000668:	4979      	ldr	r1, [pc, #484]	; (8000850 <main+0x274>)
 800066a:	4882      	ldr	r0, [pc, #520]	; (8000874 <main+0x298>)
 800066c:	f013 fa34 	bl	8013ad8 <iprintf>

		  printf("Sending packet back to PC\r\n");
 8000670:	4881      	ldr	r0, [pc, #516]	; (8000878 <main+0x29c>)
 8000672:	f013 fab7 	bl	8013be4 <puts>

		  //Allocating a p buffer to send
		  send_packet_uart4=pbuf_alloc(PBUF_TRANSPORT, strlen((char*)shared_buffer_uart)+1, PBUF_RAM);
 8000676:	4876      	ldr	r0, [pc, #472]	; (8000850 <main+0x274>)
 8000678:	f7ff fdca 	bl	8000210 <strlen>
 800067c:	4603      	mov	r3, r0
 800067e:	b29b      	uxth	r3, r3
 8000680:	3301      	adds	r3, #1
 8000682:	b29b      	uxth	r3, r3
 8000684:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000688:	4619      	mov	r1, r3
 800068a:	2036      	movs	r0, #54	; 0x36
 800068c:	f00a fad2 	bl	800ac34 <pbuf_alloc>
 8000690:	4603      	mov	r3, r0
 8000692:	4a7a      	ldr	r2, [pc, #488]	; (800087c <main+0x2a0>)
 8000694:	6013      	str	r3, [r2, #0]
		  memcpy(send_packet_uart4->payload,"1",1);//msg id(UART4==1)
 8000696:	4b79      	ldr	r3, [pc, #484]	; (800087c <main+0x2a0>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	4978      	ldr	r1, [pc, #480]	; (8000880 <main+0x2a4>)
 80006a0:	4618      	mov	r0, r3
 80006a2:	f013 fa03 	bl	8013aac <memcpy>
		  memcpy(send_packet_uart4->payload+1,del,1);//;
 80006a6:	4b75      	ldr	r3, [pc, #468]	; (800087c <main+0x2a0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	3301      	adds	r3, #1
 80006ae:	4a75      	ldr	r2, [pc, #468]	; (8000884 <main+0x2a8>)
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	701a      	strb	r2, [r3, #0]
		  memcpy(send_packet_uart4->payload+2,shared_buffer_uart,strlen((char*)shared_buffer_uart));//data
 80006b4:	4b71      	ldr	r3, [pc, #452]	; (800087c <main+0x2a0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	1c9c      	adds	r4, r3, #2
 80006bc:	4864      	ldr	r0, [pc, #400]	; (8000850 <main+0x274>)
 80006be:	f7ff fda7 	bl	8000210 <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	461a      	mov	r2, r3
 80006c6:	4962      	ldr	r1, [pc, #392]	; (8000850 <main+0x274>)
 80006c8:	4620      	mov	r0, r4
 80006ca:	f013 f9ef 	bl	8013aac <memcpy>

		  //Send packet back to PC
		  udp_sendto(conn, send_packet_uart4, &host_addr, PORT_NUM);
 80006ce:	4b5e      	ldr	r3, [pc, #376]	; (8000848 <main+0x26c>)
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	4b6a      	ldr	r3, [pc, #424]	; (800087c <main+0x2a0>)
 80006d4:	6819      	ldr	r1, [r3, #0]
 80006d6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80006da:	4a6b      	ldr	r2, [pc, #428]	; (8000888 <main+0x2ac>)
 80006dc:	f010 fc4e 	bl	8010f7c <udp_sendto>
		  pbuf_free(send_packet_uart4); //release packet resource
 80006e0:	4b66      	ldr	r3, [pc, #408]	; (800087c <main+0x2a0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f00a fd89 	bl	800b1fc <pbuf_free>

		  HAL_UART_Receive_DMA(&huart4, shared_buffer_uart, BUFFER_MAX_SIZE);
 80006ea:	2214      	movs	r2, #20
 80006ec:	4958      	ldr	r1, [pc, #352]	; (8000850 <main+0x274>)
 80006ee:	4859      	ldr	r0, [pc, #356]	; (8000854 <main+0x278>)
 80006f0:	f007 fbcf 	bl	8007e92 <HAL_UART_Receive_DMA>
		  uart_callback=0;
 80006f4:	4b5d      	ldr	r3, [pc, #372]	; (800086c <main+0x290>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
		  is_uart=0;
 80006fa:	4b64      	ldr	r3, [pc, #400]	; (800088c <main+0x2b0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
	  }
	  if(i2c_callback)
 8000700:	4b63      	ldr	r3, [pc, #396]	; (8000890 <main+0x2b4>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d04b      	beq.n	80007a0 <main+0x1c4>
	  {
		  printf("Data successfully transfered from I2C-1 to I2C-2\r\n");
 8000708:	4862      	ldr	r0, [pc, #392]	; (8000894 <main+0x2b8>)
 800070a:	f013 fa6b 	bl	8013be4 <puts>
		  printf("Data received: %s\r\n",shared_buffer_i2c);
 800070e:	4952      	ldr	r1, [pc, #328]	; (8000858 <main+0x27c>)
 8000710:	4858      	ldr	r0, [pc, #352]	; (8000874 <main+0x298>)
 8000712:	f013 f9e1 	bl	8013ad8 <iprintf>

		  //Allocating a p buffer to send
		  send_packet_i2c=pbuf_alloc(PBUF_TRANSPORT, strlen((char*)shared_buffer_i2c)+1, PBUF_RAM);
 8000716:	4850      	ldr	r0, [pc, #320]	; (8000858 <main+0x27c>)
 8000718:	f7ff fd7a 	bl	8000210 <strlen>
 800071c:	4603      	mov	r3, r0
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	b29b      	uxth	r3, r3
 8000724:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000728:	4619      	mov	r1, r3
 800072a:	2036      	movs	r0, #54	; 0x36
 800072c:	f00a fa82 	bl	800ac34 <pbuf_alloc>
 8000730:	4603      	mov	r3, r0
 8000732:	4a59      	ldr	r2, [pc, #356]	; (8000898 <main+0x2bc>)
 8000734:	6013      	str	r3, [r2, #0]
		  memcpy(send_packet_i2c->payload,"2",1);//msg id(i2c==2)
 8000736:	4b58      	ldr	r3, [pc, #352]	; (8000898 <main+0x2bc>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	2201      	movs	r2, #1
 800073e:	4957      	ldr	r1, [pc, #348]	; (800089c <main+0x2c0>)
 8000740:	4618      	mov	r0, r3
 8000742:	f013 f9b3 	bl	8013aac <memcpy>
		  memcpy(send_packet_i2c->payload+1,del,1);//;
 8000746:	4b54      	ldr	r3, [pc, #336]	; (8000898 <main+0x2bc>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	3301      	adds	r3, #1
 800074e:	4a4d      	ldr	r2, [pc, #308]	; (8000884 <main+0x2a8>)
 8000750:	7812      	ldrb	r2, [r2, #0]
 8000752:	701a      	strb	r2, [r3, #0]
		  memcpy(send_packet_i2c->payload+2,shared_buffer_i2c,strlen((char*)shared_buffer_i2c));//data
 8000754:	4b50      	ldr	r3, [pc, #320]	; (8000898 <main+0x2bc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	1c9c      	adds	r4, r3, #2
 800075c:	483e      	ldr	r0, [pc, #248]	; (8000858 <main+0x27c>)
 800075e:	f7ff fd57 	bl	8000210 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	493c      	ldr	r1, [pc, #240]	; (8000858 <main+0x27c>)
 8000768:	4620      	mov	r0, r4
 800076a:	f013 f99f 	bl	8013aac <memcpy>

		  //Send packet back to PC
		  udp_sendto(conn, send_packet_i2c, &host_addr, PORT_NUM);
 800076e:	4b36      	ldr	r3, [pc, #216]	; (8000848 <main+0x26c>)
 8000770:	6818      	ldr	r0, [r3, #0]
 8000772:	4b49      	ldr	r3, [pc, #292]	; (8000898 <main+0x2bc>)
 8000774:	6819      	ldr	r1, [r3, #0]
 8000776:	f24c 3350 	movw	r3, #50000	; 0xc350
 800077a:	4a43      	ldr	r2, [pc, #268]	; (8000888 <main+0x2ac>)
 800077c:	f010 fbfe 	bl	8010f7c <udp_sendto>
		  pbuf_free(send_packet_i2c); //release packet resource
 8000780:	4b45      	ldr	r3, [pc, #276]	; (8000898 <main+0x2bc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f00a fd39 	bl	800b1fc <pbuf_free>


	  	  HAL_I2C_Slave_Receive_DMA(&hi2c2, shared_buffer_i2c, BUFFER_MAX_SIZE);
 800078a:	2214      	movs	r2, #20
 800078c:	4932      	ldr	r1, [pc, #200]	; (8000858 <main+0x27c>)
 800078e:	4833      	ldr	r0, [pc, #204]	; (800085c <main+0x280>)
 8000790:	f003 fc88 	bl	80040a4 <HAL_I2C_Slave_Receive_DMA>
	  	  i2c_callback=0;
 8000794:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <main+0x2b4>)
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
	  	  is_i2c=0;
 800079a:	4b41      	ldr	r3, [pc, #260]	; (80008a0 <main+0x2c4>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	  }
	  if(spi_callback)
 80007a0:	4b40      	ldr	r3, [pc, #256]	; (80008a4 <main+0x2c8>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d04b      	beq.n	8000840 <main+0x264>
	  {
		  printf("Data successfully transfered from SPI1 to SPI2\r\n");
 80007a8:	483f      	ldr	r0, [pc, #252]	; (80008a8 <main+0x2cc>)
 80007aa:	f013 fa1b 	bl	8013be4 <puts>
		  printf("Data received: %s\r\n",shared_buffer_spi);
 80007ae:	492c      	ldr	r1, [pc, #176]	; (8000860 <main+0x284>)
 80007b0:	4830      	ldr	r0, [pc, #192]	; (8000874 <main+0x298>)
 80007b2:	f013 f991 	bl	8013ad8 <iprintf>

		  //Allocating a p buffer to send
		  send_packet_spi=pbuf_alloc(PBUF_TRANSPORT, strlen((char*)shared_buffer_spi)+1, PBUF_RAM);
 80007b6:	482a      	ldr	r0, [pc, #168]	; (8000860 <main+0x284>)
 80007b8:	f7ff fd2a 	bl	8000210 <strlen>
 80007bc:	4603      	mov	r3, r0
 80007be:	b29b      	uxth	r3, r3
 80007c0:	3301      	adds	r3, #1
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80007c8:	4619      	mov	r1, r3
 80007ca:	2036      	movs	r0, #54	; 0x36
 80007cc:	f00a fa32 	bl	800ac34 <pbuf_alloc>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4a36      	ldr	r2, [pc, #216]	; (80008ac <main+0x2d0>)
 80007d4:	6013      	str	r3, [r2, #0]
		  memcpy(send_packet_spi->payload,"3",1);//msg id(spi==3)
 80007d6:	4b35      	ldr	r3, [pc, #212]	; (80008ac <main+0x2d0>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	2201      	movs	r2, #1
 80007de:	4934      	ldr	r1, [pc, #208]	; (80008b0 <main+0x2d4>)
 80007e0:	4618      	mov	r0, r3
 80007e2:	f013 f963 	bl	8013aac <memcpy>
		  memcpy(send_packet_spi->payload+1,del,1);//;
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <main+0x2d0>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	3301      	adds	r3, #1
 80007ee:	4a25      	ldr	r2, [pc, #148]	; (8000884 <main+0x2a8>)
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	701a      	strb	r2, [r3, #0]
		  memcpy(send_packet_spi->payload+2,shared_buffer_spi,strlen((char*)shared_buffer_spi));//data
 80007f4:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <main+0x2d0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	1c9c      	adds	r4, r3, #2
 80007fc:	4818      	ldr	r0, [pc, #96]	; (8000860 <main+0x284>)
 80007fe:	f7ff fd07 	bl	8000210 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	461a      	mov	r2, r3
 8000806:	4916      	ldr	r1, [pc, #88]	; (8000860 <main+0x284>)
 8000808:	4620      	mov	r0, r4
 800080a:	f013 f94f 	bl	8013aac <memcpy>

		  //Send packet back to PC
		  udp_sendto(conn, send_packet_spi, &host_addr, PORT_NUM);
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <main+0x26c>)
 8000810:	6818      	ldr	r0, [r3, #0]
 8000812:	4b26      	ldr	r3, [pc, #152]	; (80008ac <main+0x2d0>)
 8000814:	6819      	ldr	r1, [r3, #0]
 8000816:	f24c 3350 	movw	r3, #50000	; 0xc350
 800081a:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <main+0x2ac>)
 800081c:	f010 fbae 	bl	8010f7c <udp_sendto>
		  pbuf_free(send_packet_spi); //release packet resource
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <main+0x2d0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f00a fce9 	bl	800b1fc <pbuf_free>


		  HAL_SPI_Receive_DMA(&hspi5, shared_buffer_spi, BUFFER_MAX_SIZE);
 800082a:	2214      	movs	r2, #20
 800082c:	490c      	ldr	r1, [pc, #48]	; (8000860 <main+0x284>)
 800082e:	480d      	ldr	r0, [pc, #52]	; (8000864 <main+0x288>)
 8000830:	f006 fbce 	bl	8006fd0 <HAL_SPI_Receive_DMA>
	  	  spi_callback=0;
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <main+0x2c8>)
 8000836:	2200      	movs	r2, #0
 8000838:	701a      	strb	r2, [r3, #0]
	  	  is_spi=0;
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <main+0x2d8>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
	  }

	  //Check for incoming packet
	  ethernetif_input(&gnetif);
 8000840:	481d      	ldr	r0, [pc, #116]	; (80008b8 <main+0x2dc>)
 8000842:	f009 f95b 	bl	8009afc <ethernetif_input>
	  if(uart_callback)
 8000846:	e708      	b.n	800065a <main+0x7e>
 8000848:	2000021c 	.word	0x2000021c
 800084c:	080178e8 	.word	0x080178e8
 8000850:	20000a74 	.word	0x20000a74
 8000854:	20000a8c 	.word	0x20000a8c
 8000858:	200008d8 	.word	0x200008d8
 800085c:	20000818 	.word	0x20000818
 8000860:	200008c4 	.word	0x200008c4
 8000864:	20000280 	.word	0x20000280
 8000868:	08000fd1 	.word	0x08000fd1
 800086c:	20000099 	.word	0x20000099
 8000870:	08014c10 	.word	0x08014c10
 8000874:	08014c44 	.word	0x08014c44
 8000878:	08014c58 	.word	0x08014c58
 800087c:	20000b98 	.word	0x20000b98
 8000880:	08014c74 	.word	0x08014c74
 8000884:	20000000 	.word	0x20000000
 8000888:	20000b94 	.word	0x20000b94
 800088c:	2000009c 	.word	0x2000009c
 8000890:	2000009a 	.word	0x2000009a
 8000894:	08014c78 	.word	0x08014c78
 8000898:	20000a88 	.word	0x20000a88
 800089c:	08014cac 	.word	0x08014cac
 80008a0:	2000009d 	.word	0x2000009d
 80008a4:	2000009b 	.word	0x2000009b
 80008a8:	08014cb0 	.word	0x08014cb0
 80008ac:	20000a70 	.word	0x20000a70
 80008b0:	08014ce0 	.word	0x08014ce0
 80008b4:	2000009e 	.word	0x2000009e
 80008b8:	20000ba4 	.word	0x20000ba4

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b0b4      	sub	sp, #208	; 0xd0
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80008c6:	2230      	movs	r2, #48	; 0x30
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f013 f8fc 	bl	8013ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008e0:	f107 0308 	add.w	r3, r7, #8
 80008e4:	2284      	movs	r2, #132	; 0x84
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f013 f8ed 	bl	8013ac8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008ee:	f005 f8af 	bl	8005a50 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <SystemClock_Config+0x124>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a3a      	ldr	r2, [pc, #232]	; (80009e0 <SystemClock_Config+0x124>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <SystemClock_Config+0x124>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800090a:	4b36      	ldr	r3, [pc, #216]	; (80009e4 <SystemClock_Config+0x128>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000912:	4a34      	ldr	r2, [pc, #208]	; (80009e4 <SystemClock_Config+0x128>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <SystemClock_Config+0x128>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000926:	2301      	movs	r3, #1
 8000928:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800092c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000930:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000934:	2302      	movs	r3, #2
 8000936:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800093e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000942:	2304      	movs	r3, #4
 8000944:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000948:	2348      	movs	r3, #72	; 0x48
 800094a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800094e:	2302      	movs	r3, #2
 8000950:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000954:	2303      	movs	r3, #3
 8000956:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800095e:	4618      	mov	r0, r3
 8000960:	f005 f886 	bl	8005a70 <HAL_RCC_OscConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800096a:	f000 fbe5 	bl	8001138 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096e:	230f      	movs	r3, #15
 8000970:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000974:	2302      	movs	r3, #2
 8000976:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800098e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000992:	2102      	movs	r1, #2
 8000994:	4618      	mov	r0, r3
 8000996:	f005 fb0f 	bl	8005fb8 <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80009a0:	f000 fbca 	bl	8001138 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80009a4:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <SystemClock_Config+0x12c>)
 80009a6:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	4618      	mov	r0, r3
 80009c8:	f005 fcf8 	bl	80063bc <HAL_RCCEx_PeriphCLKConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80009d2:	f000 fbb1 	bl	8001138 <Error_Handler>
  }
}
 80009d6:	bf00      	nop
 80009d8:	37d0      	adds	r7, #208	; 0xd0
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40007000 	.word	0x40007000
 80009e8:	0020c380 	.word	0x0020c380

080009ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_I2C1_Init+0x74>)
 80009f2:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <MX_I2C1_Init+0x78>)
 80009f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_I2C1_Init+0x74>)
 80009f8:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <MX_I2C1_Init+0x7c>)
 80009fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009fc:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_I2C1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a26:	480e      	ldr	r0, [pc, #56]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a28:	f003 f9b8 	bl	8003d9c <HAL_I2C_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a32:	f000 fb81 	bl	8001138 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a36:	2100      	movs	r1, #0
 8000a38:	4809      	ldr	r0, [pc, #36]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a3a:	f004 fe29 	bl	8005690 <HAL_I2CEx_ConfigAnalogFilter>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a44:	f000 fb78 	bl	8001138 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_I2C1_Init+0x74>)
 8000a4c:	f004 fe6b 	bl	8005726 <HAL_I2CEx_ConfigDigitalFilter>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a56:	f000 fb6f 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200003c8 	.word	0x200003c8
 8000a64:	40005400 	.word	0x40005400
 8000a68:	00808cd2 	.word	0x00808cd2

08000a6c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a72:	4a1c      	ldr	r2, [pc, #112]	; (8000ae4 <MX_I2C2_Init+0x78>)
 8000a74:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a78:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <MX_I2C2_Init+0x7c>)
 8000a7a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 22;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a7e:	2216      	movs	r2, #22
 8000a80:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aa6:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000aa8:	f003 f978 	bl	8003d9c <HAL_I2C_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ab2:	f000 fb41 	bl	8001138 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000aba:	f004 fde9 	bl	8005690 <HAL_I2CEx_ConfigAnalogFilter>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ac4:	f000 fb38 	bl	8001138 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_I2C2_Init+0x74>)
 8000acc:	f004 fe2b 	bl	8005726 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ad6:	f000 fb2f 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000818 	.word	0x20000818
 8000ae4:	40005800 	.word	0x40005800
 8000ae8:	00808cd2 	.word	0x00808cd2

08000aec <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <MX_SPI4_Init+0x78>)
 8000af4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000af8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000afc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000b06:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b0a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000b0e:	2202      	movs	r2, #2
 8000b10:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b1e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000b3a:	2207      	movs	r2, #7
 8000b3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000b46:	2208      	movs	r2, #8
 8000b48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_SPI4_Init+0x74>)
 8000b4c:	f006 f826 	bl	8006b9c <HAL_SPI_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000b56:	f000 faef 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000a0c 	.word	0x20000a0c
 8000b64:	40013400 	.word	0x40013400

08000b68 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_SPI5_Init+0x6c>)
 8000b6e:	4a1a      	ldr	r2, [pc, #104]	; (8000bd8 <MX_SPI5_Init+0x70>)
 8000b70:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_SPI5_Init+0x6c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <MX_SPI5_Init+0x6c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_SPI5_Init+0x6c>)
 8000b80:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b84:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_SPI5_Init+0x6c>)
 8000b88:	2202      	movs	r2, #2
 8000b8a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_SPI5_Init+0x6c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_SPI5_Init+0x6c>)
 8000b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b98:	619a      	str	r2, [r3, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_SPI5_Init+0x6c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_SPI5_Init+0x6c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_SPI5_Init+0x6c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_SPI5_Init+0x6c>)
 8000bae:	2207      	movs	r2, #7
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_SPI5_Init+0x6c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_SPI5_Init+0x6c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_SPI5_Init+0x6c>)
 8000bc0:	f005 ffec 	bl	8006b9c <HAL_SPI_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_SPI5_Init+0x66>
  {
    Error_Handler();
 8000bca:	f000 fab5 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000280 	.word	0x20000280
 8000bd8:	40015000 	.word	0x40015000

08000bdc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000be0:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_UART4_Init+0x58>)
 8000be2:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <MX_UART4_Init+0x5c>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_UART4_Init+0x58>)
 8000be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_UART4_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_UART4_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_UART4_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_UART4_Init+0x58>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_UART4_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_UART4_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_UART4_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_UART4_Init+0x58>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_UART4_Init+0x58>)
 8000c20:	f007 f856 	bl	8007cd0 <HAL_UART_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000c2a:	f000 fa85 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000a8c 	.word	0x20000a8c
 8000c38:	40004c00 	.word	0x40004c00

08000c3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c42:	4a15      	ldr	r2, [pc, #84]	; (8000c98 <MX_USART2_UART_Init+0x5c>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USART2_UART_Init+0x58>)
 8000c80:	f007 f826 	bl	8007cd0 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c8a:	f000 fa55 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000b10 	.word	0x20000b10
 8000c98:	40004400 	.word	0x40004400

08000c9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <MX_USART3_UART_Init+0x5c>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_USART3_UART_Init+0x58>)
 8000ce0:	f006 fff6 	bl	8007cd0 <HAL_UART_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cea:	f000 fa25 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200002e4 	.word	0x200002e4
 8000cf8:	40004800 	.word	0x40004800

08000cfc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d0a:	2206      	movs	r2, #6
 8000d0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d10:	2202      	movs	r2, #2
 8000d12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d40:	f004 fd3d 	bl	80057be <HAL_PCD_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d4a:	f000 f9f5 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000414 	.word	0x20000414

08000d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5e:	4b26      	ldr	r3, [pc, #152]	; (8000df8 <MX_DMA_Init+0xa0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a25      	ldr	r2, [pc, #148]	; (8000df8 <MX_DMA_Init+0xa0>)
 8000d64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <MX_DMA_Init+0xa0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d76:	4b20      	ldr	r3, [pc, #128]	; (8000df8 <MX_DMA_Init+0xa0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a1f      	ldr	r2, [pc, #124]	; (8000df8 <MX_DMA_Init+0xa0>)
 8000d7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <MX_DMA_Init+0xa0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2100      	movs	r1, #0
 8000d92:	200d      	movs	r0, #13
 8000d94:	f001 f857 	bl	8001e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d98:	200d      	movs	r0, #13
 8000d9a:	f001 f870 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	200e      	movs	r0, #14
 8000da4:	f001 f84f 	bl	8001e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000da8:	200e      	movs	r0, #14
 8000daa:	f001 f868 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2011      	movs	r0, #17
 8000db4:	f001 f847 	bl	8001e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000db8:	2011      	movs	r0, #17
 8000dba:	f001 f860 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	202f      	movs	r0, #47	; 0x2f
 8000dc4:	f001 f83f 	bl	8001e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000dc8:	202f      	movs	r0, #47	; 0x2f
 8000dca:	f001 f858 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2039      	movs	r0, #57	; 0x39
 8000dd4:	f001 f837 	bl	8001e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000dd8:	2039      	movs	r0, #57	; 0x39
 8000dda:	f001 f850 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	203b      	movs	r0, #59	; 0x3b
 8000de4:	f001 f82f 	bl	8001e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000de8:	203b      	movs	r0, #59	; 0x3b
 8000dea:	f001 f848 	bl	8001e7e <HAL_NVIC_EnableIRQ>

}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800

08000dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	; 0x38
 8000e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e12:	4b52      	ldr	r3, [pc, #328]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a51      	ldr	r2, [pc, #324]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e18:	f043 0310 	orr.w	r3, r3, #16
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b4f      	ldr	r3, [pc, #316]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0310 	and.w	r3, r3, #16
 8000e26:	623b      	str	r3, [r7, #32]
 8000e28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2a:	4b4c      	ldr	r3, [pc, #304]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a4b      	ldr	r2, [pc, #300]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b49      	ldr	r3, [pc, #292]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e42:	4b46      	ldr	r3, [pc, #280]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a45      	ldr	r2, [pc, #276]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e48:	f043 0320 	orr.w	r3, r3, #32
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b43      	ldr	r3, [pc, #268]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0320 	and.w	r3, r3, #32
 8000e56:	61bb      	str	r3, [r7, #24]
 8000e58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e5a:	4b40      	ldr	r3, [pc, #256]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a3f      	ldr	r2, [pc, #252]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b3d      	ldr	r3, [pc, #244]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b3a      	ldr	r3, [pc, #232]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a39      	ldr	r2, [pc, #228]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b37      	ldr	r3, [pc, #220]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b34      	ldr	r3, [pc, #208]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a33      	ldr	r2, [pc, #204]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b31      	ldr	r3, [pc, #196]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea2:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a2d      	ldr	r2, [pc, #180]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000ea8:	f043 0308 	orr.w	r3, r3, #8
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eba:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b25      	ldr	r3, [pc, #148]	; (8000f5c <MX_GPIO_Init+0x160>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ed8:	4821      	ldr	r0, [pc, #132]	; (8000f60 <MX_GPIO_Init+0x164>)
 8000eda:	f002 ff45 	bl	8003d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	4820      	ldr	r0, [pc, #128]	; (8000f64 <MX_GPIO_Init+0x168>)
 8000ee4:	f002 ff40 	bl	8003d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ee8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <MX_GPIO_Init+0x16c>)
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	481b      	ldr	r0, [pc, #108]	; (8000f6c <MX_GPIO_Init+0x170>)
 8000efe:	f002 fd87 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f02:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4811      	ldr	r0, [pc, #68]	; (8000f60 <MX_GPIO_Init+0x164>)
 8000f1c:	f002 fd78 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f20:	2340      	movs	r3, #64	; 0x40
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	480b      	ldr	r0, [pc, #44]	; (8000f64 <MX_GPIO_Init+0x168>)
 8000f38:	f002 fd6a 	bl	8003a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_GPIO_Init+0x168>)
 8000f50:	f002 fd5e 	bl	8003a10 <HAL_GPIO_Init>

}
 8000f54:	bf00      	nop
 8000f56:	3738      	adds	r7, #56	; 0x38
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40021800 	.word	0x40021800
 8000f68:	10110000 	.word	0x10110000
 8000f6c:	40020800 	.word	0x40020800

08000f70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	//UART Callback
	uart_callback=1;
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <HAL_UART_RxCpltCallback+0x1c>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000099 	.word	0x20000099

08000f90 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	//I2C Callback
	i2c_callback=1;
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2000009a 	.word	0x2000009a

08000fb0 <HAL_SPI_RxCpltCallback>:
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	//SPI Callback
	spi_callback=1;
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <HAL_SPI_RxCpltCallback+0x1c>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	2000009b 	.word	0x2000009b

08000fd0 <udp_echoserver_recv>:

static void udp_echoserver_recv(void *arg, struct udp_pcb *upcb, struct pbuf *p,const ip_addr_t *addr, u16_t port)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
	Recv_Packet recv_packet;

		if(!is_message)
 8000fde:	4b47      	ldr	r3, [pc, #284]	; (80010fc <udp_echoserver_recv+0x12c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f040 8086 	bne.w	80010f4 <udp_echoserver_recv+0x124>
		{
			is_message=1;
 8000fe8:	4b44      	ldr	r3, [pc, #272]	; (80010fc <udp_echoserver_recv+0x12c>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
			//Copy the given message to our buffer
			//Copy data_size (2B)
			memcpy(&recv_packet.data_size,p->payload,2);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	823b      	strh	r3, [r7, #16]
			//Copy protocol type (1B)
			memcpy(&recv_packet.message_id,p->payload+2,1);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	74bb      	strb	r3, [r7, #18]
			//Copy spare variable (1B) =>used it as a checksum for sending back to host
			memcpy(&recv_packet.spare,p->payload+3,1);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	3303      	adds	r3, #3
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	74fb      	strb	r3, [r7, #19]
			//Copy Data (data_size in bytes)
			memcpy(&recv_packet.data_buffer,p->payload+4,recv_packet.data_size);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	1d19      	adds	r1, r3, #4
 8001012:	8a3b      	ldrh	r3, [r7, #16]
 8001014:	461a      	mov	r2, r3
 8001016:	f107 0310 	add.w	r3, r7, #16
 800101a:	3304      	adds	r3, #4
 800101c:	4618      	mov	r0, r3
 800101e:	f012 fd45 	bl	8013aac <memcpy>
			host_addr=*addr;
 8001022:	4a37      	ldr	r2, [pc, #220]	; (8001100 <udp_echoserver_recv+0x130>)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	6013      	str	r3, [r2, #0]
			pbuf_free(p);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f00a f8e6 	bl	800b1fc <pbuf_free>



			if(recv_packet.message_id==1) //UART
 8001030:	7cbb      	ldrb	r3, [r7, #18]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d11a      	bne.n	800106c <udp_echoserver_recv+0x9c>
			{
				if(!is_uart)
 8001036:	4b33      	ldr	r3, [pc, #204]	; (8001104 <udp_echoserver_recv+0x134>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d157      	bne.n	80010ee <udp_echoserver_recv+0x11e>
				{
					printf("[Packet received] Protocol:UART , Data:%s\r\n",recv_packet.data_buffer);
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	3304      	adds	r3, #4
 8001044:	4619      	mov	r1, r3
 8001046:	4830      	ldr	r0, [pc, #192]	; (8001108 <udp_echoserver_recv+0x138>)
 8001048:	f012 fd46 	bl	8013ad8 <iprintf>
					printf("Transmitting data through UART2 to UART4\r\n");
 800104c:	482f      	ldr	r0, [pc, #188]	; (800110c <udp_echoserver_recv+0x13c>)
 800104e:	f012 fdc9 	bl	8013be4 <puts>
					HAL_UART_Transmit(&huart2, recv_packet.data_buffer, BUFFER_MAX_SIZE, HAL_MAX_DELAY);
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	1d19      	adds	r1, r3, #4
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	2214      	movs	r2, #20
 800105e:	482c      	ldr	r0, [pc, #176]	; (8001110 <udp_echoserver_recv+0x140>)
 8001060:	f006 fe84 	bl	8007d6c <HAL_UART_Transmit>
					is_uart=1;
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <udp_echoserver_recv+0x134>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	e040      	b.n	80010ee <udp_echoserver_recv+0x11e>
				}

			}
			else if(recv_packet.message_id==2) //I2C
 800106c:	7cbb      	ldrb	r3, [r7, #18]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d11c      	bne.n	80010ac <udp_echoserver_recv+0xdc>
			{
				if(!is_i2c)
 8001072:	4b28      	ldr	r3, [pc, #160]	; (8001114 <udp_echoserver_recv+0x144>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d139      	bne.n	80010ee <udp_echoserver_recv+0x11e>
				{
					printf("[Packet received] Protocol:I2C , Data:%s\r\n",recv_packet.data_buffer);
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	3304      	adds	r3, #4
 8001080:	4619      	mov	r1, r3
 8001082:	4825      	ldr	r0, [pc, #148]	; (8001118 <udp_echoserver_recv+0x148>)
 8001084:	f012 fd28 	bl	8013ad8 <iprintf>
					printf("Transmitting data from MASTER(I2C-1) to SLAVE(I2C-2)\r\n");
 8001088:	4824      	ldr	r0, [pc, #144]	; (800111c <udp_echoserver_recv+0x14c>)
 800108a:	f012 fdab 	bl	8013be4 <puts>
					HAL_I2C_Master_Transmit(&hi2c1, 22, recv_packet.data_buffer, BUFFER_MAX_SIZE, HAL_MAX_DELAY);
 800108e:	f107 0310 	add.w	r3, r7, #16
 8001092:	1d1a      	adds	r2, r3, #4
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2314      	movs	r3, #20
 800109c:	2116      	movs	r1, #22
 800109e:	4820      	ldr	r0, [pc, #128]	; (8001120 <udp_echoserver_recv+0x150>)
 80010a0:	f002 ff0c 	bl	8003ebc <HAL_I2C_Master_Transmit>
					is_i2c=1;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <udp_echoserver_recv+0x144>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	e020      	b.n	80010ee <udp_echoserver_recv+0x11e>
				}
			}
			else if(recv_packet.message_id==3) //SPI
 80010ac:	7cbb      	ldrb	r3, [r7, #18]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	d11a      	bne.n	80010e8 <udp_echoserver_recv+0x118>
			{
				if(!is_spi)
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <udp_echoserver_recv+0x154>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d119      	bne.n	80010ee <udp_echoserver_recv+0x11e>
				{
					printf("[Packet received] Protocol:SPI , Data:%s\r\n",recv_packet.data_buffer);
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	3304      	adds	r3, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4819      	ldr	r0, [pc, #100]	; (8001128 <udp_echoserver_recv+0x158>)
 80010c4:	f012 fd08 	bl	8013ad8 <iprintf>
					printf("Transmitting data from MASTER(SPI1) to SLAVE(SPI2)\r\n");
 80010c8:	4818      	ldr	r0, [pc, #96]	; (800112c <udp_echoserver_recv+0x15c>)
 80010ca:	f012 fd8b 	bl	8013be4 <puts>
					HAL_SPI_Transmit(&hspi4, recv_packet.data_buffer, BUFFER_MAX_SIZE, HAL_MAX_DELAY);
 80010ce:	f107 0310 	add.w	r3, r7, #16
 80010d2:	1d19      	adds	r1, r3, #4
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	2214      	movs	r2, #20
 80010da:	4815      	ldr	r0, [pc, #84]	; (8001130 <udp_echoserver_recv+0x160>)
 80010dc:	f005 fe09 	bl	8006cf2 <HAL_SPI_Transmit>
					is_spi=1;
 80010e0:	4b10      	ldr	r3, [pc, #64]	; (8001124 <udp_echoserver_recv+0x154>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e002      	b.n	80010ee <udp_echoserver_recv+0x11e>
				}

			}
			else
			{
				printf("Err - Unknown packet\r\n");
 80010e8:	4812      	ldr	r0, [pc, #72]	; (8001134 <udp_echoserver_recv+0x164>)
 80010ea:	f012 fd7b 	bl	8013be4 <puts>
			}

			is_message=0;
 80010ee:	4b03      	ldr	r3, [pc, #12]	; (80010fc <udp_echoserver_recv+0x12c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	701a      	strb	r2, [r3, #0]

		}


}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	; 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000098 	.word	0x20000098
 8001100:	20000b94 	.word	0x20000b94
 8001104:	2000009c 	.word	0x2000009c
 8001108:	08014ce4 	.word	0x08014ce4
 800110c:	08014d10 	.word	0x08014d10
 8001110:	20000b10 	.word	0x20000b10
 8001114:	2000009d 	.word	0x2000009d
 8001118:	08014d3c 	.word	0x08014d3c
 800111c:	08014d68 	.word	0x08014d68
 8001120:	200003c8 	.word	0x200003c8
 8001124:	2000009e 	.word	0x2000009e
 8001128:	08014da0 	.word	0x08014da0
 800112c:	08014dcc 	.word	0x08014dcc
 8001130:	20000a0c 	.word	0x20000a0c
 8001134:	08014e00 	.word	0x08014e00

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	e7fe      	b.n	8001140 <Error_Handler+0x8>
	...

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_MspInit+0x44>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_MspInit+0x44>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_MspInit+0x44>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_MspInit+0x44>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_MspInit+0x44>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_MspInit+0x44>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a61      	ldr	r2, [pc, #388]	; (8001330 <HAL_I2C_MspInit+0x1a4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d157      	bne.n	800125e <HAL_I2C_MspInit+0xd2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b61      	ldr	r3, [pc, #388]	; (8001334 <HAL_I2C_MspInit+0x1a8>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a60      	ldr	r2, [pc, #384]	; (8001334 <HAL_I2C_MspInit+0x1a8>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b5e      	ldr	r3, [pc, #376]	; (8001334 <HAL_I2C_MspInit+0x1a8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80011c6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011cc:	2312      	movs	r3, #18
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d0:	2301      	movs	r3, #1
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011d8:	2304      	movs	r3, #4
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	4855      	ldr	r0, [pc, #340]	; (8001338 <HAL_I2C_MspInit+0x1ac>)
 80011e4:	f002 fc14 	bl	8003a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011e8:	4b52      	ldr	r3, [pc, #328]	; (8001334 <HAL_I2C_MspInit+0x1a8>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	4a51      	ldr	r2, [pc, #324]	; (8001334 <HAL_I2C_MspInit+0x1a8>)
 80011ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011f2:	6413      	str	r3, [r2, #64]	; 0x40
 80011f4:	4b4f      	ldr	r3, [pc, #316]	; (8001334 <HAL_I2C_MspInit+0x1a8>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8001200:	4b4e      	ldr	r3, [pc, #312]	; (800133c <HAL_I2C_MspInit+0x1b0>)
 8001202:	4a4f      	ldr	r2, [pc, #316]	; (8001340 <HAL_I2C_MspInit+0x1b4>)
 8001204:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001206:	4b4d      	ldr	r3, [pc, #308]	; (800133c <HAL_I2C_MspInit+0x1b0>)
 8001208:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800120c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800120e:	4b4b      	ldr	r3, [pc, #300]	; (800133c <HAL_I2C_MspInit+0x1b0>)
 8001210:	2240      	movs	r2, #64	; 0x40
 8001212:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001214:	4b49      	ldr	r3, [pc, #292]	; (800133c <HAL_I2C_MspInit+0x1b0>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800121a:	4b48      	ldr	r3, [pc, #288]	; (800133c <HAL_I2C_MspInit+0x1b0>)
 800121c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001220:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001222:	4b46      	ldr	r3, [pc, #280]	; (800133c <HAL_I2C_MspInit+0x1b0>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001228:	4b44      	ldr	r3, [pc, #272]	; (800133c <HAL_I2C_MspInit+0x1b0>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800122e:	4b43      	ldr	r3, [pc, #268]	; (800133c <HAL_I2C_MspInit+0x1b0>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001234:	4b41      	ldr	r3, [pc, #260]	; (800133c <HAL_I2C_MspInit+0x1b0>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800123a:	4b40      	ldr	r3, [pc, #256]	; (800133c <HAL_I2C_MspInit+0x1b0>)
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001240:	483e      	ldr	r0, [pc, #248]	; (800133c <HAL_I2C_MspInit+0x1b0>)
 8001242:	f000 fe37 	bl	8001eb4 <HAL_DMA_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_I2C_MspInit+0xc4>
    {
      Error_Handler();
 800124c:	f7ff ff74 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a3a      	ldr	r2, [pc, #232]	; (800133c <HAL_I2C_MspInit+0x1b0>)
 8001254:	639a      	str	r2, [r3, #56]	; 0x38
 8001256:	4a39      	ldr	r2, [pc, #228]	; (800133c <HAL_I2C_MspInit+0x1b0>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800125c:	e063      	b.n	8001326 <HAL_I2C_MspInit+0x19a>
  else if(hi2c->Instance==I2C2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a38      	ldr	r2, [pc, #224]	; (8001344 <HAL_I2C_MspInit+0x1b8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d15e      	bne.n	8001326 <HAL_I2C_MspInit+0x19a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001268:	4b32      	ldr	r3, [pc, #200]	; (8001334 <HAL_I2C_MspInit+0x1a8>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	4a31      	ldr	r2, [pc, #196]	; (8001334 <HAL_I2C_MspInit+0x1a8>)
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	6313      	str	r3, [r2, #48]	; 0x30
 8001274:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <HAL_I2C_MspInit+0x1a8>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001280:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001286:	2312      	movs	r3, #18
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001292:	2304      	movs	r3, #4
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4826      	ldr	r0, [pc, #152]	; (8001338 <HAL_I2C_MspInit+0x1ac>)
 800129e:	f002 fbb7 	bl	8003a10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <HAL_I2C_MspInit+0x1a8>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a23      	ldr	r2, [pc, #140]	; (8001334 <HAL_I2C_MspInit+0x1a8>)
 80012a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b21      	ldr	r3, [pc, #132]	; (8001334 <HAL_I2C_MspInit+0x1a8>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 80012ba:	4b23      	ldr	r3, [pc, #140]	; (8001348 <HAL_I2C_MspInit+0x1bc>)
 80012bc:	4a23      	ldr	r2, [pc, #140]	; (800134c <HAL_I2C_MspInit+0x1c0>)
 80012be:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80012c0:	4b21      	ldr	r3, [pc, #132]	; (8001348 <HAL_I2C_MspInit+0x1bc>)
 80012c2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80012c6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <HAL_I2C_MspInit+0x1bc>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <HAL_I2C_MspInit+0x1bc>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_I2C_MspInit+0x1bc>)
 80012d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012da:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_I2C_MspInit+0x1bc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_I2C_MspInit+0x1bc>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_I2C_MspInit+0x1bc>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_I2C_MspInit+0x1bc>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f4:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_I2C_MspInit+0x1bc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80012fa:	4813      	ldr	r0, [pc, #76]	; (8001348 <HAL_I2C_MspInit+0x1bc>)
 80012fc:	f000 fdda 	bl	8001eb4 <HAL_DMA_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_I2C_MspInit+0x17e>
      Error_Handler();
 8001306:	f7ff ff17 	bl	8001138 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_I2C_MspInit+0x1bc>)
 800130e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001310:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <HAL_I2C_MspInit+0x1bc>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2021      	movs	r0, #33	; 0x21
 800131c:	f000 fd93 	bl	8001e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001320:	2021      	movs	r0, #33	; 0x21
 8001322:	f000 fdac 	bl	8001e7e <HAL_NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3730      	adds	r7, #48	; 0x30
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40005400 	.word	0x40005400
 8001334:	40023800 	.word	0x40023800
 8001338:	40020400 	.word	0x40020400
 800133c:	20000368 	.word	0x20000368
 8001340:	400260b8 	.word	0x400260b8
 8001344:	40005800 	.word	0x40005800
 8001348:	200008ec 	.word	0x200008ec
 800134c:	40026058 	.word	0x40026058

08001350 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a60      	ldr	r2, [pc, #384]	; (80014f0 <HAL_SPI_MspInit+0x1a0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d156      	bne.n	8001420 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001372:	4b60      	ldr	r3, [pc, #384]	; (80014f4 <HAL_SPI_MspInit+0x1a4>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	4a5f      	ldr	r2, [pc, #380]	; (80014f4 <HAL_SPI_MspInit+0x1a4>)
 8001378:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800137c:	6453      	str	r3, [r2, #68]	; 0x44
 800137e:	4b5d      	ldr	r3, [pc, #372]	; (80014f4 <HAL_SPI_MspInit+0x1a4>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800138a:	4b5a      	ldr	r3, [pc, #360]	; (80014f4 <HAL_SPI_MspInit+0x1a4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a59      	ldr	r2, [pc, #356]	; (80014f4 <HAL_SPI_MspInit+0x1a4>)
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b57      	ldr	r3, [pc, #348]	; (80014f4 <HAL_SPI_MspInit+0x1a4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80013a2:	2364      	movs	r3, #100	; 0x64
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80013b2:	2305      	movs	r3, #5
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	484e      	ldr	r0, [pc, #312]	; (80014f8 <HAL_SPI_MspInit+0x1a8>)
 80013be:	f002 fb27 	bl	8003a10 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80013c2:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <HAL_SPI_MspInit+0x1ac>)
 80013c4:	4a4e      	ldr	r2, [pc, #312]	; (8001500 <HAL_SPI_MspInit+0x1b0>)
 80013c6:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 80013c8:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <HAL_SPI_MspInit+0x1ac>)
 80013ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013ce:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013d0:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <HAL_SPI_MspInit+0x1ac>)
 80013d2:	2240      	movs	r2, #64	; 0x40
 80013d4:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d6:	4b49      	ldr	r3, [pc, #292]	; (80014fc <HAL_SPI_MspInit+0x1ac>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013dc:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_SPI_MspInit+0x1ac>)
 80013de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013e2:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013e4:	4b45      	ldr	r3, [pc, #276]	; (80014fc <HAL_SPI_MspInit+0x1ac>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ea:	4b44      	ldr	r3, [pc, #272]	; (80014fc <HAL_SPI_MspInit+0x1ac>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80013f0:	4b42      	ldr	r3, [pc, #264]	; (80014fc <HAL_SPI_MspInit+0x1ac>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_SPI_MspInit+0x1ac>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013fc:	4b3f      	ldr	r3, [pc, #252]	; (80014fc <HAL_SPI_MspInit+0x1ac>)
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001402:	483e      	ldr	r0, [pc, #248]	; (80014fc <HAL_SPI_MspInit+0x1ac>)
 8001404:	f000 fd56 	bl	8001eb4 <HAL_DMA_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 800140e:	f7ff fe93 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a39      	ldr	r2, [pc, #228]	; (80014fc <HAL_SPI_MspInit+0x1ac>)
 8001416:	655a      	str	r2, [r3, #84]	; 0x54
 8001418:	4a38      	ldr	r2, [pc, #224]	; (80014fc <HAL_SPI_MspInit+0x1ac>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800141e:	e063      	b.n	80014e8 <HAL_SPI_MspInit+0x198>
  else if(hspi->Instance==SPI5)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a37      	ldr	r2, [pc, #220]	; (8001504 <HAL_SPI_MspInit+0x1b4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d15e      	bne.n	80014e8 <HAL_SPI_MspInit+0x198>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800142a:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <HAL_SPI_MspInit+0x1a4>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a31      	ldr	r2, [pc, #196]	; (80014f4 <HAL_SPI_MspInit+0x1a4>)
 8001430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b2f      	ldr	r3, [pc, #188]	; (80014f4 <HAL_SPI_MspInit+0x1a4>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001442:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <HAL_SPI_MspInit+0x1a4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a2b      	ldr	r2, [pc, #172]	; (80014f4 <HAL_SPI_MspInit+0x1a4>)
 8001448:	f043 0320 	orr.w	r3, r3, #32
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <HAL_SPI_MspInit+0x1a4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0320 	and.w	r3, r3, #32
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800145a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800146c:	2305      	movs	r3, #5
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	4619      	mov	r1, r3
 8001476:	4824      	ldr	r0, [pc, #144]	; (8001508 <HAL_SPI_MspInit+0x1b8>)
 8001478:	f002 faca 	bl	8003a10 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA2_Stream3;
 800147c:	4b23      	ldr	r3, [pc, #140]	; (800150c <HAL_SPI_MspInit+0x1bc>)
 800147e:	4a24      	ldr	r2, [pc, #144]	; (8001510 <HAL_SPI_MspInit+0x1c0>)
 8001480:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 8001482:	4b22      	ldr	r3, [pc, #136]	; (800150c <HAL_SPI_MspInit+0x1bc>)
 8001484:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001488:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_SPI_MspInit+0x1bc>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_SPI_MspInit+0x1bc>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_SPI_MspInit+0x1bc>)
 8001498:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800149c:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_SPI_MspInit+0x1bc>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_SPI_MspInit+0x1bc>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_SPI_MspInit+0x1bc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014b0:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_SPI_MspInit+0x1bc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_SPI_MspInit+0x1bc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80014bc:	4813      	ldr	r0, [pc, #76]	; (800150c <HAL_SPI_MspInit+0x1bc>)
 80014be:	f000 fcf9 	bl	8001eb4 <HAL_DMA_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_SPI_MspInit+0x17c>
      Error_Handler();
 80014c8:	f7ff fe36 	bl	8001138 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi5_rx);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_SPI_MspInit+0x1bc>)
 80014d0:	659a      	str	r2, [r3, #88]	; 0x58
 80014d2:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_SPI_MspInit+0x1bc>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 80014d8:	2200      	movs	r2, #0
 80014da:	2100      	movs	r1, #0
 80014dc:	2055      	movs	r0, #85	; 0x55
 80014de:	f000 fcb2 	bl	8001e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80014e2:	2055      	movs	r0, #85	; 0x55
 80014e4:	f000 fccb 	bl	8001e7e <HAL_NVIC_EnableIRQ>
}
 80014e8:	bf00      	nop
 80014ea:	3730      	adds	r7, #48	; 0x30
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40013400 	.word	0x40013400
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40021000 	.word	0x40021000
 80014fc:	200009ac 	.word	0x200009ac
 8001500:	40026428 	.word	0x40026428
 8001504:	40015000 	.word	0x40015000
 8001508:	40021400 	.word	0x40021400
 800150c:	20000864 	.word	0x20000864
 8001510:	40026458 	.word	0x40026458

08001514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b090      	sub	sp, #64	; 0x40
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a94      	ldr	r2, [pc, #592]	; (8001784 <HAL_UART_MspInit+0x270>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d17b      	bne.n	800162e <HAL_UART_MspInit+0x11a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001536:	4b94      	ldr	r3, [pc, #592]	; (8001788 <HAL_UART_MspInit+0x274>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a93      	ldr	r2, [pc, #588]	; (8001788 <HAL_UART_MspInit+0x274>)
 800153c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b91      	ldr	r3, [pc, #580]	; (8001788 <HAL_UART_MspInit+0x274>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
 800154c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b8e      	ldr	r3, [pc, #568]	; (8001788 <HAL_UART_MspInit+0x274>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a8d      	ldr	r2, [pc, #564]	; (8001788 <HAL_UART_MspInit+0x274>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b8b      	ldr	r3, [pc, #556]	; (8001788 <HAL_UART_MspInit+0x274>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	4b88      	ldr	r3, [pc, #544]	; (8001788 <HAL_UART_MspInit+0x274>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a87      	ldr	r2, [pc, #540]	; (8001788 <HAL_UART_MspInit+0x274>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b85      	ldr	r3, [pc, #532]	; (8001788 <HAL_UART_MspInit+0x274>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	623b      	str	r3, [r7, #32]
 800157c:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800157e:	2301      	movs	r3, #1
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800158e:	2308      	movs	r3, #8
 8001590:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001596:	4619      	mov	r1, r3
 8001598:	487c      	ldr	r0, [pc, #496]	; (800178c <HAL_UART_MspInit+0x278>)
 800159a:	f002 fa39 	bl	8003a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800159e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015b0:	2308      	movs	r3, #8
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015b8:	4619      	mov	r1, r3
 80015ba:	4875      	ldr	r0, [pc, #468]	; (8001790 <HAL_UART_MspInit+0x27c>)
 80015bc:	f002 fa28 	bl	8003a10 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80015c0:	4b74      	ldr	r3, [pc, #464]	; (8001794 <HAL_UART_MspInit+0x280>)
 80015c2:	4a75      	ldr	r2, [pc, #468]	; (8001798 <HAL_UART_MspInit+0x284>)
 80015c4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80015c6:	4b73      	ldr	r3, [pc, #460]	; (8001794 <HAL_UART_MspInit+0x280>)
 80015c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015cc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ce:	4b71      	ldr	r3, [pc, #452]	; (8001794 <HAL_UART_MspInit+0x280>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d4:	4b6f      	ldr	r3, [pc, #444]	; (8001794 <HAL_UART_MspInit+0x280>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015da:	4b6e      	ldr	r3, [pc, #440]	; (8001794 <HAL_UART_MspInit+0x280>)
 80015dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015e0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015e2:	4b6c      	ldr	r3, [pc, #432]	; (8001794 <HAL_UART_MspInit+0x280>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e8:	4b6a      	ldr	r3, [pc, #424]	; (8001794 <HAL_UART_MspInit+0x280>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80015ee:	4b69      	ldr	r3, [pc, #420]	; (8001794 <HAL_UART_MspInit+0x280>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015f4:	4b67      	ldr	r3, [pc, #412]	; (8001794 <HAL_UART_MspInit+0x280>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015fa:	4b66      	ldr	r3, [pc, #408]	; (8001794 <HAL_UART_MspInit+0x280>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001600:	4864      	ldr	r0, [pc, #400]	; (8001794 <HAL_UART_MspInit+0x280>)
 8001602:	f000 fc57 	bl	8001eb4 <HAL_DMA_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 800160c:	f7ff fd94 	bl	8001138 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a60      	ldr	r2, [pc, #384]	; (8001794 <HAL_UART_MspInit+0x280>)
 8001614:	671a      	str	r2, [r3, #112]	; 0x70
 8001616:	4a5f      	ldr	r2, [pc, #380]	; (8001794 <HAL_UART_MspInit+0x280>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2100      	movs	r1, #0
 8001620:	2034      	movs	r0, #52	; 0x34
 8001622:	f000 fc10 	bl	8001e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001626:	2034      	movs	r0, #52	; 0x34
 8001628:	f000 fc29 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800162c:	e0a5      	b.n	800177a <HAL_UART_MspInit+0x266>
  else if(huart->Instance==USART2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a5a      	ldr	r2, [pc, #360]	; (800179c <HAL_UART_MspInit+0x288>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d172      	bne.n	800171e <HAL_UART_MspInit+0x20a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001638:	4b53      	ldr	r3, [pc, #332]	; (8001788 <HAL_UART_MspInit+0x274>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	4a52      	ldr	r2, [pc, #328]	; (8001788 <HAL_UART_MspInit+0x274>)
 800163e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001642:	6413      	str	r3, [r2, #64]	; 0x40
 8001644:	4b50      	ldr	r3, [pc, #320]	; (8001788 <HAL_UART_MspInit+0x274>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <HAL_UART_MspInit+0x274>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	4a4c      	ldr	r2, [pc, #304]	; (8001788 <HAL_UART_MspInit+0x274>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6313      	str	r3, [r2, #48]	; 0x30
 800165c:	4b4a      	ldr	r3, [pc, #296]	; (8001788 <HAL_UART_MspInit+0x274>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001668:	4b47      	ldr	r3, [pc, #284]	; (8001788 <HAL_UART_MspInit+0x274>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	4a46      	ldr	r2, [pc, #280]	; (8001788 <HAL_UART_MspInit+0x274>)
 800166e:	f043 0308 	orr.w	r3, r3, #8
 8001672:	6313      	str	r3, [r2, #48]	; 0x30
 8001674:	4b44      	ldr	r3, [pc, #272]	; (8001788 <HAL_UART_MspInit+0x274>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001680:	2308      	movs	r3, #8
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001690:	2307      	movs	r3, #7
 8001692:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001698:	4619      	mov	r1, r3
 800169a:	483c      	ldr	r0, [pc, #240]	; (800178c <HAL_UART_MspInit+0x278>)
 800169c:	f002 f9b8 	bl	8003a10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80016a0:	2320      	movs	r3, #32
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	2303      	movs	r3, #3
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b0:	2307      	movs	r3, #7
 80016b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b8:	4619      	mov	r1, r3
 80016ba:	4839      	ldr	r0, [pc, #228]	; (80017a0 <HAL_UART_MspInit+0x28c>)
 80016bc:	f002 f9a8 	bl	8003a10 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016c0:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <HAL_UART_MspInit+0x290>)
 80016c2:	4a39      	ldr	r2, [pc, #228]	; (80017a8 <HAL_UART_MspInit+0x294>)
 80016c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016c6:	4b37      	ldr	r3, [pc, #220]	; (80017a4 <HAL_UART_MspInit+0x290>)
 80016c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ce:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <HAL_UART_MspInit+0x290>)
 80016d0:	2240      	movs	r2, #64	; 0x40
 80016d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d4:	4b33      	ldr	r3, [pc, #204]	; (80017a4 <HAL_UART_MspInit+0x290>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016da:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <HAL_UART_MspInit+0x290>)
 80016dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e2:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <HAL_UART_MspInit+0x290>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e8:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <HAL_UART_MspInit+0x290>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016ee:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_UART_MspInit+0x290>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <HAL_UART_MspInit+0x290>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016fa:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <HAL_UART_MspInit+0x290>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001700:	4828      	ldr	r0, [pc, #160]	; (80017a4 <HAL_UART_MspInit+0x290>)
 8001702:	f000 fbd7 	bl	8001eb4 <HAL_DMA_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 800170c:	f7ff fd14 	bl	8001138 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a24      	ldr	r2, [pc, #144]	; (80017a4 <HAL_UART_MspInit+0x290>)
 8001714:	66da      	str	r2, [r3, #108]	; 0x6c
 8001716:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <HAL_UART_MspInit+0x290>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800171c:	e02d      	b.n	800177a <HAL_UART_MspInit+0x266>
  else if(huart->Instance==USART3)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a22      	ldr	r2, [pc, #136]	; (80017ac <HAL_UART_MspInit+0x298>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d128      	bne.n	800177a <HAL_UART_MspInit+0x266>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_UART_MspInit+0x274>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	4a16      	ldr	r2, [pc, #88]	; (8001788 <HAL_UART_MspInit+0x274>)
 800172e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001732:	6413      	str	r3, [r2, #64]	; 0x40
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <HAL_UART_MspInit+0x274>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_UART_MspInit+0x274>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	4a10      	ldr	r2, [pc, #64]	; (8001788 <HAL_UART_MspInit+0x274>)
 8001746:	f043 0308 	orr.w	r3, r3, #8
 800174a:	6313      	str	r3, [r2, #48]	; 0x30
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_UART_MspInit+0x274>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	f003 0308 	and.w	r3, r3, #8
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001758:	f44f 7340 	mov.w	r3, #768	; 0x300
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800176a:	2307      	movs	r3, #7
 800176c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800176e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001772:	4619      	mov	r1, r3
 8001774:	480a      	ldr	r0, [pc, #40]	; (80017a0 <HAL_UART_MspInit+0x28c>)
 8001776:	f002 f94b 	bl	8003a10 <HAL_GPIO_Init>
}
 800177a:	bf00      	nop
 800177c:	3740      	adds	r7, #64	; 0x40
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40004c00 	.word	0x40004c00
 8001788:	40023800 	.word	0x40023800
 800178c:	40020000 	.word	0x40020000
 8001790:	40020800 	.word	0x40020800
 8001794:	20000220 	.word	0x20000220
 8001798:	40026040 	.word	0x40026040
 800179c:	40004400 	.word	0x40004400
 80017a0:	40020c00 	.word	0x40020c00
 80017a4:	2000094c 	.word	0x2000094c
 80017a8:	400260a0 	.word	0x400260a0
 80017ac:	40004800 	.word	0x40004800

080017b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017d0:	d141      	bne.n	8001856 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <HAL_PCD_MspInit+0xb0>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a22      	ldr	r2, [pc, #136]	; (8001860 <HAL_PCD_MspInit+0xb0>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_PCD_MspInit+0xb0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017ea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017fc:	230a      	movs	r3, #10
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	4817      	ldr	r0, [pc, #92]	; (8001864 <HAL_PCD_MspInit+0xb4>)
 8001808:	f002 f902 	bl	8003a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800180c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	4810      	ldr	r0, [pc, #64]	; (8001864 <HAL_PCD_MspInit+0xb4>)
 8001822:	f002 f8f5 	bl	8003a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <HAL_PCD_MspInit+0xb0>)
 8001828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182a:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <HAL_PCD_MspInit+0xb0>)
 800182c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001830:	6353      	str	r3, [r2, #52]	; 0x34
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_PCD_MspInit+0xb0>)
 8001834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_PCD_MspInit+0xb0>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_PCD_MspInit+0xb0>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001848:	6453      	str	r3, [r2, #68]	; 0x44
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_PCD_MspInit+0xb0>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	; 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	40020000 	.word	0x40020000

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800186c:	e7fe      	b.n	800186c <NMI_Handler+0x4>

0800186e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <MemManage_Handler+0x4>

0800187a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <UsageFault_Handler+0x4>

08001886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b4:	f000 f9a8 	bl	8001c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	bd80      	pop	{r7, pc}

080018bc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <DMA1_Stream2_IRQHandler+0x10>)
 80018c2:	f000 fc97 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000220 	.word	0x20000220

080018d0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <DMA1_Stream3_IRQHandler+0x10>)
 80018d6:	f000 fc8d 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200008ec 	.word	0x200008ec

080018e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <DMA1_Stream6_IRQHandler+0x10>)
 80018ea:	f000 fc83 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000094c 	.word	0x2000094c

080018f8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <I2C2_EV_IRQHandler+0x10>)
 80018fe:	f002 fc87 	bl	8004210 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000818 	.word	0x20000818

0800190c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <DMA1_Stream7_IRQHandler+0x10>)
 8001912:	f000 fc6f 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000368 	.word	0x20000368

08001920 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <UART4_IRQHandler+0x10>)
 8001926:	f006 faf1 	bl	8007f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000a8c 	.word	0x20000a8c

08001934 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <DMA2_Stream1_IRQHandler+0x10>)
 800193a:	f000 fc5b 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	200009ac 	.word	0x200009ac

08001948 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <DMA2_Stream3_IRQHandler+0x10>)
 800194e:	f000 fc51 	bl	80021f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000864 	.word	0x20000864

0800195c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <ETH_IRQHandler+0x10>)
 8001962:	f001 faa9 	bl	8002eb8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200024bc 	.word	0x200024bc

08001970 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <SPI5_IRQHandler+0x10>)
 8001976:	f005 fddb 	bl	8007530 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000280 	.word	0x20000280

08001984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
	return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_kill>:

int _kill(int pid, int sig)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <_kill+0x20>)
 80019a0:	2216      	movs	r2, #22
 80019a2:	601a      	str	r2, [r3, #0]
	return -1;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	20008ddc 	.word	0x20008ddc

080019b8 <_exit>:

void _exit (int status)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ffe5 	bl	8001994 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019ca:	e7fe      	b.n	80019ca <_exit+0x12>

080019cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	e00a      	b.n	80019f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019de:	f3af 8000 	nop.w
 80019e2:	4601      	mov	r1, r0
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	60ba      	str	r2, [r7, #8]
 80019ea:	b2ca      	uxtb	r2, r1
 80019ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dbf0      	blt.n	80019de <_read+0x12>
	}

return len;
 80019fc:	687b      	ldr	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e009      	b.n	8001a2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	60ba      	str	r2, [r7, #8]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7fe fdc9 	bl	80005b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dbf1      	blt.n	8001a18 <_write+0x12>
	}
	return len;
 8001a34:	687b      	ldr	r3, [r7, #4]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_close>:

int _close(int file)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
	return -1;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a66:	605a      	str	r2, [r3, #4]
	return 0;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <_isatty>:

int _isatty(int file)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
	return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab0:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <_sbrk+0x5c>)
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <_sbrk+0x60>)
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <_sbrk+0x64>)
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <_sbrk+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d205      	bcs.n	8001ae4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <_sbrk+0x6c>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <_sbrk+0x64>)
 8001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	20050000 	.word	0x20050000
 8001b08:	00000400 	.word	0x00000400
 8001b0c:	200000a0 	.word	0x200000a0
 8001b10:	20008df0 	.word	0x20008df0
 8001b14:	20008ddc 	.word	0x20008ddc

08001b18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <SystemInit+0x20>)
 8001b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <SystemInit+0x20>)
 8001b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b40:	480d      	ldr	r0, [pc, #52]	; (8001b78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b42:	490e      	ldr	r1, [pc, #56]	; (8001b7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b44:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0b      	ldr	r2, [pc, #44]	; (8001b84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b58:	4c0b      	ldr	r4, [pc, #44]	; (8001b88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b66:	f7ff ffd7 	bl	8001b18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b6a:	f011 ff6d 	bl	8013a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b6e:	f7fe fd35 	bl	80005dc <main>
  bx  lr    
 8001b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b7c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001b80:	08017a58 	.word	0x08017a58
  ldr r2, =_sbss
 8001b84:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001b88:	20008dec 	.word	0x20008dec

08001b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b8c:	e7fe      	b.n	8001b8c <ADC_IRQHandler>

08001b8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b92:	2003      	movs	r0, #3
 8001b94:	f000 f94c 	bl	8001e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f000 f805 	bl	8001ba8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001b9e:	f7ff fad1 	bl	8001144 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x54>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <HAL_InitTick+0x58>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 f967 	bl	8001e9a <HAL_SYSTICK_Config>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00e      	b.n	8001bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d80a      	bhi.n	8001bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f000 f92f 	bl	8001e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be8:	4a06      	ldr	r2, [pc, #24]	; (8001c04 <HAL_InitTick+0x5c>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e000      	b.n	8001bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	2000000c 	.word	0x2000000c
 8001c04:	20000008 	.word	0x20000008

08001c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x20>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_IncTick+0x24>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_IncTick+0x24>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	2000000c 	.word	0x2000000c
 8001c2c:	20000b9c 	.word	0x20000b9c

08001c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTick;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <HAL_GetTick+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000b9c 	.word	0x20000b9c

08001c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff ffee 	bl	8001c30 <HAL_GetTick>
 8001c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d005      	beq.n	8001c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_Delay+0x44>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6e:	bf00      	nop
 8001c70:	f7ff ffde 	bl	8001c30 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d8f7      	bhi.n	8001c70 <HAL_Delay+0x28>
  {
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	2000000c 	.word	0x2000000c

08001c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cac:	4013      	ands	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cbe:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	60d3      	str	r3, [r2, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00
 8001cd4:	05fa0000 	.word	0x05fa0000

08001cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	0a1b      	lsrs	r3, r3, #8
 8001ce2:	f003 0307 	and.w	r3, r3, #7
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	db0b      	blt.n	8001d1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	f003 021f 	and.w	r2, r3, #31
 8001d0c:	4907      	ldr	r1, [pc, #28]	; (8001d2c <__NVIC_EnableIRQ+0x38>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	095b      	lsrs	r3, r3, #5
 8001d14:	2001      	movs	r0, #1
 8001d16:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000e100 	.word	0xe000e100

08001d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	db0a      	blt.n	8001d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	490c      	ldr	r1, [pc, #48]	; (8001d7c <__NVIC_SetPriority+0x4c>)
 8001d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4e:	0112      	lsls	r2, r2, #4
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	440b      	add	r3, r1
 8001d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d58:	e00a      	b.n	8001d70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4908      	ldr	r1, [pc, #32]	; (8001d80 <__NVIC_SetPriority+0x50>)
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	3b04      	subs	r3, #4
 8001d68:	0112      	lsls	r2, r2, #4
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	761a      	strb	r2, [r3, #24]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	e000e100 	.word	0xe000e100
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	; 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f1c3 0307 	rsb	r3, r3, #7
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	bf28      	it	cs
 8001da2:	2304      	movcs	r3, #4
 8001da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3304      	adds	r3, #4
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d902      	bls.n	8001db4 <NVIC_EncodePriority+0x30>
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3b03      	subs	r3, #3
 8001db2:	e000      	b.n	8001db6 <NVIC_EncodePriority+0x32>
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	43d9      	mvns	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	4313      	orrs	r3, r2
         );
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3724      	adds	r7, #36	; 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dfc:	d301      	bcc.n	8001e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00f      	b.n	8001e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e02:	4a0a      	ldr	r2, [pc, #40]	; (8001e2c <SysTick_Config+0x40>)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f7ff ff8e 	bl	8001d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <SysTick_Config+0x40>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <SysTick_Config+0x40>)
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	e000e010 	.word	0xe000e010

08001e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ff29 	bl	8001c90 <__NVIC_SetPriorityGrouping>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e58:	f7ff ff3e 	bl	8001cd8 <__NVIC_GetPriorityGrouping>
 8001e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	6978      	ldr	r0, [r7, #20]
 8001e64:	f7ff ff8e 	bl	8001d84 <NVIC_EncodePriority>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff5d 	bl	8001d30 <__NVIC_SetPriority>
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4603      	mov	r3, r0
 8001e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff31 	bl	8001cf4 <__NVIC_EnableIRQ>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff ffa2 	bl	8001dec <SysTick_Config>
 8001ea8:	4603      	mov	r3, r0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ec0:	f7ff feb6 	bl	8001c30 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e099      	b.n	8002004 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0201 	bic.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef0:	e00f      	b.n	8001f12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ef2:	f7ff fe9d 	bl	8001c30 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d908      	bls.n	8001f12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2220      	movs	r2, #32
 8001f04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2203      	movs	r2, #3
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e078      	b.n	8002004 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1e8      	bne.n	8001ef2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	4b38      	ldr	r3, [pc, #224]	; (800200c <HAL_DMA_Init+0x158>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d107      	bne.n	8001f7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	4313      	orrs	r3, r2
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f023 0307 	bic.w	r3, r3, #7
 8001f92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d117      	bne.n	8001fd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00e      	beq.n	8001fd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fb23 	bl	8002604 <DMA_CheckFifoParam>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2240      	movs	r2, #64	; 0x40
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e016      	b.n	8002004 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fada 	bl	8002598 <DMA_CalcBaseAndBitshift>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fec:	223f      	movs	r2, #63	; 0x3f
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	f010803f 	.word	0xf010803f

08002010 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_DMA_Start_IT+0x26>
 8002032:	2302      	movs	r3, #2
 8002034:	e048      	b.n	80020c8 <HAL_DMA_Start_IT+0xb8>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d137      	bne.n	80020ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2202      	movs	r2, #2
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 fa6c 	bl	800253c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	223f      	movs	r2, #63	; 0x3f
 800206a:	409a      	lsls	r2, r3
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0216 	orr.w	r2, r2, #22
 800207e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800208e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0208 	orr.w	r2, r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e005      	b.n	80020c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020c2:	2302      	movs	r3, #2
 80020c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020de:	f7ff fda7 	bl	8001c30 <HAL_GetTick>
 80020e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d008      	beq.n	8002102 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e052      	b.n	80021a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0216 	bic.w	r2, r2, #22
 8002110:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002120:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_DMA_Abort+0x62>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0208 	bic.w	r2, r2, #8
 8002140:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f022 0201 	bic.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002152:	e013      	b.n	800217c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002154:	f7ff fd6c 	bl	8001c30 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b05      	cmp	r3, #5
 8002160:	d90c      	bls.n	800217c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2203      	movs	r2, #3
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e015      	b.n	80021a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1e4      	bne.n	8002154 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	223f      	movs	r2, #63	; 0x3f
 8002190:	409a      	lsls	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d004      	beq.n	80021ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2280      	movs	r2, #128	; 0x80
 80021c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00c      	b.n	80021e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2205      	movs	r2, #5
 80021d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002200:	4b92      	ldr	r3, [pc, #584]	; (800244c <HAL_DMA_IRQHandler+0x258>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a92      	ldr	r2, [pc, #584]	; (8002450 <HAL_DMA_IRQHandler+0x25c>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0a9b      	lsrs	r3, r3, #10
 800220c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	2208      	movs	r2, #8
 8002220:	409a      	lsls	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4013      	ands	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d01a      	beq.n	8002260 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d013      	beq.n	8002260 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0204 	bic.w	r2, r2, #4
 8002246:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	2208      	movs	r2, #8
 800224e:	409a      	lsls	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f043 0201 	orr.w	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	2201      	movs	r2, #1
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d012      	beq.n	8002296 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2201      	movs	r2, #1
 8002284:	409a      	lsls	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228e:	f043 0202 	orr.w	r2, r3, #2
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229a:	2204      	movs	r2, #4
 800229c:	409a      	lsls	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d012      	beq.n	80022cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00b      	beq.n	80022cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	2204      	movs	r2, #4
 80022ba:	409a      	lsls	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c4:	f043 0204 	orr.w	r2, r3, #4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d0:	2210      	movs	r2, #16
 80022d2:	409a      	lsls	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d043      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d03c      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	2210      	movs	r2, #16
 80022f0:	409a      	lsls	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d018      	beq.n	8002336 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d108      	bne.n	8002324 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d024      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4798      	blx	r3
 8002322:	e01f      	b.n	8002364 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002328:	2b00      	cmp	r3, #0
 800232a:	d01b      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
 8002334:	e016      	b.n	8002364 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d107      	bne.n	8002354 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0208 	bic.w	r2, r2, #8
 8002352:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	2220      	movs	r2, #32
 800236a:	409a      	lsls	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4013      	ands	r3, r2
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 808e 	beq.w	8002492 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 8086 	beq.w	8002492 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238a:	2220      	movs	r2, #32
 800238c:	409a      	lsls	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b05      	cmp	r3, #5
 800239c:	d136      	bne.n	800240c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0216 	bic.w	r2, r2, #22
 80023ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d103      	bne.n	80023ce <HAL_DMA_IRQHandler+0x1da>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0208 	bic.w	r2, r2, #8
 80023dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e2:	223f      	movs	r2, #63	; 0x3f
 80023e4:	409a      	lsls	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d07d      	beq.n	80024fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
        }
        return;
 800240a:	e078      	b.n	80024fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d01c      	beq.n	8002454 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d108      	bne.n	800243a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242c:	2b00      	cmp	r3, #0
 800242e:	d030      	beq.n	8002492 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
 8002438:	e02b      	b.n	8002492 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	2b00      	cmp	r3, #0
 8002440:	d027      	beq.n	8002492 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
 800244a:	e022      	b.n	8002492 <HAL_DMA_IRQHandler+0x29e>
 800244c:	20000004 	.word	0x20000004
 8002450:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0210 	bic.w	r2, r2, #16
 8002470:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	2b00      	cmp	r3, #0
 8002498:	d032      	beq.n	8002500 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d022      	beq.n	80024ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2205      	movs	r2, #5
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0201 	bic.w	r2, r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	3301      	adds	r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d307      	bcc.n	80024da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f2      	bne.n	80024be <HAL_DMA_IRQHandler+0x2ca>
 80024d8:	e000      	b.n	80024dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80024da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
 80024fc:	e000      	b.n	8002500 <HAL_DMA_IRQHandler+0x30c>
        return;
 80024fe:	bf00      	nop
    }
  }
}
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop

08002508 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002516:	b2db      	uxtb	r3, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002558:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b40      	cmp	r3, #64	; 0x40
 8002568:	d108      	bne.n	800257c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800257a:	e007      	b.n	800258c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	60da      	str	r2, [r3, #12]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	3b10      	subs	r3, #16
 80025a8:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <DMA_CalcBaseAndBitshift+0x60>)
 80025aa:	fba2 2303 	umull	r2, r3, r2, r3
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <DMA_CalcBaseAndBitshift+0x64>)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4413      	add	r3, r2
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d908      	bls.n	80025d8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <DMA_CalcBaseAndBitshift+0x68>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	1d1a      	adds	r2, r3, #4
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	659a      	str	r2, [r3, #88]	; 0x58
 80025d6:	e006      	b.n	80025e6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <DMA_CalcBaseAndBitshift+0x68>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	aaaaaaab 	.word	0xaaaaaaab
 80025fc:	08017810 	.word	0x08017810
 8002600:	fffffc00 	.word	0xfffffc00

08002604 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d11f      	bne.n	800265e <DMA_CheckFifoParam+0x5a>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b03      	cmp	r3, #3
 8002622:	d856      	bhi.n	80026d2 <DMA_CheckFifoParam+0xce>
 8002624:	a201      	add	r2, pc, #4	; (adr r2, 800262c <DMA_CheckFifoParam+0x28>)
 8002626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262a:	bf00      	nop
 800262c:	0800263d 	.word	0x0800263d
 8002630:	0800264f 	.word	0x0800264f
 8002634:	0800263d 	.word	0x0800263d
 8002638:	080026d3 	.word	0x080026d3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d046      	beq.n	80026d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264c:	e043      	b.n	80026d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002652:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002656:	d140      	bne.n	80026da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265c:	e03d      	b.n	80026da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	699b      	ldr	r3, [r3, #24]
 8002662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002666:	d121      	bne.n	80026ac <DMA_CheckFifoParam+0xa8>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b03      	cmp	r3, #3
 800266c:	d837      	bhi.n	80026de <DMA_CheckFifoParam+0xda>
 800266e:	a201      	add	r2, pc, #4	; (adr r2, 8002674 <DMA_CheckFifoParam+0x70>)
 8002670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002674:	08002685 	.word	0x08002685
 8002678:	0800268b 	.word	0x0800268b
 800267c:	08002685 	.word	0x08002685
 8002680:	0800269d 	.word	0x0800269d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      break;
 8002688:	e030      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d025      	beq.n	80026e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800269a:	e022      	b.n	80026e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026a4:	d11f      	bne.n	80026e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026aa:	e01c      	b.n	80026e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d903      	bls.n	80026ba <DMA_CheckFifoParam+0xb6>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d003      	beq.n	80026c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026b8:	e018      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
      break;
 80026be:	e015      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00e      	beq.n	80026ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
      break;
 80026d0:	e00b      	b.n	80026ea <DMA_CheckFifoParam+0xe6>
      break;
 80026d2:	bf00      	nop
 80026d4:	e00a      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026d6:	bf00      	nop
 80026d8:	e008      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026da:	bf00      	nop
 80026dc:	e006      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026de:	bf00      	nop
 80026e0:	e004      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026e2:	bf00      	nop
 80026e4:	e002      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;   
 80026e6:	bf00      	nop
 80026e8:	e000      	b.n	80026ec <DMA_CheckFifoParam+0xe8>
      break;
 80026ea:	bf00      	nop
    }
  } 
  
  return status; 
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop

080026fc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b088      	sub	sp, #32
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800270c:	4ba9      	ldr	r3, [pc, #676]	; (80029b4 <HAL_ETH_Init+0x2b8>)
 800270e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e181      	b.n	8002a26 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f006 ff20 	bl	800957c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273c:	4b9e      	ldr	r3, [pc, #632]	; (80029b8 <HAL_ETH_Init+0x2bc>)
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	4a9d      	ldr	r2, [pc, #628]	; (80029b8 <HAL_ETH_Init+0x2bc>)
 8002742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002746:	6453      	str	r3, [r2, #68]	; 0x44
 8002748:	4b9b      	ldr	r3, [pc, #620]	; (80029b8 <HAL_ETH_Init+0x2bc>)
 800274a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002754:	4b99      	ldr	r3, [pc, #612]	; (80029bc <HAL_ETH_Init+0x2c0>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a98      	ldr	r2, [pc, #608]	; (80029bc <HAL_ETH_Init+0x2c0>)
 800275a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800275e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002760:	4b96      	ldr	r3, [pc, #600]	; (80029bc <HAL_ETH_Init+0x2c0>)
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4994      	ldr	r1, [pc, #592]	; (80029bc <HAL_ETH_Init+0x2c0>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0201 	orr.w	r2, r2, #1
 8002780:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002784:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002786:	f7ff fa53 	bl	8001c30 <HAL_GetTick>
 800278a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800278c:	e011      	b.n	80027b2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800278e:	f7ff fa4f 	bl	8001c30 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800279c:	d909      	bls.n	80027b2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2203      	movs	r2, #3
 80027a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e139      	b.n	8002a26 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e4      	bne.n	800278e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f023 031c 	bic.w	r3, r3, #28
 80027d2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80027d4:	f003 fdbe 	bl	8006354 <HAL_RCC_GetHCLKFreq>
 80027d8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	4a78      	ldr	r2, [pc, #480]	; (80029c0 <HAL_ETH_Init+0x2c4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d908      	bls.n	80027f4 <HAL_ETH_Init+0xf8>
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4a77      	ldr	r2, [pc, #476]	; (80029c4 <HAL_ETH_Init+0x2c8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d804      	bhi.n	80027f4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f043 0308 	orr.w	r3, r3, #8
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	e027      	b.n	8002844 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	4a73      	ldr	r2, [pc, #460]	; (80029c4 <HAL_ETH_Init+0x2c8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d908      	bls.n	800280e <HAL_ETH_Init+0x112>
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	4a6d      	ldr	r2, [pc, #436]	; (80029b4 <HAL_ETH_Init+0x2b8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d204      	bcs.n	800280e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f043 030c 	orr.w	r3, r3, #12
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	e01a      	b.n	8002844 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4a68      	ldr	r2, [pc, #416]	; (80029b4 <HAL_ETH_Init+0x2b8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d303      	bcc.n	800281e <HAL_ETH_Init+0x122>
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4a6b      	ldr	r2, [pc, #428]	; (80029c8 <HAL_ETH_Init+0x2cc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d911      	bls.n	8002842 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	4a69      	ldr	r2, [pc, #420]	; (80029c8 <HAL_ETH_Init+0x2cc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d908      	bls.n	8002838 <HAL_ETH_Init+0x13c>
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4a68      	ldr	r2, [pc, #416]	; (80029cc <HAL_ETH_Init+0x2d0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d804      	bhi.n	8002838 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	e005      	b.n	8002844 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f043 0310 	orr.w	r3, r3, #16
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	e000      	b.n	8002844 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002842:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800284c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002850:	2100      	movs	r1, #0
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fc1d 	bl	8003092 <HAL_ETH_WritePHYRegister>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002862:	6939      	ldr	r1, [r7, #16]
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fdd3 	bl	8003410 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e0d7      	b.n	8002a26 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002876:	20ff      	movs	r0, #255	; 0xff
 8002878:	f7ff f9e6 	bl	8001c48 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80a5 	beq.w	80029d0 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002886:	f7ff f9d3 	bl	8001c30 <HAL_GetTick>
 800288a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	461a      	mov	r2, r3
 8002892:	2101      	movs	r1, #1
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fb94 	bl	8002fc2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800289a:	f7ff f9c9 	bl	8001c30 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d90f      	bls.n	80028cc <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80028b0:	6939      	ldr	r1, [r7, #16]
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fdac 	bl	8003410 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e0ac      	b.n	8002a26 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0da      	beq.n	800288c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80028d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028da:	2100      	movs	r1, #0
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fbd8 	bl	8003092 <HAL_ETH_WritePHYRegister>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00b      	beq.n	8002900 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80028ec:	6939      	ldr	r1, [r7, #16]
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fd8e 	bl	8003410 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80028fc:	2301      	movs	r3, #1
 80028fe:	e092      	b.n	8002a26 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002900:	f7ff f996 	bl	8001c30 <HAL_GetTick>
 8002904:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002906:	f107 030c 	add.w	r3, r7, #12
 800290a:	461a      	mov	r2, r3
 800290c:	2101      	movs	r1, #1
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fb57 	bl	8002fc2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002914:	f7ff f98c 	bl	8001c30 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d90f      	bls.n	8002946 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800292a:	6939      	ldr	r1, [r7, #16]
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fd6f 	bl	8003410 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e06f      	b.n	8002a26 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0da      	beq.n	8002906 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002950:	f107 030c 	add.w	r3, r7, #12
 8002954:	461a      	mov	r2, r3
 8002956:	2110      	movs	r1, #16
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fb32 	bl	8002fc2 <HAL_ETH_ReadPHYRegister>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00b      	beq.n	800297c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002968:	6939      	ldr	r1, [r7, #16]
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fd50 	bl	8003410 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002978:	2301      	movs	r3, #1
 800297a:	e054      	b.n	8002a26 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b00      	cmp	r3, #0
 8002984:	d004      	beq.n	8002990 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	e002      	b.n	8002996 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	e035      	b.n	8002a14 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	e030      	b.n	8002a14 <HAL_ETH_Init+0x318>
 80029b2:	bf00      	nop
 80029b4:	03938700 	.word	0x03938700
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40013800 	.word	0x40013800
 80029c0:	01312cff 	.word	0x01312cff
 80029c4:	02160ebf 	.word	0x02160ebf
 80029c8:	05f5e0ff 	.word	0x05f5e0ff
 80029cc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	08db      	lsrs	r3, r3, #3
 80029d6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	085b      	lsrs	r3, r3, #1
 80029de:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80029e0:	4313      	orrs	r3, r2
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	2100      	movs	r1, #0
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fb52 	bl	8003092 <HAL_ETH_WritePHYRegister>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00b      	beq.n	8002a0c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80029f8:	6939      	ldr	r1, [r7, #16]
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 fd08 	bl	8003410 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e00c      	b.n	8002a26 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002a0c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002a10:	f7ff f91a 	bl	8001c48 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002a14:	6939      	ldr	r1, [r7, #16]
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fcfa 	bl	8003410 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3720      	adds	r7, #32
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop

08002a30 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_ETH_DMATxDescListInit+0x20>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e052      	b.n	8002af6 <HAL_ETH_DMATxDescListInit+0xc6>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	e030      	b.n	8002ace <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	015b      	lsls	r3, r3, #5
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	4413      	add	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a7c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d105      	bne.n	8002aa6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d208      	bcs.n	8002ac2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	015b      	lsls	r3, r3, #5
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4413      	add	r3, r2
 8002aba:	461a      	mov	r2, r3
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	60da      	str	r2, [r3, #12]
 8002ac0:	e002      	b.n	8002ac8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3301      	adds	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d3ca      	bcc.n	8002a6c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6819      	ldr	r1, [r3, #0]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	f241 0310 	movw	r3, #4112	; 0x1010
 8002ae0:	440b      	add	r3, r1
 8002ae2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b087      	sub	sp, #28
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_ETH_DMARxDescListInit+0x20>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e056      	b.n	8002bd0 <HAL_ETH_DMARxDescListInit+0xce>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
 8002b3c:	e034      	b.n	8002ba8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	015b      	lsls	r3, r3, #5
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	4413      	add	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b4e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002b56:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002b5e:	fb02 f303 	mul.w	r3, r2, r3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	461a      	mov	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d105      	bne.n	8002b80 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d208      	bcs.n	8002b9c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	015b      	lsls	r3, r3, #5
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	4413      	add	r3, r2
 8002b94:	461a      	mov	r2, r3
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	e002      	b.n	8002ba2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d3c6      	bcc.n	8002b3e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6819      	ldr	r1, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	f241 030c 	movw	r3, #4108	; 0x100c
 8002bba:	440b      	add	r3, r1
 8002bbc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	371c      	adds	r7, #28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_ETH_TransmitFrame+0x24>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e0cd      	b.n	8002d9c <HAL_ETH_TransmitFrame+0x1c0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0b8      	b.n	8002d9c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	da09      	bge.n	8002c48 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2212      	movs	r2, #18
 8002c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0a9      	b.n	8002d9c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d915      	bls.n	8002c7e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	4a54      	ldr	r2, [pc, #336]	; (8002da8 <HAL_ETH_TransmitFrame+0x1cc>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0a9b      	lsrs	r3, r3, #10
 8002c5c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	4b51      	ldr	r3, [pc, #324]	; (8002da8 <HAL_ETH_TransmitFrame+0x1cc>)
 8002c62:	fba3 1302 	umull	r1, r3, r3, r2
 8002c66:	0a9b      	lsrs	r3, r3, #10
 8002c68:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e001      	b.n	8002c82 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d11c      	bne.n	8002cc2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002c96:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002ca2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002cb2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cc0:	e04b      	b.n	8002d5a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	e044      	b.n	8002d52 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cd6:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d107      	bne.n	8002cee <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cec:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002cf6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d116      	bne.n	8002d30 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d10:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	4a25      	ldr	r2, [pc, #148]	; (8002dac <HAL_ETH_TransmitFrame+0x1d0>)
 8002d16:	fb02 f203 	mul.w	r2, r2, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002d22:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002d2e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d3e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	461a      	mov	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d3b6      	bcc.n	8002cc8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002d62:	4413      	add	r3, r2
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00d      	beq.n	8002d8a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	f241 0314 	movw	r3, #4116	; 0x1014
 8002d76:	4413      	add	r3, r2
 8002d78:	2204      	movs	r2, #4
 8002d7a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	f241 0304 	movw	r3, #4100	; 0x1004
 8002d84:	4413      	add	r3, r2
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	371c      	adds	r7, #28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	ac02b00b 	.word	0xac02b00b
 8002dac:	fffffa0c 	.word	0xfffffa0c

08002db0 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_ETH_GetReceivedFrame+0x1a>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e070      	b.n	8002eac <HAL_ETH_GetReceivedFrame+0xfc>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	db5a      	blt.n	8002e9a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d030      	beq.n	8002e54 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	1c5a      	adds	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d103      	bne.n	8002e0c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	0c1b      	lsrs	r3, r3, #16
 8002e1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002e20:	3b04      	subs	r3, #4
 8002e22:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	e02b      	b.n	8002eac <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d010      	beq.n	8002e84 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	629a      	str	r2, [r3, #40]	; 0x28
 8002e82:	e00a      	b.n	8002e9a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	461a      	mov	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	f241 0314 	movw	r3, #4116	; 0x1014
 8002ec8:	4413      	add	r3, r2
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d112      	bne.n	8002efa <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 f860 	bl	8002f9a <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	f241 0314 	movw	r3, #4116	; 0x1014
 8002ee2:	4413      	add	r3, r2
 8002ee4:	2240      	movs	r2, #64	; 0x40
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ef8:	e01b      	b.n	8002f32 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	f241 0314 	movw	r3, #4116	; 0x1014
 8002f02:	4413      	add	r3, r2
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d111      	bne.n	8002f32 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f839 	bl	8002f86 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	f241 0314 	movw	r3, #4116	; 0x1014
 8002f1c:	4413      	add	r3, r2
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	f241 0314 	movw	r3, #4116	; 0x1014
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f40:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	f241 0314 	movw	r3, #4116	; 0x1014
 8002f4a:	4413      	add	r3, r2
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f56:	d112      	bne.n	8002f7e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f828 	bl	8002fae <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	f241 0314 	movw	r3, #4116	; 0x1014
 8002f66:	4413      	add	r3, r2
 8002f68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002f6c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b086      	sub	sp, #24
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b82      	cmp	r3, #130	; 0x82
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e050      	b.n	800308a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2282      	movs	r2, #130	; 0x82
 8002fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f003 031c 	and.w	r3, r3, #28
 8002ffe:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8a1b      	ldrh	r3, [r3, #16]
 8003004:	02db      	lsls	r3, r3, #11
 8003006:	b29b      	uxth	r3, r3
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4313      	orrs	r3, r2
 800300c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800300e:	897b      	ldrh	r3, [r7, #10]
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f023 0302 	bic.w	r3, r3, #2
 8003022:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003034:	f7fe fdfc 	bl	8001c30 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800303a:	e015      	b.n	8003068 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800303c:	f7fe fdf8 	bl	8001c30 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304a:	d309      	bcc.n	8003060 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e014      	b.n	800308a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e4      	bne.n	800303c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	b29b      	uxth	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b086      	sub	sp, #24
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	460b      	mov	r3, r1
 800309c:	607a      	str	r2, [r7, #4]
 800309e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b42      	cmp	r3, #66	; 0x42
 80030b2:	d101      	bne.n	80030b8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
 80030b6:	e04e      	b.n	8003156 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2242      	movs	r2, #66	; 0x42
 80030bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f003 031c 	and.w	r3, r3, #28
 80030ce:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8a1b      	ldrh	r3, [r3, #16]
 80030d4:	02db      	lsls	r3, r3, #11
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80030de:	897b      	ldrh	r3, [r7, #10]
 80030e0:	019b      	lsls	r3, r3, #6
 80030e2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f043 0302 	orr.w	r3, r3, #2
 80030f2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800310e:	f7fe fd8f 	bl	8001c30 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003114:	e015      	b.n	8003142 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003116:	f7fe fd8b 	bl	8001c30 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003124:	d309      	bcc.n	800313a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e00d      	b.n	8003156 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e4      	bne.n	8003116 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_ETH_Start+0x16>
 8003170:	2302      	movs	r3, #2
 8003172:	e01f      	b.n	80031b4 <HAL_ETH_Start+0x56>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 fb45 	bl	8003814 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fb7c 	bl	8003888 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fc13 	bl	80039bc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fbb0 	bl	80038fc <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fbdd 	bl	800395c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_ETH_Stop+0x16>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e01f      	b.n	8003212 <HAL_ETH_Stop+0x56>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fba2 	bl	800392c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fbcf 	bl	800398c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fb67 	bl	80038c2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fbe1 	bl	80039bc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fb27 	bl	800384e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_ETH_ConfigMAC+0x1c>
 8003234:	2302      	movs	r3, #2
 8003236:	e0e4      	b.n	8003402 <HAL_ETH_ConfigMAC+0x1e6>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80b1 	beq.w	80033b2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4b6c      	ldr	r3, [pc, #432]	; (800340c <HAL_ETH_ConfigMAC+0x1f0>)
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003268:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800326e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003274:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800327a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003280:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8003286:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800328c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003292:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003298:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800329e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80032a4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80032aa:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80032c2:	2001      	movs	r0, #1
 80032c4:	f7fe fcc0 	bl	8001c48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80032d8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80032de:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80032e4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80032ea:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80032f0:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80032f6:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003302:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003304:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800330e:	2001      	movs	r0, #1
 8003310:	f7fe fc9a 	bl	8001c48 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003324:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800332e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800333e:	4013      	ands	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800334c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003352:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003358:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800335e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003364:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800337c:	2001      	movs	r0, #1
 800337e:	f7fe fc63 	bl	8001c48 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80033a2:	2001      	movs	r0, #1
 80033a4:	f7fe fc50 	bl	8001c48 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	61da      	str	r2, [r3, #28]
 80033b0:	e01e      	b.n	80033f0 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80033c0:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80033e2:	2001      	movs	r0, #1
 80033e4:	f7fe fc30 	bl	8001c48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	ff20810f 	.word	0xff20810f

08003410 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b0b0      	sub	sp, #192	; 0xc0
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d007      	beq.n	8003436 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800342c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003434:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003436:	2300      	movs	r3, #0
 8003438:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800343a:	2300      	movs	r3, #0
 800343c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800343e:	2300      	movs	r3, #0
 8003440:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003442:	2300      	movs	r3, #0
 8003444:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003446:	2300      	movs	r3, #0
 8003448:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800344a:	2300      	movs	r3, #0
 800344c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d103      	bne.n	800345e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800345a:	663b      	str	r3, [r7, #96]	; 0x60
 800345c:	e001      	b.n	8003462 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800345e:	2300      	movs	r3, #0
 8003460:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003466:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003468:	2300      	movs	r3, #0
 800346a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800346c:	2300      	movs	r3, #0
 800346e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003470:	2300      	movs	r3, #0
 8003472:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003474:	2300      	movs	r3, #0
 8003476:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003478:	2300      	movs	r3, #0
 800347a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800347c:	2340      	movs	r3, #64	; 0x40
 800347e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003480:	2300      	movs	r3, #0
 8003482:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003486:	2300      	movs	r3, #0
 8003488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003498:	2300      	movs	r3, #0
 800349a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800349e:	2300      	movs	r3, #0
 80034a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80034b0:	2380      	movs	r3, #128	; 0x80
 80034b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80034c8:	2300      	movs	r3, #0
 80034ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80034e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80034e8:	4bab      	ldr	r3, [pc, #684]	; (8003798 <ETH_MACDMAConfig+0x388>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80034f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80034f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80034f4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80034f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80034f8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80034fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80034fc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003502:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003504:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003506:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800350a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003510:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003514:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003518:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800351a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800351c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800351e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003520:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003524:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003526:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003538:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003544:	2001      	movs	r0, #1
 8003546:	f7fe fb7f 	bl	8001c48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003552:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003554:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003558:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800355a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800355c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800355e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003562:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003568:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800356a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800356e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003574:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003578:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003580:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003582:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800358e:	2001      	movs	r0, #1
 8003590:	f7fe fb5a 	bl	8001c48 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800359c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035a6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80035b0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80035bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035c0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80035c4:	4013      	ands	r3, r2
 80035c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80035ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035ce:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80035d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80035d4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80035d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80035da:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80035dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80035e0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80035e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80035e6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80035e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80035ec:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80035ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003600:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800360c:	2001      	movs	r0, #1
 800360e:	f7fe fb1b 	bl	8001c48 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800361a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800361c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003620:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003636:	2001      	movs	r0, #1
 8003638:	f7fe fb06 	bl	8001c48 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003644:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800364a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800364e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003654:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003658:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003662:	2300      	movs	r3, #0
 8003664:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003666:	2300      	movs	r3, #0
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800366a:	2304      	movs	r3, #4
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800366e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003678:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800367a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800367e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003684:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003686:	2380      	movs	r3, #128	; 0x80
 8003688:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800368a:	2300      	movs	r3, #0
 800368c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800368e:	2300      	movs	r3, #0
 8003690:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	f241 0318 	movw	r3, #4120	; 0x1018
 800369a:	4413      	add	r3, r2
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80036a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80036a6:	4b3d      	ldr	r3, [pc, #244]	; (800379c <ETH_MACDMAConfig+0x38c>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80036ae:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80036b0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80036b2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80036b4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80036b6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80036b8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80036ba:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80036bc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80036be:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80036c0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80036c2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80036c4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80036c6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80036ca:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80036ce:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80036d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	f241 0318 	movw	r3, #4120	; 0x1018
 80036e2:	4413      	add	r3, r2
 80036e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80036e8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	f241 0318 	movw	r3, #4120	; 0x1018
 80036f2:	4413      	add	r3, r2
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80036fa:	2001      	movs	r0, #1
 80036fc:	f7fe faa4 	bl	8001c48 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	f241 0318 	movw	r3, #4120	; 0x1018
 8003708:	4413      	add	r3, r2
 800370a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800370e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003714:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003718:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800371c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800371e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003720:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8003722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003724:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003726:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800372a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003738:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003748:	2001      	movs	r0, #1
 800374a:	f7fe fa7d 	bl	8001c48 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003756:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800375a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d10d      	bne.n	8003780 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	f241 031c 	movw	r3, #4124	; 0x101c
 800376c:	4413      	add	r3, r2
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6811      	ldr	r1, [r2, #0]
 8003774:	4a0a      	ldr	r2, [pc, #40]	; (80037a0 <ETH_MACDMAConfig+0x390>)
 8003776:	431a      	orrs	r2, r3
 8003778:	f241 031c 	movw	r3, #4124	; 0x101c
 800377c:	440b      	add	r3, r1
 800377e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	461a      	mov	r2, r3
 8003786:	2100      	movs	r1, #0
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f80b 	bl	80037a4 <ETH_MACAddressConfig>
}
 800378e:	bf00      	nop
 8003790:	37c0      	adds	r7, #192	; 0xc0
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	ff20810f 	.word	0xff20810f
 800379c:	f8de3f23 	.word	0xf8de3f23
 80037a0:	00010040 	.word	0x00010040

080037a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3305      	adds	r3, #5
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	021b      	lsls	r3, r3, #8
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	3204      	adds	r2, #4
 80037bc:	7812      	ldrb	r2, [r2, #0]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <ETH_MACAddressConfig+0x68>)
 80037c6:	4413      	add	r3, r2
 80037c8:	461a      	mov	r2, r3
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3303      	adds	r3, #3
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	061a      	lsls	r2, r3, #24
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3302      	adds	r3, #2
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3301      	adds	r3, #1
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	4313      	orrs	r3, r2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	7812      	ldrb	r2, [r2, #0]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <ETH_MACAddressConfig+0x6c>)
 80037f6:	4413      	add	r3, r2
 80037f8:	461a      	mov	r2, r3
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	6013      	str	r3, [r2, #0]
}
 80037fe:	bf00      	nop
 8003800:	371c      	adds	r7, #28
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40028040 	.word	0x40028040
 8003810:	40028044 	.word	0x40028044

08003814 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0208 	orr.w	r2, r2, #8
 800382e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003838:	2001      	movs	r0, #1
 800383a:	f7fe fa05 	bl	8001c48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	601a      	str	r2, [r3, #0]
}
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0208 	bic.w	r2, r2, #8
 8003868:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003872:	2001      	movs	r0, #1
 8003874:	f7fe f9e8 	bl	8001c48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	601a      	str	r2, [r3, #0]
}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0204 	orr.w	r2, r2, #4
 80038a2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80038ac:	2001      	movs	r0, #1
 80038ae:	f7fe f9cb 	bl	8001c48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	601a      	str	r2, [r3, #0]
}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0204 	bic.w	r2, r2, #4
 80038dc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80038e6:	2001      	movs	r0, #1
 80038e8:	f7fe f9ae 	bl	8001c48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	601a      	str	r2, [r3, #0]
}
 80038f4:	bf00      	nop
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	f241 0318 	movw	r3, #4120	; 0x1018
 800390c:	4413      	add	r3, r2
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6811      	ldr	r1, [r2, #0]
 8003914:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003918:	f241 0318 	movw	r3, #4120	; 0x1018
 800391c:	440b      	add	r3, r1
 800391e:	601a      	str	r2, [r3, #0]
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	f241 0318 	movw	r3, #4120	; 0x1018
 800393c:	4413      	add	r3, r2
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6811      	ldr	r1, [r2, #0]
 8003944:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003948:	f241 0318 	movw	r3, #4120	; 0x1018
 800394c:	440b      	add	r3, r1
 800394e:	601a      	str	r2, [r3, #0]
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	f241 0318 	movw	r3, #4120	; 0x1018
 800396c:	4413      	add	r3, r2
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6811      	ldr	r1, [r2, #0]
 8003974:	f043 0202 	orr.w	r2, r3, #2
 8003978:	f241 0318 	movw	r3, #4120	; 0x1018
 800397c:	440b      	add	r3, r1
 800397e:	601a      	str	r2, [r3, #0]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	f241 0318 	movw	r3, #4120	; 0x1018
 800399c:	4413      	add	r3, r2
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6811      	ldr	r1, [r2, #0]
 80039a4:	f023 0202 	bic.w	r2, r3, #2
 80039a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80039ac:	440b      	add	r3, r1
 80039ae:	601a      	str	r2, [r3, #0]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	f241 0318 	movw	r3, #4120	; 0x1018
 80039d0:	4413      	add	r3, r2
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6811      	ldr	r1, [r2, #0]
 80039d8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039dc:	f241 0318 	movw	r3, #4120	; 0x1018
 80039e0:	440b      	add	r3, r1
 80039e2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	f241 0318 	movw	r3, #4120	; 0x1018
 80039ec:	4413      	add	r3, r2
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80039f2:	2001      	movs	r0, #1
 80039f4:	f7fe f928 	bl	8001c48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6819      	ldr	r1, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	f241 0318 	movw	r3, #4120	; 0x1018
 8003a02:	440b      	add	r3, r1
 8003a04:	601a      	str	r2, [r3, #0]
}
 8003a06:	bf00      	nop
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b089      	sub	sp, #36	; 0x24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	e175      	b.n	8003d1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a30:	2201      	movs	r2, #1
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	f040 8164 	bne.w	8003d16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d00b      	beq.n	8003a6e <HAL_GPIO_Init+0x5e>
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d007      	beq.n	8003a6e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a62:	2b11      	cmp	r3, #17
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b12      	cmp	r3, #18
 8003a6c:	d130      	bne.n	8003ad0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	2203      	movs	r2, #3
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4013      	ands	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 0201 	and.w	r2, r3, #1
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	2203      	movs	r2, #3
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x100>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b12      	cmp	r3, #18
 8003b0e:	d123      	bne.n	8003b58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	08da      	lsrs	r2, r3, #3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3208      	adds	r2, #8
 8003b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	220f      	movs	r2, #15
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	08da      	lsrs	r2, r3, #3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	3208      	adds	r2, #8
 8003b52:	69b9      	ldr	r1, [r7, #24]
 8003b54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	2203      	movs	r2, #3
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 0203 	and.w	r2, r3, #3
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 80be 	beq.w	8003d16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b9a:	4b66      	ldr	r3, [pc, #408]	; (8003d34 <HAL_GPIO_Init+0x324>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	4a65      	ldr	r2, [pc, #404]	; (8003d34 <HAL_GPIO_Init+0x324>)
 8003ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba6:	4b63      	ldr	r3, [pc, #396]	; (8003d34 <HAL_GPIO_Init+0x324>)
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003bb2:	4a61      	ldr	r2, [pc, #388]	; (8003d38 <HAL_GPIO_Init+0x328>)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	089b      	lsrs	r3, r3, #2
 8003bb8:	3302      	adds	r3, #2
 8003bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	220f      	movs	r2, #15
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a58      	ldr	r2, [pc, #352]	; (8003d3c <HAL_GPIO_Init+0x32c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d037      	beq.n	8003c4e <HAL_GPIO_Init+0x23e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a57      	ldr	r2, [pc, #348]	; (8003d40 <HAL_GPIO_Init+0x330>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d031      	beq.n	8003c4a <HAL_GPIO_Init+0x23a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a56      	ldr	r2, [pc, #344]	; (8003d44 <HAL_GPIO_Init+0x334>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d02b      	beq.n	8003c46 <HAL_GPIO_Init+0x236>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a55      	ldr	r2, [pc, #340]	; (8003d48 <HAL_GPIO_Init+0x338>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d025      	beq.n	8003c42 <HAL_GPIO_Init+0x232>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a54      	ldr	r2, [pc, #336]	; (8003d4c <HAL_GPIO_Init+0x33c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01f      	beq.n	8003c3e <HAL_GPIO_Init+0x22e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a53      	ldr	r2, [pc, #332]	; (8003d50 <HAL_GPIO_Init+0x340>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d019      	beq.n	8003c3a <HAL_GPIO_Init+0x22a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a52      	ldr	r2, [pc, #328]	; (8003d54 <HAL_GPIO_Init+0x344>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <HAL_GPIO_Init+0x226>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a51      	ldr	r2, [pc, #324]	; (8003d58 <HAL_GPIO_Init+0x348>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00d      	beq.n	8003c32 <HAL_GPIO_Init+0x222>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a50      	ldr	r2, [pc, #320]	; (8003d5c <HAL_GPIO_Init+0x34c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <HAL_GPIO_Init+0x21e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4f      	ldr	r2, [pc, #316]	; (8003d60 <HAL_GPIO_Init+0x350>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_GPIO_Init+0x21a>
 8003c26:	2309      	movs	r3, #9
 8003c28:	e012      	b.n	8003c50 <HAL_GPIO_Init+0x240>
 8003c2a:	230a      	movs	r3, #10
 8003c2c:	e010      	b.n	8003c50 <HAL_GPIO_Init+0x240>
 8003c2e:	2308      	movs	r3, #8
 8003c30:	e00e      	b.n	8003c50 <HAL_GPIO_Init+0x240>
 8003c32:	2307      	movs	r3, #7
 8003c34:	e00c      	b.n	8003c50 <HAL_GPIO_Init+0x240>
 8003c36:	2306      	movs	r3, #6
 8003c38:	e00a      	b.n	8003c50 <HAL_GPIO_Init+0x240>
 8003c3a:	2305      	movs	r3, #5
 8003c3c:	e008      	b.n	8003c50 <HAL_GPIO_Init+0x240>
 8003c3e:	2304      	movs	r3, #4
 8003c40:	e006      	b.n	8003c50 <HAL_GPIO_Init+0x240>
 8003c42:	2303      	movs	r3, #3
 8003c44:	e004      	b.n	8003c50 <HAL_GPIO_Init+0x240>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e002      	b.n	8003c50 <HAL_GPIO_Init+0x240>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <HAL_GPIO_Init+0x240>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	f002 0203 	and.w	r2, r2, #3
 8003c56:	0092      	lsls	r2, r2, #2
 8003c58:	4093      	lsls	r3, r2
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c60:	4935      	ldr	r1, [pc, #212]	; (8003d38 <HAL_GPIO_Init+0x328>)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	089b      	lsrs	r3, r3, #2
 8003c66:	3302      	adds	r3, #2
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c6e:	4b3d      	ldr	r3, [pc, #244]	; (8003d64 <HAL_GPIO_Init+0x354>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	43db      	mvns	r3, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c92:	4a34      	ldr	r2, [pc, #208]	; (8003d64 <HAL_GPIO_Init+0x354>)
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c98:	4b32      	ldr	r3, [pc, #200]	; (8003d64 <HAL_GPIO_Init+0x354>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cbc:	4a29      	ldr	r2, [pc, #164]	; (8003d64 <HAL_GPIO_Init+0x354>)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cc2:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <HAL_GPIO_Init+0x354>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ce6:	4a1f      	ldr	r2, [pc, #124]	; (8003d64 <HAL_GPIO_Init+0x354>)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cec:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <HAL_GPIO_Init+0x354>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d10:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <HAL_GPIO_Init+0x354>)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	61fb      	str	r3, [r7, #28]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b0f      	cmp	r3, #15
 8003d20:	f67f ae86 	bls.w	8003a30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop
 8003d28:	3724      	adds	r7, #36	; 0x24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40013800 	.word	0x40013800
 8003d3c:	40020000 	.word	0x40020000
 8003d40:	40020400 	.word	0x40020400
 8003d44:	40020800 	.word	0x40020800
 8003d48:	40020c00 	.word	0x40020c00
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40021400 	.word	0x40021400
 8003d54:	40021800 	.word	0x40021800
 8003d58:	40021c00 	.word	0x40021c00
 8003d5c:	40022000 	.word	0x40022000
 8003d60:	40022400 	.word	0x40022400
 8003d64:	40013c00 	.word	0x40013c00

08003d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	807b      	strh	r3, [r7, #2]
 8003d74:	4613      	mov	r3, r2
 8003d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d78:	787b      	ldrb	r3, [r7, #1]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d7e:	887a      	ldrh	r2, [r7, #2]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003d84:	e003      	b.n	8003d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d86:	887b      	ldrh	r3, [r7, #2]
 8003d88:	041a      	lsls	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	619a      	str	r2, [r3, #24]
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e07f      	b.n	8003eae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd f9e2 	bl	800118c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2224      	movs	r2, #36	; 0x24
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0201 	bic.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d107      	bne.n	8003e16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	e006      	b.n	8003e24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d104      	bne.n	8003e36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6859      	ldr	r1, [r3, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <HAL_I2C_Init+0x11c>)
 8003e42:	430b      	orrs	r3, r1
 8003e44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	ea42 0103 	orr.w	r1, r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	021a      	lsls	r2, r3, #8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69d9      	ldr	r1, [r3, #28]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1a      	ldr	r2, [r3, #32]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	02008000 	.word	0x02008000

08003ebc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	607a      	str	r2, [r7, #4]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	460b      	mov	r3, r1
 8003eca:	817b      	strh	r3, [r7, #10]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b20      	cmp	r3, #32
 8003eda:	f040 80da 	bne.w	8004092 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_I2C_Master_Transmit+0x30>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e0d3      	b.n	8004094 <HAL_I2C_Master_Transmit+0x1d8>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ef4:	f7fd fe9c 	bl	8001c30 <HAL_GetTick>
 8003ef8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	2319      	movs	r3, #25
 8003f00:	2201      	movs	r2, #1
 8003f02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f001 f9b0 	bl	800526c <I2C_WaitOnFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e0be      	b.n	8004094 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2221      	movs	r2, #33	; 0x21
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2210      	movs	r2, #16
 8003f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	893a      	ldrh	r2, [r7, #8]
 8003f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2bff      	cmp	r3, #255	; 0xff
 8003f46:	d90e      	bls.n	8003f66 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	22ff      	movs	r2, #255	; 0xff
 8003f4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	8979      	ldrh	r1, [r7, #10]
 8003f56:	4b51      	ldr	r3, [pc, #324]	; (800409c <HAL_I2C_Master_Transmit+0x1e0>)
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f001 faa6 	bl	80054b0 <I2C_TransferConfig>
 8003f64:	e06c      	b.n	8004040 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	8979      	ldrh	r1, [r7, #10]
 8003f78:	4b48      	ldr	r3, [pc, #288]	; (800409c <HAL_I2C_Master_Transmit+0x1e0>)
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f001 fa95 	bl	80054b0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003f86:	e05b      	b.n	8004040 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	6a39      	ldr	r1, [r7, #32]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f001 f9ad 	bl	80052ec <I2C_WaitOnTXISFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e07b      	b.n	8004094 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	781a      	ldrb	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d034      	beq.n	8004040 <HAL_I2C_Master_Transmit+0x184>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d130      	bne.n	8004040 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2180      	movs	r1, #128	; 0x80
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f001 f93f 	bl	800526c <I2C_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e04d      	b.n	8004094 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2bff      	cmp	r3, #255	; 0xff
 8004000:	d90e      	bls.n	8004020 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	22ff      	movs	r2, #255	; 0xff
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400c:	b2da      	uxtb	r2, r3
 800400e:	8979      	ldrh	r1, [r7, #10]
 8004010:	2300      	movs	r3, #0
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f001 fa49 	bl	80054b0 <I2C_TransferConfig>
 800401e:	e00f      	b.n	8004040 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	b2da      	uxtb	r2, r3
 8004030:	8979      	ldrh	r1, [r7, #10]
 8004032:	2300      	movs	r3, #0
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f001 fa38 	bl	80054b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d19e      	bne.n	8003f88 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	6a39      	ldr	r1, [r7, #32]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f001 f98c 	bl	800536c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e01a      	b.n	8004094 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2220      	movs	r2, #32
 8004064:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8004072:	400b      	ands	r3, r1
 8004074:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	e000      	b.n	8004094 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004092:	2302      	movs	r3, #2
  }
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	80002000 	.word	0x80002000
 80040a0:	fe00e800 	.word	0xfe00e800

080040a4 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	4613      	mov	r3, r2
 80040b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	f040 809b 	bne.w	80041f6 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_I2C_Slave_Receive_DMA+0x28>
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d105      	bne.n	80040d8 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e08f      	b.n	80041f8 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_I2C_Slave_Receive_DMA+0x42>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e088      	b.n	80041f8 <HAL_I2C_Slave_Receive_DMA+0x154>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2222      	movs	r2, #34	; 0x22
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	88fa      	ldrh	r2, [r7, #6]
 800410e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4a38      	ldr	r2, [pc, #224]	; (8004200 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 800411e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a38      	ldr	r2, [pc, #224]	; (8004204 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8004124:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	2b00      	cmp	r3, #0
 800412c:	d020      	beq.n	8004170 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	4a35      	ldr	r2, [pc, #212]	; (8004208 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8004134:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413a:	4a34      	ldr	r2, [pc, #208]	; (800420c <HAL_I2C_Slave_Receive_DMA+0x168>)
 800413c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004142:	2200      	movs	r2, #0
 8004144:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414a:	2200      	movs	r2, #0
 800414c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3324      	adds	r3, #36	; 0x24
 8004158:	4619      	mov	r1, r3
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	f7fd ff56 	bl	8002010 <HAL_DMA_Start_IT>
 8004164:	4603      	mov	r3, r0
 8004166:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004168:	7dfb      	ldrb	r3, [r7, #23]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d12f      	bne.n	80041ce <HAL_I2C_Slave_Receive_DMA+0x12a>
 800416e:	e013      	b.n	8004198 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2228      	movs	r2, #40	; 0x28
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004184:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e02f      	b.n	80041f8 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041a6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f001 f9a9 	bl	800550c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041c8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e014      	b.n	80041f8 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2228      	movs	r2, #40	; 0x28
 80041d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	f043 0210 	orr.w	r2, r3, #16
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
  }
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	ffff0000 	.word	0xffff0000
 8004204:	080046ed 	.word	0x080046ed
 8004208:	08005177 	.word	0x08005177
 800420c:	080051bd 	.word	0x080051bd

08004210 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	68f9      	ldr	r1, [r7, #12]
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
  }
}
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	70fb      	strb	r3, [r7, #3]
 800428c:	4613      	mov	r3, r2
 800428e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <I2C_Slave_ISR_IT+0x24>
 8004320:	2302      	movs	r3, #2
 8004322:	e0ec      	b.n	80044fe <I2C_Slave_ISR_IT+0x1fe>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	d009      	beq.n	800434c <I2C_Slave_ISR_IT+0x4c>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004344:	6939      	ldr	r1, [r7, #16]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fc9a 	bl	8004c80 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d04d      	beq.n	80043f4 <I2C_Slave_ISR_IT+0xf4>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	091b      	lsrs	r3, r3, #4
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d047      	beq.n	80043f4 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d128      	bne.n	80043c0 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b28      	cmp	r3, #40	; 0x28
 8004378:	d108      	bne.n	800438c <I2C_Slave_ISR_IT+0x8c>
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004380:	d104      	bne.n	800438c <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004382:	6939      	ldr	r1, [r7, #16]
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 fd85 	bl	8004e94 <I2C_ITListenCplt>
 800438a:	e032      	b.n	80043f2 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b29      	cmp	r3, #41	; 0x29
 8004396:	d10e      	bne.n	80043b6 <I2C_Slave_ISR_IT+0xb6>
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800439e:	d00a      	beq.n	80043b6 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2210      	movs	r2, #16
 80043a6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 fec0 	bl	800512e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fb3d 	bl	8004a2e <I2C_ITSlaveSeqCplt>
 80043b4:	e01d      	b.n	80043f2 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2210      	movs	r2, #16
 80043bc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80043be:	e096      	b.n	80044ee <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2210      	movs	r2, #16
 80043c6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	f043 0204 	orr.w	r2, r3, #4
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <I2C_Slave_ISR_IT+0xe4>
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e0:	f040 8085 	bne.w	80044ee <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e8:	4619      	mov	r1, r3
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fda8 	bl	8004f40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80043f0:	e07d      	b.n	80044ee <I2C_Slave_ISR_IT+0x1ee>
 80043f2:	e07c      	b.n	80044ee <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	089b      	lsrs	r3, r3, #2
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d030      	beq.n	8004462 <I2C_Slave_ISR_IT+0x162>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	089b      	lsrs	r3, r3, #2
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d02a      	beq.n	8004462 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d018      	beq.n	8004448 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d14f      	bne.n	80044f2 <I2C_Slave_ISR_IT+0x1f2>
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004458:	d04b      	beq.n	80044f2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fae7 	bl	8004a2e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004460:	e047      	b.n	80044f2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	08db      	lsrs	r3, r3, #3
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	08db      	lsrs	r3, r3, #3
 8004472:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004476:	2b00      	cmp	r3, #0
 8004478:	d004      	beq.n	8004484 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800447a:	6939      	ldr	r1, [r7, #16]
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fa15 	bl	80048ac <I2C_ITAddrCplt>
 8004482:	e037      	b.n	80044f4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	085b      	lsrs	r3, r3, #1
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d031      	beq.n	80044f4 <I2C_Slave_ISR_IT+0x1f4>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d02b      	beq.n	80044f4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d018      	beq.n	80044d8 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	781a      	ldrb	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	851a      	strh	r2, [r3, #40]	; 0x28
 80044d6:	e00d      	b.n	80044f4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044de:	d002      	beq.n	80044e6 <I2C_Slave_ISR_IT+0x1e6>
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d106      	bne.n	80044f4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 faa1 	bl	8004a2e <I2C_ITSlaveSeqCplt>
 80044ec:	e002      	b.n	80044f4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80044ee:	bf00      	nop
 80044f0:	e000      	b.n	80044f4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80044f2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b088      	sub	sp, #32
 800450a:	af02      	add	r7, sp, #8
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <I2C_Master_ISR_DMA+0x1a>
 800451c:	2302      	movs	r3, #2
 800451e:	e0e1      	b.n	80046e4 <I2C_Master_ISR_DMA+0x1de>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d017      	beq.n	8004564 <I2C_Master_ISR_DMA+0x5e>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	091b      	lsrs	r3, r3, #4
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d011      	beq.n	8004564 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2210      	movs	r2, #16
 8004546:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454c:	f043 0204 	orr.w	r2, r3, #4
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004554:	2120      	movs	r1, #32
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 ffd8 	bl	800550c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 fde6 	bl	800512e <I2C_Flush_TXDR>
 8004562:	e0ba      	b.n	80046da <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	09db      	lsrs	r3, r3, #7
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d072      	beq.n	8004656 <I2C_Master_ISR_DMA+0x150>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	099b      	lsrs	r3, r3, #6
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d06c      	beq.n	8004656 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800458a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d04e      	beq.n	8004634 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	b29b      	uxth	r3, r3
 800459e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045a2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2bff      	cmp	r3, #255	; 0xff
 80045ac:	d906      	bls.n	80045bc <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	22ff      	movs	r2, #255	; 0xff
 80045b2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80045b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	e010      	b.n	80045de <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045ce:	d003      	beq.n	80045d8 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	e002      	b.n	80045de <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80045d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045dc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	8a79      	ldrh	r1, [r7, #18]
 80045e6:	2300      	movs	r3, #0
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 ff5f 	bl	80054b0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b22      	cmp	r3, #34	; 0x22
 800460e:	d108      	bne.n	8004622 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800461e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004620:	e05b      	b.n	80046da <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004630:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004632:	e052      	b.n	80046da <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004642:	d003      	beq.n	800464c <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f9b5 	bl	80049b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800464a:	e046      	b.n	80046da <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800464c:	2140      	movs	r1, #64	; 0x40
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 fc76 	bl	8004f40 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004654:	e041      	b.n	80046da <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	099b      	lsrs	r3, r3, #6
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d029      	beq.n	80046b6 <I2C_Master_ISR_DMA+0x1b0>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	099b      	lsrs	r3, r3, #6
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d023      	beq.n	80046b6 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d119      	bne.n	80046ac <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004686:	d027      	beq.n	80046d8 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004690:	d108      	bne.n	80046a4 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046a0:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80046a2:	e019      	b.n	80046d8 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f985 	bl	80049b4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80046aa:	e015      	b.n	80046d8 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80046ac:	2140      	movs	r1, #64	; 0x40
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 fc46 	bl	8004f40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80046b4:	e010      	b.n	80046d8 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <I2C_Master_ISR_DMA+0x1d4>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fa0b 	bl	8004aec <I2C_ITMasterCplt>
 80046d6:	e000      	b.n	80046da <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80046d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <I2C_Slave_ISR_DMA+0x24>
 800470c:	2302      	movs	r3, #2
 800470e:	e0c9      	b.n	80048a4 <I2C_Slave_ISR_DMA+0x1b8>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d009      	beq.n	8004738 <I2C_Slave_ISR_DMA+0x4c>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 faa4 	bl	8004c80 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	091b      	lsrs	r3, r3, #4
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 809a 	beq.w	800487a <I2C_Slave_ISR_DMA+0x18e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8093 	beq.w	800487a <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	0b9b      	lsrs	r3, r3, #14
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d105      	bne.n	800476c <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	0bdb      	lsrs	r3, r3, #15
 8004764:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004768:	2b00      	cmp	r3, #0
 800476a:	d07f      	beq.n	800486c <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00d      	beq.n	8004790 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	0bdb      	lsrs	r3, r3, #15
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800478c:	2301      	movs	r3, #1
 800478e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00d      	beq.n	80047b4 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	0b9b      	lsrs	r3, r3, #14
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80047b0:	2301      	movs	r3, #1
 80047b2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d128      	bne.n	800480c <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b28      	cmp	r3, #40	; 0x28
 80047c4:	d108      	bne.n	80047d8 <I2C_Slave_ISR_DMA+0xec>
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047cc:	d104      	bne.n	80047d8 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 fb5f 	bl	8004e94 <I2C_ITListenCplt>
 80047d6:	e048      	b.n	800486a <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b29      	cmp	r3, #41	; 0x29
 80047e2:	d10e      	bne.n	8004802 <I2C_Slave_ISR_DMA+0x116>
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047ea:	d00a      	beq.n	8004802 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2210      	movs	r2, #16
 80047f2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fc9a 	bl	800512e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f917 	bl	8004a2e <I2C_ITSlaveSeqCplt>
 8004800:	e033      	b.n	800486a <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2210      	movs	r2, #16
 8004808:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800480a:	e034      	b.n	8004876 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2210      	movs	r2, #16
 8004812:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004818:	f043 0204 	orr.w	r2, r3, #4
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004826:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <I2C_Slave_ISR_DMA+0x14a>
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004834:	d11f      	bne.n	8004876 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004836:	7dfb      	ldrb	r3, [r7, #23]
 8004838:	2b21      	cmp	r3, #33	; 0x21
 800483a:	d002      	beq.n	8004842 <I2C_Slave_ISR_DMA+0x156>
 800483c:	7dfb      	ldrb	r3, [r7, #23]
 800483e:	2b29      	cmp	r3, #41	; 0x29
 8004840:	d103      	bne.n	800484a <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2221      	movs	r2, #33	; 0x21
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
 8004848:	e008      	b.n	800485c <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800484a:	7dfb      	ldrb	r3, [r7, #23]
 800484c:	2b22      	cmp	r3, #34	; 0x22
 800484e:	d002      	beq.n	8004856 <I2C_Slave_ISR_DMA+0x16a>
 8004850:	7dfb      	ldrb	r3, [r7, #23]
 8004852:	2b2a      	cmp	r3, #42	; 0x2a
 8004854:	d102      	bne.n	800485c <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2222      	movs	r2, #34	; 0x22
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004860:	4619      	mov	r1, r3
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fb6c 	bl	8004f40 <I2C_ITError>
      if (treatdmanack == 1U)
 8004868:	e005      	b.n	8004876 <I2C_Slave_ISR_DMA+0x18a>
 800486a:	e004      	b.n	8004876 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2210      	movs	r2, #16
 8004872:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004874:	e011      	b.n	800489a <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8004876:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004878:	e00f      	b.n	800489a <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	08db      	lsrs	r3, r3, #3
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d009      	beq.n	800489a <I2C_Slave_ISR_DMA+0x1ae>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	08db      	lsrs	r3, r3, #3
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f809 	bl	80048ac <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048c2:	2b28      	cmp	r3, #40	; 0x28
 80048c4:	d16a      	bne.n	800499c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	0c1b      	lsrs	r3, r3, #16
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80048e4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048f2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004900:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d138      	bne.n	800497c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800490a:	897b      	ldrh	r3, [r7, #10]
 800490c:	09db      	lsrs	r3, r3, #7
 800490e:	b29a      	uxth	r2, r3
 8004910:	89bb      	ldrh	r3, [r7, #12]
 8004912:	4053      	eors	r3, r2
 8004914:	b29b      	uxth	r3, r3
 8004916:	f003 0306 	and.w	r3, r3, #6
 800491a:	2b00      	cmp	r3, #0
 800491c:	d11c      	bne.n	8004958 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800491e:	897b      	ldrh	r3, [r7, #10]
 8004920:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004930:	2b02      	cmp	r3, #2
 8004932:	d13b      	bne.n	80049ac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2208      	movs	r2, #8
 8004940:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800494a:	89ba      	ldrh	r2, [r7, #12]
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff fc95 	bl	8004280 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004956:	e029      	b.n	80049ac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004958:	893b      	ldrh	r3, [r7, #8]
 800495a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800495c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fe37 	bl	80055d4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800496e:	89ba      	ldrh	r2, [r7, #12]
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	4619      	mov	r1, r3
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff fc83 	bl	8004280 <HAL_I2C_AddrCallback>
}
 800497a:	e017      	b.n	80049ac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800497c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fe27 	bl	80055d4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800498e:	89ba      	ldrh	r2, [r7, #12]
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	4619      	mov	r1, r3
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7ff fc73 	bl	8004280 <HAL_I2C_AddrCallback>
}
 800499a:	e007      	b.n	80049ac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2208      	movs	r2, #8
 80049a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b21      	cmp	r3, #33	; 0x21
 80049ce:	d115      	bne.n	80049fc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2211      	movs	r2, #17
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049e4:	2101      	movs	r1, #1
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fdf4 	bl	80055d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff fc25 	bl	8004244 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049fa:	e014      	b.n	8004a26 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2212      	movs	r2, #18
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a10:	2102      	movs	r1, #2
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fdde 	bl	80055d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff fc19 	bl	8004258 <HAL_I2C_MasterRxCpltCallback>
}
 8004a26:	bf00      	nop
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	0b9b      	lsrs	r3, r3, #14
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d008      	beq.n	8004a64 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	e00d      	b.n	8004a80 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	0bdb      	lsrs	r3, r3, #15
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a7e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b29      	cmp	r3, #41	; 0x29
 8004a8a:	d112      	bne.n	8004ab2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2228      	movs	r2, #40	; 0x28
 8004a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2221      	movs	r2, #33	; 0x21
 8004a98:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fd99 	bl	80055d4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff fbde 	bl	800426c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ab0:	e017      	b.n	8004ae2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b2a      	cmp	r3, #42	; 0x2a
 8004abc:	d111      	bne.n	8004ae2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2228      	movs	r2, #40	; 0x28
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2222      	movs	r2, #34	; 0x22
 8004aca:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004acc:	2102      	movs	r1, #2
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fd80 	bl	80055d4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7fc fa57 	bl	8000f90 <HAL_I2C_SlaveRxCpltCallback>
}
 8004ae2:	bf00      	nop
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
	...

08004aec <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2220      	movs	r2, #32
 8004b00:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b21      	cmp	r3, #33	; 0x21
 8004b0c:	d107      	bne.n	8004b1e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004b0e:	2101      	movs	r1, #1
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fd5f 	bl	80055d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2211      	movs	r2, #17
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
 8004b1c:	e00c      	b.n	8004b38 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b22      	cmp	r3, #34	; 0x22
 8004b28:	d106      	bne.n	8004b38 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fd51 	bl	80055d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2212      	movs	r2, #18
 8004b36:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6859      	ldr	r1, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b4d      	ldr	r3, [pc, #308]	; (8004c78 <I2C_ITMasterCplt+0x18c>)
 8004b44:	400b      	ands	r3, r1
 8004b46:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a4a      	ldr	r2, [pc, #296]	; (8004c7c <I2C_ITMasterCplt+0x190>)
 8004b52:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	091b      	lsrs	r3, r3, #4
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d009      	beq.n	8004b74 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2210      	movs	r2, #16
 8004b66:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6c:	f043 0204 	orr.w	r2, r3, #4
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b60      	cmp	r3, #96	; 0x60
 8004b7e:	d10b      	bne.n	8004b98 <I2C_ITMasterCplt+0xac>
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	089b      	lsrs	r3, r3, #2
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004b96:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fac8 	bl	800512e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b60      	cmp	r3, #96	; 0x60
 8004bae:	d002      	beq.n	8004bb6 <I2C_ITMasterCplt+0xca>
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d006      	beq.n	8004bc4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f9bf 	bl	8004f40 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004bc2:	e054      	b.n	8004c6e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b21      	cmp	r3, #33	; 0x21
 8004bce:	d124      	bne.n	8004c1a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d10b      	bne.n	8004c02 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff fb58 	bl	80042b0 <HAL_I2C_MemTxCpltCallback>
}
 8004c00:	e035      	b.n	8004c6e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff fb16 	bl	8004244 <HAL_I2C_MasterTxCpltCallback>
}
 8004c18:	e029      	b.n	8004c6e <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b22      	cmp	r3, #34	; 0x22
 8004c24:	d123      	bne.n	8004c6e <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d10b      	bne.n	8004c58 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff fb37 	bl	80042c4 <HAL_I2C_MemRxCpltCallback>
}
 8004c56:	e00a      	b.n	8004c6e <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff faf5 	bl	8004258 <HAL_I2C_MasterRxCpltCallback>
}
 8004c6e:	bf00      	nop
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	fe00e800 	.word	0xfe00e800
 8004c7c:	ffff0000 	.word	0xffff0000

08004c80 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c9c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	2b21      	cmp	r3, #33	; 0x21
 8004caa:	d002      	beq.n	8004cb2 <I2C_ITSlaveCplt+0x32>
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	2b29      	cmp	r3, #41	; 0x29
 8004cb0:	d108      	bne.n	8004cc4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004cb2:	f248 0101 	movw	r1, #32769	; 0x8001
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fc8c 	bl	80055d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2221      	movs	r2, #33	; 0x21
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8004cc2:	e00d      	b.n	8004ce0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	2b22      	cmp	r3, #34	; 0x22
 8004cc8:	d002      	beq.n	8004cd0 <I2C_ITSlaveCplt+0x50>
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8004cce:	d107      	bne.n	8004ce0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004cd0:	f248 0102 	movw	r1, #32770	; 0x8002
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fc7d 	bl	80055d4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2222      	movs	r2, #34	; 0x22
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cee:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6859      	ldr	r1, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4b64      	ldr	r3, [pc, #400]	; (8004e8c <I2C_ITSlaveCplt+0x20c>)
 8004cfc:	400b      	ands	r3, r1
 8004cfe:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fa14 	bl	800512e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	0b9b      	lsrs	r3, r3, #14
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d013      	beq.n	8004d3a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d20:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d020      	beq.n	8004d6c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d38:	e018      	b.n	8004d6c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	0bdb      	lsrs	r3, r3, #15
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d012      	beq.n	8004d6c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d54:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d006      	beq.n	8004d6c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d020      	beq.n	8004dba <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f023 0304 	bic.w	r3, r3, #4
 8004d7e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00c      	beq.n	8004dba <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc8:	f043 0204 	orr.w	r2, r3, #4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d010      	beq.n	8004e08 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f8a7 	bl	8004f40 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b28      	cmp	r3, #40	; 0x28
 8004dfc:	d141      	bne.n	8004e82 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004dfe:	6979      	ldr	r1, [r7, #20]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f847 	bl	8004e94 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e06:	e03c      	b.n	8004e82 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e10:	d014      	beq.n	8004e3c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff fe0b 	bl	8004a2e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a1d      	ldr	r2, [pc, #116]	; (8004e90 <I2C_ITSlaveCplt+0x210>)
 8004e1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff fa31 	bl	800429c <HAL_I2C_ListenCpltCallback>
}
 8004e3a:	e022      	b.n	8004e82 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b22      	cmp	r3, #34	; 0x22
 8004e46:	d10e      	bne.n	8004e66 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f7fc f896 	bl	8000f90 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e64:	e00d      	b.n	8004e82 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff f9f5 	bl	800426c <HAL_I2C_SlaveTxCpltCallback>
}
 8004e82:	bf00      	nop
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	fe00e800 	.word	0xfe00e800
 8004e90:	ffff0000 	.word	0xffff0000

08004e94 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a26      	ldr	r2, [pc, #152]	; (8004f3c <I2C_ITListenCplt+0xa8>)
 8004ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d022      	beq.n	8004f12 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d012      	beq.n	8004f12 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	f043 0204 	orr.w	r2, r3, #4
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f12:	f248 0103 	movw	r1, #32771	; 0x8003
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fb5c 	bl	80055d4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2210      	movs	r2, #16
 8004f22:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff f9b5 	bl	800429c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	ffff0000 	.word	0xffff0000

08004f40 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a5d      	ldr	r2, [pc, #372]	; (80050d4 <I2C_ITError+0x194>)
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	2b28      	cmp	r3, #40	; 0x28
 8004f76:	d005      	beq.n	8004f84 <I2C_ITError+0x44>
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b29      	cmp	r3, #41	; 0x29
 8004f7c:	d002      	beq.n	8004f84 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	2b2a      	cmp	r3, #42	; 0x2a
 8004f82:	d10b      	bne.n	8004f9c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f84:	2103      	movs	r1, #3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fb24 	bl	80055d4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2228      	movs	r2, #40	; 0x28
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a50      	ldr	r2, [pc, #320]	; (80050d8 <I2C_ITError+0x198>)
 8004f98:	635a      	str	r2, [r3, #52]	; 0x34
 8004f9a:	e011      	b.n	8004fc0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f9c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 fb17 	bl	80055d4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b60      	cmp	r3, #96	; 0x60
 8004fb0:	d003      	beq.n	8004fba <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d039      	beq.n	8005042 <I2C_ITError+0x102>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b11      	cmp	r3, #17
 8004fd2:	d002      	beq.n	8004fda <I2C_ITError+0x9a>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b21      	cmp	r3, #33	; 0x21
 8004fd8:	d133      	bne.n	8005042 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fe8:	d107      	bne.n	8004ffa <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ff8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fd fa82 	bl	8002508 <HAL_DMA_GetState>
 8005004:	4603      	mov	r3, r0
 8005006:	2b01      	cmp	r3, #1
 8005008:	d017      	beq.n	800503a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	4a33      	ldr	r2, [pc, #204]	; (80050dc <I2C_ITError+0x19c>)
 8005010:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	4618      	mov	r0, r3
 8005020:	f7fd f8c6 	bl	80021b0 <HAL_DMA_Abort_IT>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d04d      	beq.n	80050c6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005034:	4610      	mov	r0, r2
 8005036:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005038:	e045      	b.n	80050c6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f850 	bl	80050e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005040:	e041      	b.n	80050c6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d039      	beq.n	80050be <I2C_ITError+0x17e>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b12      	cmp	r3, #18
 800504e:	d002      	beq.n	8005056 <I2C_ITError+0x116>
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b22      	cmp	r3, #34	; 0x22
 8005054:	d133      	bne.n	80050be <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005064:	d107      	bne.n	8005076 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005074:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507a:	4618      	mov	r0, r3
 800507c:	f7fd fa44 	bl	8002508 <HAL_DMA_GetState>
 8005080:	4603      	mov	r3, r0
 8005082:	2b01      	cmp	r3, #1
 8005084:	d017      	beq.n	80050b6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508a:	4a14      	ldr	r2, [pc, #80]	; (80050dc <I2C_ITError+0x19c>)
 800508c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509a:	4618      	mov	r0, r3
 800509c:	f7fd f888 	bl	80021b0 <HAL_DMA_Abort_IT>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d011      	beq.n	80050ca <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050b0:	4610      	mov	r0, r2
 80050b2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050b4:	e009      	b.n	80050ca <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f812 	bl	80050e0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050bc:	e005      	b.n	80050ca <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f80e 	bl	80050e0 <I2C_TreatErrorCallback>
  }
}
 80050c4:	e002      	b.n	80050cc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050c6:	bf00      	nop
 80050c8:	e000      	b.n	80050cc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050ca:	bf00      	nop
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	ffff0000 	.word	0xffff0000
 80050d8:	08004301 	.word	0x08004301
 80050dc:	08005231 	.word	0x08005231

080050e0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b60      	cmp	r3, #96	; 0x60
 80050f2:	d10e      	bne.n	8005112 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff f8ee 	bl	80042ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005110:	e009      	b.n	8005126 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff f8d9 	bl	80042d8 <HAL_I2C_ErrorCallback>
}
 8005126:	bf00      	nop
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b02      	cmp	r3, #2
 8005142:	d103      	bne.n	800514c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2200      	movs	r2, #0
 800514a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b01      	cmp	r3, #1
 8005158:	d007      	beq.n	800516a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699a      	ldr	r2, [r3, #24]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	619a      	str	r2, [r3, #24]
  }
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	60bb      	str	r3, [r7, #8]

  if ((__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U) && \
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10e      	bne.n	80051b4 <I2C_DMASlaveReceiveCplt+0x3e>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800519c:	d00a      	beq.n	80051b4 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051ac:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff fc3d 	bl	8004a2e <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <I2C_DMAError+0x2a>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 80051e2:	2301      	movs	r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d007      	beq.n	80051fe <I2C_DMAError+0x42>
  {
    if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80051fa:	2301      	movs	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fd f990 	bl	8002524 <HAL_DMA_GetError>
 8005204:	4603      	mov	r3, r0
 8005206:	2b02      	cmp	r3, #2
 8005208:	d00e      	beq.n	8005228 <I2C_DMAError+0x6c>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00b      	beq.n	8005228 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800521e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005220:	2110      	movs	r1, #16
 8005222:	68b8      	ldr	r0, [r7, #8]
 8005224:	f7ff fe8c 	bl	8004f40 <I2C_ITError>
  }
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	2200      	movs	r2, #0
 800524c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	2200      	movs	r2, #0
 800525c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f7ff ff3e 	bl	80050e0 <I2C_TreatErrorCallback>
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	4613      	mov	r3, r2
 800527a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800527c:	e022      	b.n	80052c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005284:	d01e      	beq.n	80052c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005286:	f7fc fcd3 	bl	8001c30 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d302      	bcc.n	800529c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d113      	bne.n	80052c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a0:	f043 0220 	orr.w	r2, r3, #32
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e00f      	b.n	80052e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	699a      	ldr	r2, [r3, #24]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	4013      	ands	r3, r2
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	bf0c      	ite	eq
 80052d4:	2301      	moveq	r3, #1
 80052d6:	2300      	movne	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	461a      	mov	r2, r3
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d0cd      	beq.n	800527e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052f8:	e02c      	b.n	8005354 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f870 	bl	80053e4 <I2C_IsAcknowledgeFailed>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e02a      	b.n	8005364 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005314:	d01e      	beq.n	8005354 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005316:	f7fc fc8b 	bl	8001c30 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	429a      	cmp	r2, r3
 8005324:	d302      	bcc.n	800532c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d113      	bne.n	8005354 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005330:	f043 0220 	orr.w	r2, r3, #32
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e007      	b.n	8005364 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b02      	cmp	r3, #2
 8005360:	d1cb      	bne.n	80052fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005378:	e028      	b.n	80053cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f830 	bl	80053e4 <I2C_IsAcknowledgeFailed>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e026      	b.n	80053dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538e:	f7fc fc4f 	bl	8001c30 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	429a      	cmp	r2, r3
 800539c:	d302      	bcc.n	80053a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d113      	bne.n	80053cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a8:	f043 0220 	orr.w	r2, r3, #32
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e007      	b.n	80053dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d1cf      	bne.n	800537a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b10      	cmp	r3, #16
 80053fc:	d151      	bne.n	80054a2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053fe:	e022      	b.n	8005446 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d01e      	beq.n	8005446 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005408:	f7fc fc12 	bl	8001c30 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	429a      	cmp	r2, r3
 8005416:	d302      	bcc.n	800541e <I2C_IsAcknowledgeFailed+0x3a>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d113      	bne.n	8005446 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	f043 0220 	orr.w	r2, r3, #32
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2220      	movs	r2, #32
 800542e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e02e      	b.n	80054a4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b20      	cmp	r3, #32
 8005452:	d1d5      	bne.n	8005400 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2210      	movs	r2, #16
 800545a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2220      	movs	r2, #32
 8005462:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f7ff fe62 	bl	800512e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6859      	ldr	r1, [r3, #4]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	4b0d      	ldr	r3, [pc, #52]	; (80054ac <I2C_IsAcknowledgeFailed+0xc8>)
 8005476:	400b      	ands	r3, r1
 8005478:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	f043 0204 	orr.w	r2, r3, #4
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	fe00e800 	.word	0xfe00e800

080054b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	607b      	str	r3, [r7, #4]
 80054ba:	460b      	mov	r3, r1
 80054bc:	817b      	strh	r3, [r7, #10]
 80054be:	4613      	mov	r3, r2
 80054c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	0d5b      	lsrs	r3, r3, #21
 80054cc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80054d0:	4b0d      	ldr	r3, [pc, #52]	; (8005508 <I2C_TransferConfig+0x58>)
 80054d2:	430b      	orrs	r3, r1
 80054d4:	43db      	mvns	r3, r3
 80054d6:	ea02 0103 	and.w	r1, r2, r3
 80054da:	897b      	ldrh	r3, [r7, #10]
 80054dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054e0:	7a7b      	ldrb	r3, [r7, #9]
 80054e2:	041b      	lsls	r3, r3, #16
 80054e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	431a      	orrs	r2, r3
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80054fa:	bf00      	nop
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	03ff63ff 	.word	0x03ff63ff

0800550c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	460b      	mov	r3, r1
 8005516:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005520:	4a2a      	ldr	r2, [pc, #168]	; (80055cc <I2C_Enable_IRQ+0xc0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d004      	beq.n	8005530 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800552a:	4a29      	ldr	r2, [pc, #164]	; (80055d0 <I2C_Enable_IRQ+0xc4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d11d      	bne.n	800556c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005530:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005534:	2b00      	cmp	r3, #0
 8005536:	da03      	bge.n	8005540 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800553e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005540:	887b      	ldrh	r3, [r7, #2]
 8005542:	2b10      	cmp	r3, #16
 8005544:	d103      	bne.n	800554e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800554c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800554e:	887b      	ldrh	r3, [r7, #2]
 8005550:	2b20      	cmp	r3, #32
 8005552:	d103      	bne.n	800555c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800555a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800555c:	887b      	ldrh	r3, [r7, #2]
 800555e:	2b40      	cmp	r3, #64	; 0x40
 8005560:	d125      	bne.n	80055ae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005568:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800556a:	e020      	b.n	80055ae <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800556c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005570:	2b00      	cmp	r3, #0
 8005572:	da03      	bge.n	800557c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800557a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800557c:	887b      	ldrh	r3, [r7, #2]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800558c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800558e:	887b      	ldrh	r3, [r7, #2]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b00      	cmp	r3, #0
 8005596:	d003      	beq.n	80055a0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800559e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80055a0:	887b      	ldrh	r3, [r7, #2]
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d103      	bne.n	80055ae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f043 0320 	orr.w	r3, r3, #32
 80055ac:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6819      	ldr	r1, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]
}
 80055be:	bf00      	nop
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	08004507 	.word	0x08004507
 80055d0:	080046ed 	.word	0x080046ed

080055d4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	460b      	mov	r3, r1
 80055de:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80055e4:	887b      	ldrh	r3, [r7, #2]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00f      	beq.n	800560e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80055f4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005602:	2b28      	cmp	r3, #40	; 0x28
 8005604:	d003      	beq.n	800560e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800560c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800560e:	887b      	ldrh	r3, [r7, #2]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00f      	beq.n	8005638 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800561e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005626:	b2db      	uxtb	r3, r3
 8005628:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800562c:	2b28      	cmp	r3, #40	; 0x28
 800562e:	d003      	beq.n	8005638 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005636:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005638:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800563c:	2b00      	cmp	r3, #0
 800563e:	da03      	bge.n	8005648 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005646:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005648:	887b      	ldrh	r3, [r7, #2]
 800564a:	2b10      	cmp	r3, #16
 800564c:	d103      	bne.n	8005656 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005654:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	2b20      	cmp	r3, #32
 800565a:	d103      	bne.n	8005664 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f043 0320 	orr.w	r3, r3, #32
 8005662:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005664:	887b      	ldrh	r3, [r7, #2]
 8005666:	2b40      	cmp	r3, #64	; 0x40
 8005668:	d103      	bne.n	8005672 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005670:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6819      	ldr	r1, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	43da      	mvns	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	400a      	ands	r2, r1
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d138      	bne.n	8005718 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e032      	b.n	800571a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2224      	movs	r2, #36	; 0x24
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0201 	bic.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6819      	ldr	r1, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0201 	orr.w	r2, r2, #1
 8005702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005714:	2300      	movs	r3, #0
 8005716:	e000      	b.n	800571a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005718:	2302      	movs	r3, #2
  }
}
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b20      	cmp	r3, #32
 800573a:	d139      	bne.n	80057b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005746:	2302      	movs	r3, #2
 8005748:	e033      	b.n	80057b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2224      	movs	r2, #36	; 0x24
 8005756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0201 	bic.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005778:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	e000      	b.n	80057b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80057b0:	2302      	movs	r3, #2
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057c0:	b08f      	sub	sp, #60	; 0x3c
 80057c2:	af0a      	add	r7, sp, #40	; 0x28
 80057c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e116      	b.n	80059fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fb ffe0 	bl	80017b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2203      	movs	r2, #3
 80057f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f003 fb22 	bl	8008e58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	603b      	str	r3, [r7, #0]
 800581a:	687e      	ldr	r6, [r7, #4]
 800581c:	466d      	mov	r5, sp
 800581e:	f106 0410 	add.w	r4, r6, #16
 8005822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800582a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800582e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005832:	1d33      	adds	r3, r6, #4
 8005834:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005836:	6838      	ldr	r0, [r7, #0]
 8005838:	f003 fab6 	bl	8008da8 <USB_CoreInit>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2202      	movs	r2, #2
 8005846:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e0d7      	b.n	80059fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2100      	movs	r1, #0
 8005854:	4618      	mov	r0, r3
 8005856:	f003 fb10 	bl	8008e7a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
 800585e:	e04a      	b.n	80058f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005860:	7bfa      	ldrb	r2, [r7, #15]
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	333d      	adds	r3, #61	; 0x3d
 8005870:	2201      	movs	r2, #1
 8005872:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005874:	7bfa      	ldrb	r2, [r7, #15]
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4613      	mov	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	1a9b      	subs	r3, r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	333c      	adds	r3, #60	; 0x3c
 8005884:	7bfa      	ldrb	r2, [r7, #15]
 8005886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005888:	7bfa      	ldrb	r2, [r7, #15]
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	b298      	uxth	r0, r3
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	3342      	adds	r3, #66	; 0x42
 800589c:	4602      	mov	r2, r0
 800589e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80058a0:	7bfa      	ldrb	r2, [r7, #15]
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	333f      	adds	r3, #63	; 0x3f
 80058b0:	2200      	movs	r2, #0
 80058b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80058b4:	7bfa      	ldrb	r2, [r7, #15]
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	4613      	mov	r3, r2
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	3344      	adds	r3, #68	; 0x44
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80058c8:	7bfa      	ldrb	r2, [r7, #15]
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	4613      	mov	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	1a9b      	subs	r3, r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	440b      	add	r3, r1
 80058d6:	3348      	adds	r3, #72	; 0x48
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058dc:	7bfa      	ldrb	r2, [r7, #15]
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	4613      	mov	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	440b      	add	r3, r1
 80058ea:	3350      	adds	r3, #80	; 0x50
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	3301      	adds	r3, #1
 80058f4:	73fb      	strb	r3, [r7, #15]
 80058f6:	7bfa      	ldrb	r2, [r7, #15]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d3af      	bcc.n	8005860 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005900:	2300      	movs	r3, #0
 8005902:	73fb      	strb	r3, [r7, #15]
 8005904:	e044      	b.n	8005990 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005906:	7bfa      	ldrb	r2, [r7, #15]
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	4613      	mov	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	1a9b      	subs	r3, r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	440b      	add	r3, r1
 8005914:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005918:	2200      	movs	r2, #0
 800591a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800591c:	7bfa      	ldrb	r2, [r7, #15]
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	440b      	add	r3, r1
 800592a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800592e:	7bfa      	ldrb	r2, [r7, #15]
 8005930:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005932:	7bfa      	ldrb	r2, [r7, #15]
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	4613      	mov	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005944:	2200      	movs	r2, #0
 8005946:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005948:	7bfa      	ldrb	r2, [r7, #15]
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800595e:	7bfa      	ldrb	r2, [r7, #15]
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005974:	7bfa      	ldrb	r2, [r7, #15]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	3301      	adds	r3, #1
 800598e:	73fb      	strb	r3, [r7, #15]
 8005990:	7bfa      	ldrb	r2, [r7, #15]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	429a      	cmp	r2, r3
 8005998:	d3b5      	bcc.n	8005906 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	687e      	ldr	r6, [r7, #4]
 80059a2:	466d      	mov	r5, sp
 80059a4:	f106 0410 	add.w	r4, r6, #16
 80059a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80059b8:	1d33      	adds	r3, r6, #4
 80059ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059bc:	6838      	ldr	r0, [r7, #0]
 80059be:	f003 fa87 	bl	8008ed0 <USB_DevInit>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e014      	b.n	80059fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d102      	bne.n	80059f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f80b 	bl	8005a08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f003 fc39 	bl	800926e <USB_DevDisconnect>

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005a08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a36:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <HAL_PCDEx_ActivateLPM+0x44>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	10000003 	.word	0x10000003

08005a50 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a54:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a04      	ldr	r2, [pc, #16]	; (8005a6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a5e:	6013      	str	r3, [r2, #0]
}
 8005a60:	bf00      	nop
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40007000 	.word	0x40007000

08005a70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e291      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 8087 	beq.w	8005ba2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a94:	4b96      	ldr	r3, [pc, #600]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 030c 	and.w	r3, r3, #12
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d00c      	beq.n	8005aba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005aa0:	4b93      	ldr	r3, [pc, #588]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 030c 	and.w	r3, r3, #12
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d112      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x62>
 8005aac:	4b90      	ldr	r3, [pc, #576]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ab8:	d10b      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aba:	4b8d      	ldr	r3, [pc, #564]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d06c      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x130>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d168      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e26b      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ada:	d106      	bne.n	8005aea <HAL_RCC_OscConfig+0x7a>
 8005adc:	4b84      	ldr	r3, [pc, #528]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a83      	ldr	r2, [pc, #524]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	e02e      	b.n	8005b48 <HAL_RCC_OscConfig+0xd8>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10c      	bne.n	8005b0c <HAL_RCC_OscConfig+0x9c>
 8005af2:	4b7f      	ldr	r3, [pc, #508]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a7e      	ldr	r2, [pc, #504]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	4b7c      	ldr	r3, [pc, #496]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a7b      	ldr	r2, [pc, #492]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	e01d      	b.n	8005b48 <HAL_RCC_OscConfig+0xd8>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b14:	d10c      	bne.n	8005b30 <HAL_RCC_OscConfig+0xc0>
 8005b16:	4b76      	ldr	r3, [pc, #472]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a75      	ldr	r2, [pc, #468]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	4b73      	ldr	r3, [pc, #460]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a72      	ldr	r2, [pc, #456]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	e00b      	b.n	8005b48 <HAL_RCC_OscConfig+0xd8>
 8005b30:	4b6f      	ldr	r3, [pc, #444]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a6e      	ldr	r2, [pc, #440]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	4b6c      	ldr	r3, [pc, #432]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a6b      	ldr	r2, [pc, #428]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d013      	beq.n	8005b78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b50:	f7fc f86e 	bl	8001c30 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b58:	f7fc f86a 	bl	8001c30 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b64      	cmp	r3, #100	; 0x64
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e21f      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b6a:	4b61      	ldr	r3, [pc, #388]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f0      	beq.n	8005b58 <HAL_RCC_OscConfig+0xe8>
 8005b76:	e014      	b.n	8005ba2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b78:	f7fc f85a 	bl	8001c30 <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b80:	f7fc f856 	bl	8001c30 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b64      	cmp	r3, #100	; 0x64
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e20b      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b92:	4b57      	ldr	r3, [pc, #348]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1f0      	bne.n	8005b80 <HAL_RCC_OscConfig+0x110>
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d069      	beq.n	8005c82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bae:	4b50      	ldr	r3, [pc, #320]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 030c 	and.w	r3, r3, #12
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00b      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bba:	4b4d      	ldr	r3, [pc, #308]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 030c 	and.w	r3, r3, #12
 8005bc2:	2b08      	cmp	r3, #8
 8005bc4:	d11c      	bne.n	8005c00 <HAL_RCC_OscConfig+0x190>
 8005bc6:	4b4a      	ldr	r3, [pc, #296]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d116      	bne.n	8005c00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bd2:	4b47      	ldr	r3, [pc, #284]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_RCC_OscConfig+0x17a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d001      	beq.n	8005bea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e1df      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bea:	4b41      	ldr	r3, [pc, #260]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	493d      	ldr	r1, [pc, #244]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bfe:	e040      	b.n	8005c82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d023      	beq.n	8005c50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c08:	4b39      	ldr	r3, [pc, #228]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a38      	ldr	r2, [pc, #224]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c14:	f7fc f80c 	bl	8001c30 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c1c:	f7fc f808 	bl	8001c30 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e1bd      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c2e:	4b30      	ldr	r3, [pc, #192]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0f0      	beq.n	8005c1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c3a:	4b2d      	ldr	r3, [pc, #180]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	4929      	ldr	r1, [pc, #164]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	600b      	str	r3, [r1, #0]
 8005c4e:	e018      	b.n	8005c82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c50:	4b27      	ldr	r3, [pc, #156]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a26      	ldr	r2, [pc, #152]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005c56:	f023 0301 	bic.w	r3, r3, #1
 8005c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5c:	f7fb ffe8 	bl	8001c30 <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c64:	f7fb ffe4 	bl	8001c30 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e199      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c76:	4b1e      	ldr	r3, [pc, #120]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f0      	bne.n	8005c64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d038      	beq.n	8005d00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d019      	beq.n	8005cca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c96:	4b16      	ldr	r3, [pc, #88]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c9a:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca2:	f7fb ffc5 	bl	8001c30 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005caa:	f7fb ffc1 	bl	8001c30 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e176      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0f0      	beq.n	8005caa <HAL_RCC_OscConfig+0x23a>
 8005cc8:	e01a      	b.n	8005d00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cca:	4b09      	ldr	r3, [pc, #36]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cce:	4a08      	ldr	r2, [pc, #32]	; (8005cf0 <HAL_RCC_OscConfig+0x280>)
 8005cd0:	f023 0301 	bic.w	r3, r3, #1
 8005cd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cd6:	f7fb ffab 	bl	8001c30 <HAL_GetTick>
 8005cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cdc:	e00a      	b.n	8005cf4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cde:	f7fb ffa7 	bl	8001c30 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d903      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e15c      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
 8005cf0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf4:	4b91      	ldr	r3, [pc, #580]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1ee      	bne.n	8005cde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 80a4 	beq.w	8005e56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d0e:	4b8b      	ldr	r3, [pc, #556]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10d      	bne.n	8005d36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1a:	4b88      	ldr	r3, [pc, #544]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	4a87      	ldr	r2, [pc, #540]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d24:	6413      	str	r3, [r2, #64]	; 0x40
 8005d26:	4b85      	ldr	r3, [pc, #532]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	60bb      	str	r3, [r7, #8]
 8005d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d32:	2301      	movs	r3, #1
 8005d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d36:	4b82      	ldr	r3, [pc, #520]	; (8005f40 <HAL_RCC_OscConfig+0x4d0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d118      	bne.n	8005d74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005d42:	4b7f      	ldr	r3, [pc, #508]	; (8005f40 <HAL_RCC_OscConfig+0x4d0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a7e      	ldr	r2, [pc, #504]	; (8005f40 <HAL_RCC_OscConfig+0x4d0>)
 8005d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d4e:	f7fb ff6f 	bl	8001c30 <HAL_GetTick>
 8005d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d54:	e008      	b.n	8005d68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d56:	f7fb ff6b 	bl	8001c30 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b64      	cmp	r3, #100	; 0x64
 8005d62:	d901      	bls.n	8005d68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e120      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d68:	4b75      	ldr	r3, [pc, #468]	; (8005f40 <HAL_RCC_OscConfig+0x4d0>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0f0      	beq.n	8005d56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d106      	bne.n	8005d8a <HAL_RCC_OscConfig+0x31a>
 8005d7c:	4b6f      	ldr	r3, [pc, #444]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d80:	4a6e      	ldr	r2, [pc, #440]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	6713      	str	r3, [r2, #112]	; 0x70
 8005d88:	e02d      	b.n	8005de6 <HAL_RCC_OscConfig+0x376>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10c      	bne.n	8005dac <HAL_RCC_OscConfig+0x33c>
 8005d92:	4b6a      	ldr	r3, [pc, #424]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	4a69      	ldr	r2, [pc, #420]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d9e:	4b67      	ldr	r3, [pc, #412]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da2:	4a66      	ldr	r2, [pc, #408]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005da4:	f023 0304 	bic.w	r3, r3, #4
 8005da8:	6713      	str	r3, [r2, #112]	; 0x70
 8005daa:	e01c      	b.n	8005de6 <HAL_RCC_OscConfig+0x376>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	2b05      	cmp	r3, #5
 8005db2:	d10c      	bne.n	8005dce <HAL_RCC_OscConfig+0x35e>
 8005db4:	4b61      	ldr	r3, [pc, #388]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db8:	4a60      	ldr	r2, [pc, #384]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005dba:	f043 0304 	orr.w	r3, r3, #4
 8005dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005dc0:	4b5e      	ldr	r3, [pc, #376]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc4:	4a5d      	ldr	r2, [pc, #372]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005dc6:	f043 0301 	orr.w	r3, r3, #1
 8005dca:	6713      	str	r3, [r2, #112]	; 0x70
 8005dcc:	e00b      	b.n	8005de6 <HAL_RCC_OscConfig+0x376>
 8005dce:	4b5b      	ldr	r3, [pc, #364]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd2:	4a5a      	ldr	r2, [pc, #360]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005dd4:	f023 0301 	bic.w	r3, r3, #1
 8005dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8005dda:	4b58      	ldr	r3, [pc, #352]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dde:	4a57      	ldr	r2, [pc, #348]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005de0:	f023 0304 	bic.w	r3, r3, #4
 8005de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d015      	beq.n	8005e1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dee:	f7fb ff1f 	bl	8001c30 <HAL_GetTick>
 8005df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df4:	e00a      	b.n	8005e0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df6:	f7fb ff1b 	bl	8001c30 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e0ce      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e0c:	4b4b      	ldr	r3, [pc, #300]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d0ee      	beq.n	8005df6 <HAL_RCC_OscConfig+0x386>
 8005e18:	e014      	b.n	8005e44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e1a:	f7fb ff09 	bl	8001c30 <HAL_GetTick>
 8005e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e20:	e00a      	b.n	8005e38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e22:	f7fb ff05 	bl	8001c30 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e0b8      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e38:	4b40      	ldr	r3, [pc, #256]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1ee      	bne.n	8005e22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d105      	bne.n	8005e56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e4a:	4b3c      	ldr	r3, [pc, #240]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	4a3b      	ldr	r2, [pc, #236]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 80a4 	beq.w	8005fa8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e60:	4b36      	ldr	r3, [pc, #216]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f003 030c 	and.w	r3, r3, #12
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d06b      	beq.n	8005f44 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d149      	bne.n	8005f08 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e74:	4b31      	ldr	r3, [pc, #196]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a30      	ldr	r2, [pc, #192]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e80:	f7fb fed6 	bl	8001c30 <HAL_GetTick>
 8005e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e88:	f7fb fed2 	bl	8001c30 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e087      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e9a:	4b28      	ldr	r3, [pc, #160]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1f0      	bne.n	8005e88 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69da      	ldr	r2, [r3, #28]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	019b      	lsls	r3, r3, #6
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebc:	085b      	lsrs	r3, r3, #1
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	041b      	lsls	r3, r3, #16
 8005ec2:	431a      	orrs	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	061b      	lsls	r3, r3, #24
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	4a1b      	ldr	r2, [pc, #108]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005ece:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ed2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ed4:	4b19      	ldr	r3, [pc, #100]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a18      	ldr	r2, [pc, #96]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fb fea6 	bl	8001c30 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee8:	f7fb fea2 	bl	8001c30 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e057      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005efa:	4b10      	ldr	r3, [pc, #64]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x478>
 8005f06:	e04f      	b.n	8005fa8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a0b      	ldr	r2, [pc, #44]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f14:	f7fb fe8c 	bl	8001c30 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f1c:	f7fb fe88 	bl	8001c30 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e03d      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f2e:	4b03      	ldr	r3, [pc, #12]	; (8005f3c <HAL_RCC_OscConfig+0x4cc>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f0      	bne.n	8005f1c <HAL_RCC_OscConfig+0x4ac>
 8005f3a:	e035      	b.n	8005fa8 <HAL_RCC_OscConfig+0x538>
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005f44:	4b1b      	ldr	r3, [pc, #108]	; (8005fb4 <HAL_RCC_OscConfig+0x544>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d028      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d121      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d11a      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f74:	4013      	ands	r3, r2
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d111      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d107      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d001      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3718      	adds	r7, #24
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40023800 	.word	0x40023800

08005fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e0d0      	b.n	8006172 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fd0:	4b6a      	ldr	r3, [pc, #424]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 030f 	and.w	r3, r3, #15
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d910      	bls.n	8006000 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fde:	4b67      	ldr	r3, [pc, #412]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f023 020f 	bic.w	r2, r3, #15
 8005fe6:	4965      	ldr	r1, [pc, #404]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fee:	4b63      	ldr	r3, [pc, #396]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 030f 	and.w	r3, r3, #15
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d001      	beq.n	8006000 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e0b8      	b.n	8006172 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d020      	beq.n	800604e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d005      	beq.n	8006024 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006018:	4b59      	ldr	r3, [pc, #356]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	4a58      	ldr	r2, [pc, #352]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 800601e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006022:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006030:	4b53      	ldr	r3, [pc, #332]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	4a52      	ldr	r2, [pc, #328]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 8006036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800603a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800603c:	4b50      	ldr	r3, [pc, #320]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	494d      	ldr	r1, [pc, #308]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 800604a:	4313      	orrs	r3, r2
 800604c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d040      	beq.n	80060dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d107      	bne.n	8006072 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006062:	4b47      	ldr	r3, [pc, #284]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d115      	bne.n	800609a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e07f      	b.n	8006172 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b02      	cmp	r3, #2
 8006078:	d107      	bne.n	800608a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800607a:	4b41      	ldr	r3, [pc, #260]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e073      	b.n	8006172 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800608a:	4b3d      	ldr	r3, [pc, #244]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e06b      	b.n	8006172 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800609a:	4b39      	ldr	r3, [pc, #228]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f023 0203 	bic.w	r2, r3, #3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4936      	ldr	r1, [pc, #216]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060ac:	f7fb fdc0 	bl	8001c30 <HAL_GetTick>
 80060b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b2:	e00a      	b.n	80060ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b4:	f7fb fdbc 	bl	8001c30 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e053      	b.n	8006172 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ca:	4b2d      	ldr	r3, [pc, #180]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 020c 	and.w	r2, r3, #12
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	429a      	cmp	r2, r3
 80060da:	d1eb      	bne.n	80060b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060dc:	4b27      	ldr	r3, [pc, #156]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 030f 	and.w	r3, r3, #15
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d210      	bcs.n	800610c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ea:	4b24      	ldr	r3, [pc, #144]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f023 020f 	bic.w	r2, r3, #15
 80060f2:	4922      	ldr	r1, [pc, #136]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060fa:	4b20      	ldr	r3, [pc, #128]	; (800617c <HAL_RCC_ClockConfig+0x1c4>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	429a      	cmp	r2, r3
 8006106:	d001      	beq.n	800610c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e032      	b.n	8006172 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b00      	cmp	r3, #0
 8006116:	d008      	beq.n	800612a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006118:	4b19      	ldr	r3, [pc, #100]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	4916      	ldr	r1, [pc, #88]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 8006126:	4313      	orrs	r3, r2
 8006128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d009      	beq.n	800614a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006136:	4b12      	ldr	r3, [pc, #72]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	490e      	ldr	r1, [pc, #56]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 8006146:	4313      	orrs	r3, r2
 8006148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800614a:	f000 f821 	bl	8006190 <HAL_RCC_GetSysClockFreq>
 800614e:	4602      	mov	r2, r0
 8006150:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <HAL_RCC_ClockConfig+0x1c8>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	490a      	ldr	r1, [pc, #40]	; (8006184 <HAL_RCC_ClockConfig+0x1cc>)
 800615c:	5ccb      	ldrb	r3, [r1, r3]
 800615e:	fa22 f303 	lsr.w	r3, r2, r3
 8006162:	4a09      	ldr	r2, [pc, #36]	; (8006188 <HAL_RCC_ClockConfig+0x1d0>)
 8006164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006166:	4b09      	ldr	r3, [pc, #36]	; (800618c <HAL_RCC_ClockConfig+0x1d4>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f7fb fd1c 	bl	8001ba8 <HAL_InitTick>

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40023c00 	.word	0x40023c00
 8006180:	40023800 	.word	0x40023800
 8006184:	080177f8 	.word	0x080177f8
 8006188:	20000004 	.word	0x20000004
 800618c:	20000008 	.word	0x20000008

08006190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006190:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	607b      	str	r3, [r7, #4]
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	2300      	movs	r3, #0
 80061a2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061a8:	4b67      	ldr	r3, [pc, #412]	; (8006348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 030c 	and.w	r3, r3, #12
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d00d      	beq.n	80061d0 <HAL_RCC_GetSysClockFreq+0x40>
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	f200 80bd 	bhi.w	8006334 <HAL_RCC_GetSysClockFreq+0x1a4>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <HAL_RCC_GetSysClockFreq+0x34>
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d003      	beq.n	80061ca <HAL_RCC_GetSysClockFreq+0x3a>
 80061c2:	e0b7      	b.n	8006334 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061c4:	4b61      	ldr	r3, [pc, #388]	; (800634c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80061c6:	60bb      	str	r3, [r7, #8]
      break;
 80061c8:	e0b7      	b.n	800633a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061ca:	4b61      	ldr	r3, [pc, #388]	; (8006350 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80061cc:	60bb      	str	r3, [r7, #8]
      break;
 80061ce:	e0b4      	b.n	800633a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061d0:	4b5d      	ldr	r3, [pc, #372]	; (8006348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061d8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80061da:	4b5b      	ldr	r3, [pc, #364]	; (8006348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d04d      	beq.n	8006282 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061e6:	4b58      	ldr	r3, [pc, #352]	; (8006348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	099b      	lsrs	r3, r3, #6
 80061ec:	461a      	mov	r2, r3
 80061ee:	f04f 0300 	mov.w	r3, #0
 80061f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80061f6:	f04f 0100 	mov.w	r1, #0
 80061fa:	ea02 0800 	and.w	r8, r2, r0
 80061fe:	ea03 0901 	and.w	r9, r3, r1
 8006202:	4640      	mov	r0, r8
 8006204:	4649      	mov	r1, r9
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	014b      	lsls	r3, r1, #5
 8006210:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006214:	0142      	lsls	r2, r0, #5
 8006216:	4610      	mov	r0, r2
 8006218:	4619      	mov	r1, r3
 800621a:	ebb0 0008 	subs.w	r0, r0, r8
 800621e:	eb61 0109 	sbc.w	r1, r1, r9
 8006222:	f04f 0200 	mov.w	r2, #0
 8006226:	f04f 0300 	mov.w	r3, #0
 800622a:	018b      	lsls	r3, r1, #6
 800622c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006230:	0182      	lsls	r2, r0, #6
 8006232:	1a12      	subs	r2, r2, r0
 8006234:	eb63 0301 	sbc.w	r3, r3, r1
 8006238:	f04f 0000 	mov.w	r0, #0
 800623c:	f04f 0100 	mov.w	r1, #0
 8006240:	00d9      	lsls	r1, r3, #3
 8006242:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006246:	00d0      	lsls	r0, r2, #3
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	eb12 0208 	adds.w	r2, r2, r8
 8006250:	eb43 0309 	adc.w	r3, r3, r9
 8006254:	f04f 0000 	mov.w	r0, #0
 8006258:	f04f 0100 	mov.w	r1, #0
 800625c:	0259      	lsls	r1, r3, #9
 800625e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006262:	0250      	lsls	r0, r2, #9
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4610      	mov	r0, r2
 800626a:	4619      	mov	r1, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	461a      	mov	r2, r3
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	f7fa f824 	bl	80002c0 <__aeabi_uldivmod>
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	4613      	mov	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	e04a      	b.n	8006318 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006282:	4b31      	ldr	r3, [pc, #196]	; (8006348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	099b      	lsrs	r3, r3, #6
 8006288:	461a      	mov	r2, r3
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006292:	f04f 0100 	mov.w	r1, #0
 8006296:	ea02 0400 	and.w	r4, r2, r0
 800629a:	ea03 0501 	and.w	r5, r3, r1
 800629e:	4620      	mov	r0, r4
 80062a0:	4629      	mov	r1, r5
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	f04f 0300 	mov.w	r3, #0
 80062aa:	014b      	lsls	r3, r1, #5
 80062ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80062b0:	0142      	lsls	r2, r0, #5
 80062b2:	4610      	mov	r0, r2
 80062b4:	4619      	mov	r1, r3
 80062b6:	1b00      	subs	r0, r0, r4
 80062b8:	eb61 0105 	sbc.w	r1, r1, r5
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	018b      	lsls	r3, r1, #6
 80062c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80062ca:	0182      	lsls	r2, r0, #6
 80062cc:	1a12      	subs	r2, r2, r0
 80062ce:	eb63 0301 	sbc.w	r3, r3, r1
 80062d2:	f04f 0000 	mov.w	r0, #0
 80062d6:	f04f 0100 	mov.w	r1, #0
 80062da:	00d9      	lsls	r1, r3, #3
 80062dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062e0:	00d0      	lsls	r0, r2, #3
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	1912      	adds	r2, r2, r4
 80062e8:	eb45 0303 	adc.w	r3, r5, r3
 80062ec:	f04f 0000 	mov.w	r0, #0
 80062f0:	f04f 0100 	mov.w	r1, #0
 80062f4:	0299      	lsls	r1, r3, #10
 80062f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80062fa:	0290      	lsls	r0, r2, #10
 80062fc:	4602      	mov	r2, r0
 80062fe:	460b      	mov	r3, r1
 8006300:	4610      	mov	r0, r2
 8006302:	4619      	mov	r1, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	461a      	mov	r2, r3
 8006308:	f04f 0300 	mov.w	r3, #0
 800630c:	f7f9 ffd8 	bl	80002c0 <__aeabi_uldivmod>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4613      	mov	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006318:	4b0b      	ldr	r3, [pc, #44]	; (8006348 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	0c1b      	lsrs	r3, r3, #16
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	3301      	adds	r3, #1
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	60bb      	str	r3, [r7, #8]
      break;
 8006332:	e002      	b.n	800633a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006334:	4b05      	ldr	r3, [pc, #20]	; (800634c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006336:	60bb      	str	r3, [r7, #8]
      break;
 8006338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800633a:	68bb      	ldr	r3, [r7, #8]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006346:	bf00      	nop
 8006348:	40023800 	.word	0x40023800
 800634c:	00f42400 	.word	0x00f42400
 8006350:	007a1200 	.word	0x007a1200

08006354 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006358:	4b03      	ldr	r3, [pc, #12]	; (8006368 <HAL_RCC_GetHCLKFreq+0x14>)
 800635a:	681b      	ldr	r3, [r3, #0]
}
 800635c:	4618      	mov	r0, r3
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	20000004 	.word	0x20000004

0800636c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006370:	f7ff fff0 	bl	8006354 <HAL_RCC_GetHCLKFreq>
 8006374:	4602      	mov	r2, r0
 8006376:	4b05      	ldr	r3, [pc, #20]	; (800638c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	0a9b      	lsrs	r3, r3, #10
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	4903      	ldr	r1, [pc, #12]	; (8006390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006382:	5ccb      	ldrb	r3, [r1, r3]
 8006384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006388:	4618      	mov	r0, r3
 800638a:	bd80      	pop	{r7, pc}
 800638c:	40023800 	.word	0x40023800
 8006390:	08017808 	.word	0x08017808

08006394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006398:	f7ff ffdc 	bl	8006354 <HAL_RCC_GetHCLKFreq>
 800639c:	4602      	mov	r2, r0
 800639e:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	0b5b      	lsrs	r3, r3, #13
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	4903      	ldr	r1, [pc, #12]	; (80063b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063aa:	5ccb      	ldrb	r3, [r1, r3]
 80063ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40023800 	.word	0x40023800
 80063b8:	08017808 	.word	0x08017808

080063bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80063c8:	2300      	movs	r3, #0
 80063ca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80063d0:	2300      	movs	r3, #0
 80063d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d012      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80063e4:	4b69      	ldr	r3, [pc, #420]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	4a68      	ldr	r2, [pc, #416]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80063ee:	6093      	str	r3, [r2, #8]
 80063f0:	4b66      	ldr	r3, [pc, #408]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f8:	4964      	ldr	r1, [pc, #400]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006406:	2301      	movs	r3, #1
 8006408:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d017      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006416:	4b5d      	ldr	r3, [pc, #372]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800641c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006424:	4959      	ldr	r1, [pc, #356]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006434:	d101      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006436:	2301      	movs	r3, #1
 8006438:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006442:	2301      	movs	r3, #1
 8006444:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d017      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006452:	4b4e      	ldr	r3, [pc, #312]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006458:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006460:	494a      	ldr	r1, [pc, #296]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006470:	d101      	bne.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006472:	2301      	movs	r3, #1
 8006474:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800647e:	2301      	movs	r3, #1
 8006480:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800648e:	2301      	movs	r3, #1
 8006490:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 808b 	beq.w	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064a0:	4b3a      	ldr	r3, [pc, #232]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	4a39      	ldr	r2, [pc, #228]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064aa:	6413      	str	r3, [r2, #64]	; 0x40
 80064ac:	4b37      	ldr	r3, [pc, #220]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b4:	60bb      	str	r3, [r7, #8]
 80064b6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064b8:	4b35      	ldr	r3, [pc, #212]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a34      	ldr	r2, [pc, #208]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064c4:	f7fb fbb4 	bl	8001c30 <HAL_GetTick>
 80064c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064ca:	e008      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064cc:	f7fb fbb0 	bl	8001c30 <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b64      	cmp	r3, #100	; 0x64
 80064d8:	d901      	bls.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e357      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064de:	4b2c      	ldr	r3, [pc, #176]	; (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d0f0      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064ea:	4b28      	ldr	r3, [pc, #160]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d035      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	429a      	cmp	r2, r3
 8006506:	d02e      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006508:	4b20      	ldr	r3, [pc, #128]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800650a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800650c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006510:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006512:	4b1e      	ldr	r3, [pc, #120]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006516:	4a1d      	ldr	r2, [pc, #116]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800651c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800651e:	4b1b      	ldr	r3, [pc, #108]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006522:	4a1a      	ldr	r2, [pc, #104]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006528:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800652a:	4a18      	ldr	r2, [pc, #96]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006530:	4b16      	ldr	r3, [pc, #88]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b01      	cmp	r3, #1
 800653a:	d114      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800653c:	f7fb fb78 	bl	8001c30 <HAL_GetTick>
 8006540:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006542:	e00a      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006544:	f7fb fb74 	bl	8001c30 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006552:	4293      	cmp	r3, r2
 8006554:	d901      	bls.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e319      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800655a:	4b0c      	ldr	r3, [pc, #48]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800655c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655e:	f003 0302 	and.w	r3, r3, #2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0ee      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800656e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006572:	d111      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006580:	4b04      	ldr	r3, [pc, #16]	; (8006594 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006582:	400b      	ands	r3, r1
 8006584:	4901      	ldr	r1, [pc, #4]	; (800658c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006586:	4313      	orrs	r3, r2
 8006588:	608b      	str	r3, [r1, #8]
 800658a:	e00b      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800658c:	40023800 	.word	0x40023800
 8006590:	40007000 	.word	0x40007000
 8006594:	0ffffcff 	.word	0x0ffffcff
 8006598:	4bb1      	ldr	r3, [pc, #708]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	4ab0      	ldr	r2, [pc, #704]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800659e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80065a2:	6093      	str	r3, [r2, #8]
 80065a4:	4bae      	ldr	r3, [pc, #696]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065b0:	49ab      	ldr	r1, [pc, #684]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0310 	and.w	r3, r3, #16
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d010      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065c2:	4ba7      	ldr	r3, [pc, #668]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065c8:	4aa5      	ldr	r2, [pc, #660]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065d2:	4ba3      	ldr	r3, [pc, #652]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	49a0      	ldr	r1, [pc, #640]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065f0:	4b9b      	ldr	r3, [pc, #620]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80065f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fe:	4998      	ldr	r1, [pc, #608]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006600:	4313      	orrs	r3, r2
 8006602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006612:	4b93      	ldr	r3, [pc, #588]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006618:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006620:	498f      	ldr	r1, [pc, #572]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006622:	4313      	orrs	r3, r2
 8006624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006634:	4b8a      	ldr	r3, [pc, #552]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800663a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006642:	4987      	ldr	r1, [pc, #540]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006644:	4313      	orrs	r3, r2
 8006646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006656:	4b82      	ldr	r3, [pc, #520]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006664:	497e      	ldr	r1, [pc, #504]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006666:	4313      	orrs	r3, r2
 8006668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00a      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006678:	4b79      	ldr	r3, [pc, #484]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800667a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667e:	f023 0203 	bic.w	r2, r3, #3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006686:	4976      	ldr	r1, [pc, #472]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006688:	4313      	orrs	r3, r2
 800668a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800669a:	4b71      	ldr	r3, [pc, #452]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800669c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a0:	f023 020c 	bic.w	r2, r3, #12
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a8:	496d      	ldr	r1, [pc, #436]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066bc:	4b68      	ldr	r3, [pc, #416]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ca:	4965      	ldr	r1, [pc, #404]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066de:	4b60      	ldr	r3, [pc, #384]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ec:	495c      	ldr	r1, [pc, #368]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006700:	4b57      	ldr	r3, [pc, #348]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006706:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670e:	4954      	ldr	r1, [pc, #336]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006722:	4b4f      	ldr	r3, [pc, #316]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006728:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006730:	494b      	ldr	r1, [pc, #300]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006732:	4313      	orrs	r3, r2
 8006734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006744:	4b46      	ldr	r3, [pc, #280]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006752:	4943      	ldr	r1, [pc, #268]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006754:	4313      	orrs	r3, r2
 8006756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006766:	4b3e      	ldr	r3, [pc, #248]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006774:	493a      	ldr	r1, [pc, #232]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00a      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006788:	4b35      	ldr	r3, [pc, #212]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800678a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800678e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006796:	4932      	ldr	r1, [pc, #200]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006798:	4313      	orrs	r3, r2
 800679a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d011      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80067aa:	4b2d      	ldr	r3, [pc, #180]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067b8:	4929      	ldr	r1, [pc, #164]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067c8:	d101      	bne.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80067ca:	2301      	movs	r3, #1
 80067cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0308 	and.w	r3, r3, #8
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80067da:	2301      	movs	r3, #1
 80067dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067ea:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f8:	4919      	ldr	r1, [pc, #100]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00b      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800680c:	4b14      	ldr	r3, [pc, #80]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800680e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006812:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800681c:	4910      	ldr	r1, [pc, #64]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800681e:	4313      	orrs	r3, r2
 8006820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d006      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 80d9 	beq.w	80069ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006838:	4b09      	ldr	r3, [pc, #36]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a08      	ldr	r2, [pc, #32]	; (8006860 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800683e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006844:	f7fb f9f4 	bl	8001c30 <HAL_GetTick>
 8006848:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800684a:	e00b      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800684c:	f7fb f9f0 	bl	8001c30 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b64      	cmp	r3, #100	; 0x64
 8006858:	d904      	bls.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e197      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800685e:	bf00      	nop
 8006860:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006864:	4b6c      	ldr	r3, [pc, #432]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1ed      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	d021      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006880:	2b00      	cmp	r3, #0
 8006882:	d11d      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006884:	4b64      	ldr	r3, [pc, #400]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800688a:	0c1b      	lsrs	r3, r3, #16
 800688c:	f003 0303 	and.w	r3, r3, #3
 8006890:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006892:	4b61      	ldr	r3, [pc, #388]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006898:	0e1b      	lsrs	r3, r3, #24
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	019a      	lsls	r2, r3, #6
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	041b      	lsls	r3, r3, #16
 80068aa:	431a      	orrs	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	061b      	lsls	r3, r3, #24
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	071b      	lsls	r3, r3, #28
 80068b8:	4957      	ldr	r1, [pc, #348]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068d4:	d00a      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d02e      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068ea:	d129      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80068ec:	4b4a      	ldr	r3, [pc, #296]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f2:	0c1b      	lsrs	r3, r3, #16
 80068f4:	f003 0303 	and.w	r3, r3, #3
 80068f8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80068fa:	4b47      	ldr	r3, [pc, #284]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80068fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006900:	0f1b      	lsrs	r3, r3, #28
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	019a      	lsls	r2, r3, #6
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	041b      	lsls	r3, r3, #16
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	061b      	lsls	r3, r3, #24
 800691a:	431a      	orrs	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	071b      	lsls	r3, r3, #28
 8006920:	493d      	ldr	r1, [pc, #244]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006922:	4313      	orrs	r3, r2
 8006924:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006928:	4b3b      	ldr	r3, [pc, #236]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800692a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800692e:	f023 021f 	bic.w	r2, r3, #31
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006936:	3b01      	subs	r3, #1
 8006938:	4937      	ldr	r1, [pc, #220]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01d      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800694c:	4b32      	ldr	r3, [pc, #200]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800694e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006952:	0e1b      	lsrs	r3, r3, #24
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800695a:	4b2f      	ldr	r3, [pc, #188]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800695c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006960:	0f1b      	lsrs	r3, r3, #28
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	019a      	lsls	r2, r3, #6
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	041b      	lsls	r3, r3, #16
 8006974:	431a      	orrs	r2, r3
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	061b      	lsls	r3, r3, #24
 800697a:	431a      	orrs	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	071b      	lsls	r3, r3, #28
 8006980:	4925      	ldr	r1, [pc, #148]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d011      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	019a      	lsls	r2, r3, #6
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	041b      	lsls	r3, r3, #16
 80069a0:	431a      	orrs	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	061b      	lsls	r3, r3, #24
 80069a8:	431a      	orrs	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	071b      	lsls	r3, r3, #28
 80069b0:	4919      	ldr	r1, [pc, #100]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069b8:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a16      	ldr	r2, [pc, #88]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069c4:	f7fb f934 	bl	8001c30 <HAL_GetTick>
 80069c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069ca:	e008      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069cc:	f7fb f930 	bl	8001c30 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b64      	cmp	r3, #100	; 0x64
 80069d8:	d901      	bls.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e0d7      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069de:	4b0e      	ldr	r3, [pc, #56]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0f0      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	f040 80cd 	bne.w	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80069f2:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a08      	ldr	r2, [pc, #32]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069fe:	f7fb f917 	bl	8001c30 <HAL_GetTick>
 8006a02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a04:	e00a      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a06:	f7fb f913 	bl	8001c30 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b64      	cmp	r3, #100	; 0x64
 8006a12:	d903      	bls.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e0ba      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006a18:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a1c:	4b5e      	ldr	r3, [pc, #376]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a28:	d0ed      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d009      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d02e      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d12a      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006a52:	4b51      	ldr	r3, [pc, #324]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a58:	0c1b      	lsrs	r3, r3, #16
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006a60:	4b4d      	ldr	r3, [pc, #308]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a66:	0f1b      	lsrs	r3, r3, #28
 8006a68:	f003 0307 	and.w	r3, r3, #7
 8006a6c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	019a      	lsls	r2, r3, #6
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	041b      	lsls	r3, r3, #16
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	061b      	lsls	r3, r3, #24
 8006a80:	431a      	orrs	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	071b      	lsls	r3, r3, #28
 8006a86:	4944      	ldr	r1, [pc, #272]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006a8e:	4b42      	ldr	r3, [pc, #264]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	493d      	ldr	r1, [pc, #244]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d022      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006abc:	d11d      	bne.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006abe:	4b36      	ldr	r3, [pc, #216]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac4:	0e1b      	lsrs	r3, r3, #24
 8006ac6:	f003 030f 	and.w	r3, r3, #15
 8006aca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006acc:	4b32      	ldr	r3, [pc, #200]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad2:	0f1b      	lsrs	r3, r3, #28
 8006ad4:	f003 0307 	and.w	r3, r3, #7
 8006ad8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	695b      	ldr	r3, [r3, #20]
 8006ade:	019a      	lsls	r2, r3, #6
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	041b      	lsls	r3, r3, #16
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	061b      	lsls	r3, r3, #24
 8006aec:	431a      	orrs	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	071b      	lsls	r3, r3, #28
 8006af2:	4929      	ldr	r1, [pc, #164]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0308 	and.w	r3, r3, #8
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d028      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b06:	4b24      	ldr	r3, [pc, #144]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0c:	0e1b      	lsrs	r3, r3, #24
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b14:	4b20      	ldr	r3, [pc, #128]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1a:	0c1b      	lsrs	r3, r3, #16
 8006b1c:	f003 0303 	and.w	r3, r3, #3
 8006b20:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	019a      	lsls	r2, r3, #6
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	041b      	lsls	r3, r3, #16
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	061b      	lsls	r3, r3, #24
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	071b      	lsls	r3, r3, #28
 8006b3a:	4917      	ldr	r1, [pc, #92]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006b42:	4b15      	ldr	r3, [pc, #84]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	4911      	ldr	r1, [pc, #68]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b58:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a0e      	ldr	r2, [pc, #56]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b64:	f7fb f864 	bl	8001c30 <HAL_GetTick>
 8006b68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b6c:	f7fb f860 	bl	8001c30 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b64      	cmp	r3, #100	; 0x64
 8006b78:	d901      	bls.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e007      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b7e:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b8a:	d1ef      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3720      	adds	r7, #32
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40023800 	.word	0x40023800

08006b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e09d      	b.n	8006cea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d108      	bne.n	8006bc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bbe:	d009      	beq.n	8006bd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	61da      	str	r2, [r3, #28]
 8006bc6:	e005      	b.n	8006bd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7fa fbae 	bl	8001350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c14:	d902      	bls.n	8006c1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	e002      	b.n	8006c22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006c2a:	d007      	beq.n	8006c3c <HAL_SPI_Init+0xa0>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c34:	d002      	beq.n	8006c3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	431a      	orrs	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	431a      	orrs	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7e:	ea42 0103 	orr.w	r1, r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c86:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	0c1b      	lsrs	r3, r3, #16
 8006c98:	f003 0204 	and.w	r2, r3, #4
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	f003 0310 	and.w	r3, r3, #16
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	431a      	orrs	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006cb8:	ea42 0103 	orr.w	r1, r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	430a      	orrs	r2, r1
 8006cc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	69da      	ldr	r2, [r3, #28]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b088      	sub	sp, #32
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	603b      	str	r3, [r7, #0]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d101      	bne.n	8006d14 <HAL_SPI_Transmit+0x22>
 8006d10:	2302      	movs	r3, #2
 8006d12:	e158      	b.n	8006fc6 <HAL_SPI_Transmit+0x2d4>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d1c:	f7fa ff88 	bl	8001c30 <HAL_GetTick>
 8006d20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d22:	88fb      	ldrh	r3, [r7, #6]
 8006d24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d002      	beq.n	8006d38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d32:	2302      	movs	r3, #2
 8006d34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d36:	e13d      	b.n	8006fb4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <HAL_SPI_Transmit+0x52>
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d102      	bne.n	8006d4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d48:	e134      	b.n	8006fb4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	88fa      	ldrh	r2, [r7, #6]
 8006d62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d94:	d10f      	bne.n	8006db6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006da4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006db4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b40      	cmp	r3, #64	; 0x40
 8006dc2:	d007      	beq.n	8006dd4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ddc:	d94b      	bls.n	8006e76 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <HAL_SPI_Transmit+0xfa>
 8006de6:	8afb      	ldrh	r3, [r7, #22]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d13e      	bne.n	8006e6a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df0:	881a      	ldrh	r2, [r3, #0]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	1c9a      	adds	r2, r3, #2
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e10:	e02b      	b.n	8006e6a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d112      	bne.n	8006e46 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	881a      	ldrh	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e30:	1c9a      	adds	r2, r3, #2
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e44:	e011      	b.n	8006e6a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e46:	f7fa fef3 	bl	8001c30 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d803      	bhi.n	8006e5e <HAL_SPI_Transmit+0x16c>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5c:	d102      	bne.n	8006e64 <HAL_SPI_Transmit+0x172>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d102      	bne.n	8006e6a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e68:	e0a4      	b.n	8006fb4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1ce      	bne.n	8006e12 <HAL_SPI_Transmit+0x120>
 8006e74:	e07c      	b.n	8006f70 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <HAL_SPI_Transmit+0x192>
 8006e7e:	8afb      	ldrh	r3, [r7, #22]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d170      	bne.n	8006f66 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d912      	bls.n	8006eb4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	881a      	ldrh	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	1c9a      	adds	r2, r3, #2
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	3b02      	subs	r3, #2
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006eb2:	e058      	b.n	8006f66 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	330c      	adds	r3, #12
 8006ebe:	7812      	ldrb	r2, [r2, #0]
 8006ec0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006eda:	e044      	b.n	8006f66 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d12b      	bne.n	8006f42 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d912      	bls.n	8006f1a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	881a      	ldrh	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	1c9a      	adds	r2, r3, #2
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	3b02      	subs	r3, #2
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f18:	e025      	b.n	8006f66 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	330c      	adds	r3, #12
 8006f24:	7812      	ldrb	r2, [r2, #0]
 8006f26:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f40:	e011      	b.n	8006f66 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f42:	f7fa fe75 	bl	8001c30 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d803      	bhi.n	8006f5a <HAL_SPI_Transmit+0x268>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d102      	bne.n	8006f60 <HAL_SPI_Transmit+0x26e>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d102      	bne.n	8006f66 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f64:	e026      	b.n	8006fb4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1b5      	bne.n	8006edc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 fe65 	bl	8007c44 <SPI_EndRxTxTransaction>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2220      	movs	r2, #32
 8006f84:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f8e:	2300      	movs	r3, #0
 8006f90:	613b      	str	r3, [r7, #16]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	613b      	str	r3, [r7, #16]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	77fb      	strb	r3, [r7, #31]
 8006fb0:	e000      	b.n	8006fb4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006fb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006fc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3720      	adds	r7, #32
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d110      	bne.n	800700c <HAL_SPI_Receive_DMA+0x3c>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ff2:	d10b      	bne.n	800700c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006ffc:	88fb      	ldrh	r3, [r7, #6]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 f908 	bl	8007218 <HAL_SPI_TransmitReceive_DMA>
 8007008:	4603      	mov	r3, r0
 800700a:	e0fb      	b.n	8007204 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007012:	2b01      	cmp	r3, #1
 8007014:	d101      	bne.n	800701a <HAL_SPI_Receive_DMA+0x4a>
 8007016:	2302      	movs	r3, #2
 8007018:	e0f4      	b.n	8007204 <HAL_SPI_Receive_DMA+0x234>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b01      	cmp	r3, #1
 800702c:	d002      	beq.n	8007034 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800702e:	2302      	movs	r3, #2
 8007030:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007032:	e0e2      	b.n	80071fa <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_SPI_Receive_DMA+0x70>
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d102      	bne.n	8007046 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007044:	e0d9      	b.n	80071fa <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2204      	movs	r2, #4
 800704a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	88fa      	ldrh	r2, [r7, #6]
 800705e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	88fa      	ldrh	r2, [r7, #6]
 8007066:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800708a:	d10f      	bne.n	80070ac <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800709a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ba:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070c4:	d908      	bls.n	80070d8 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	685a      	ldr	r2, [r3, #4]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070d4:	605a      	str	r2, [r3, #4]
 80070d6:	e042      	b.n	800715e <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070e6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070f2:	d134      	bne.n	800715e <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007102:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800710a:	b29b      	uxth	r3, r3
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d111      	bne.n	8007138 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007122:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800712a:	b29b      	uxth	r3, r3
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	b29a      	uxth	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007136:	e012      	b.n	800715e <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007146:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800714e:	b29b      	uxth	r3, r3
 8007150:	085b      	lsrs	r3, r3, #1
 8007152:	b29b      	uxth	r3, r3
 8007154:	3301      	adds	r3, #1
 8007156:	b29a      	uxth	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007162:	4a2a      	ldr	r2, [pc, #168]	; (800720c <HAL_SPI_Receive_DMA+0x23c>)
 8007164:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800716a:	4a29      	ldr	r2, [pc, #164]	; (8007210 <HAL_SPI_Receive_DMA+0x240>)
 800716c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007172:	4a28      	ldr	r2, [pc, #160]	; (8007214 <HAL_SPI_Receive_DMA+0x244>)
 8007174:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717a:	2200      	movs	r2, #0
 800717c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	330c      	adds	r3, #12
 8007188:	4619      	mov	r1, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007196:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007198:	f7fa ff3a 	bl	8002010 <HAL_DMA_Start_IT>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00c      	beq.n	80071bc <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a6:	f043 0210 	orr.w	r2, r3, #16
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80071ba:	e01e      	b.n	80071fa <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d007      	beq.n	80071da <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071d8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f042 0220 	orr.w	r2, r2, #32
 80071e8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f042 0201 	orr.w	r2, r2, #1
 80071f8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007202:	7dfb      	ldrb	r3, [r7, #23]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	080078bd 	.word	0x080078bd
 8007210:	08007781 	.word	0x08007781
 8007214:	080078f5 	.word	0x080078f5

08007218 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007234:	2302      	movs	r3, #2
 8007236:	e16c      	b.n	8007512 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007246:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800724e:	7dbb      	ldrb	r3, [r7, #22]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d00d      	beq.n	8007270 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800725a:	d106      	bne.n	800726a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d102      	bne.n	800726a <HAL_SPI_TransmitReceive_DMA+0x52>
 8007264:	7dbb      	ldrb	r3, [r7, #22]
 8007266:	2b04      	cmp	r3, #4
 8007268:	d002      	beq.n	8007270 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800726a:	2302      	movs	r3, #2
 800726c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800726e:	e14b      	b.n	8007508 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d005      	beq.n	8007282 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800727c:	887b      	ldrh	r3, [r7, #2]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d102      	bne.n	8007288 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007286:	e13f      	b.n	8007508 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b04      	cmp	r3, #4
 8007292:	d003      	beq.n	800729c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2205      	movs	r2, #5
 8007298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	887a      	ldrh	r2, [r7, #2]
 80072ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	887a      	ldrh	r2, [r7, #2]
 80072b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	887a      	ldrh	r2, [r7, #2]
 80072be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	887a      	ldrh	r2, [r7, #2]
 80072c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80072e4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072ee:	d908      	bls.n	8007302 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80072fe:	605a      	str	r2, [r3, #4]
 8007300:	e06f      	b.n	80073e2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007310:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800731c:	d126      	bne.n	800736c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10f      	bne.n	800734a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007338:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800733e:	b29b      	uxth	r3, r3
 8007340:	085b      	lsrs	r3, r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007348:	e010      	b.n	800736c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007358:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800735e:	b29b      	uxth	r3, r3
 8007360:	085b      	lsrs	r3, r3, #1
 8007362:	b29b      	uxth	r3, r3
 8007364:	3301      	adds	r3, #1
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007376:	d134      	bne.n	80073e2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007386:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800738e:	b29b      	uxth	r3, r3
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d111      	bne.n	80073bc <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073a6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	085b      	lsrs	r3, r3, #1
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80073ba:	e012      	b.n	80073e2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073ca:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	085b      	lsrs	r3, r3, #1
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	3301      	adds	r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d108      	bne.n	8007400 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f2:	4a4a      	ldr	r2, [pc, #296]	; (800751c <HAL_SPI_TransmitReceive_DMA+0x304>)
 80073f4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fa:	4a49      	ldr	r2, [pc, #292]	; (8007520 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80073fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80073fe:	e007      	b.n	8007410 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007404:	4a47      	ldr	r2, [pc, #284]	; (8007524 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8007406:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740c:	4a46      	ldr	r2, [pc, #280]	; (8007528 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800740e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007414:	4a45      	ldr	r2, [pc, #276]	; (800752c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8007416:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741c:	2200      	movs	r2, #0
 800741e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	330c      	adds	r3, #12
 800742a:	4619      	mov	r1, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007438:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800743a:	f7fa fde9 	bl	8002010 <HAL_DMA_Start_IT>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00c      	beq.n	800745e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007448:	f043 0210 	orr.w	r2, r3, #16
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800745c:	e054      	b.n	8007508 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f042 0201 	orr.w	r2, r2, #1
 800746c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007472:	2200      	movs	r2, #0
 8007474:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747a:	2200      	movs	r2, #0
 800747c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007482:	2200      	movs	r2, #0
 8007484:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748a:	2200      	movs	r2, #0
 800748c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	4619      	mov	r1, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	330c      	adds	r3, #12
 800749e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80074a6:	f7fa fdb3 	bl	8002010 <HAL_DMA_Start_IT>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00c      	beq.n	80074ca <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b4:	f043 0210 	orr.w	r2, r3, #16
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80074c8:	e01e      	b.n	8007508 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d4:	2b40      	cmp	r3, #64	; 0x40
 80074d6:	d007      	beq.n	80074e8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074e6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f042 0220 	orr.w	r2, r2, #32
 80074f6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0202 	orr.w	r2, r2, #2
 8007506:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007510:	7dfb      	ldrb	r3, [r7, #23]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3718      	adds	r7, #24
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	080078bd 	.word	0x080078bd
 8007520:	08007781 	.word	0x08007781
 8007524:	080078d9 	.word	0x080078d9
 8007528:	0800782b 	.word	0x0800782b
 800752c:	080078f5 	.word	0x080078f5

08007530 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	099b      	lsrs	r3, r3, #6
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10f      	bne.n	8007574 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	099b      	lsrs	r3, r3, #6
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d004      	beq.n	8007574 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	4798      	blx	r3
    return;
 8007572:	e0d7      	b.n	8007724 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	085b      	lsrs	r3, r3, #1
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00a      	beq.n	8007596 <HAL_SPI_IRQHandler+0x66>
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	09db      	lsrs	r3, r3, #7
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d004      	beq.n	8007596 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	4798      	blx	r3
    return;
 8007594:	e0c6      	b.n	8007724 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	095b      	lsrs	r3, r3, #5
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10c      	bne.n	80075bc <HAL_SPI_IRQHandler+0x8c>
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	099b      	lsrs	r3, r3, #6
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	0a1b      	lsrs	r3, r3, #8
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 80b4 	beq.w	8007724 <HAL_SPI_IRQHandler+0x1f4>
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	095b      	lsrs	r3, r3, #5
 80075c0:	f003 0301 	and.w	r3, r3, #1
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 80ad 	beq.w	8007724 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	099b      	lsrs	r3, r3, #6
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d023      	beq.n	800761e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d011      	beq.n	8007606 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e6:	f043 0204 	orr.w	r2, r3, #4
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	e00b      	b.n	800761e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007606:	2300      	movs	r3, #0
 8007608:	613b      	str	r3, [r7, #16]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	613b      	str	r3, [r7, #16]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	693b      	ldr	r3, [r7, #16]
        return;
 800761c:	e082      	b.n	8007724 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d014      	beq.n	8007654 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800762e:	f043 0201 	orr.w	r2, r3, #1
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	60fb      	str	r3, [r7, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	0a1b      	lsrs	r3, r3, #8
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00c      	beq.n	800767a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007664:	f043 0208 	orr.w	r2, r3, #8
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800766c:	2300      	movs	r3, #0
 800766e:	60bb      	str	r3, [r7, #8]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	60bb      	str	r3, [r7, #8]
 8007678:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800767e:	2b00      	cmp	r3, #0
 8007680:	d04f      	beq.n	8007722 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007690:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d104      	bne.n	80076ae <HAL_SPI_IRQHandler+0x17e>
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d034      	beq.n	8007718 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0203 	bic.w	r2, r2, #3
 80076bc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d011      	beq.n	80076ea <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ca:	4a18      	ldr	r2, [pc, #96]	; (800772c <HAL_SPI_IRQHandler+0x1fc>)
 80076cc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fa fd6c 	bl	80021b0 <HAL_DMA_Abort_IT>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d016      	beq.n	8007720 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f6:	4a0d      	ldr	r2, [pc, #52]	; (800772c <HAL_SPI_IRQHandler+0x1fc>)
 80076f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fa fd56 	bl	80021b0 <HAL_DMA_Abort_IT>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800770e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007716:	e003      	b.n	8007720 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f827 	bl	800776c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800771e:	e000      	b.n	8007722 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007720:	bf00      	nop
    return;
 8007722:	bf00      	nop
  }
}
 8007724:	3720      	adds	r7, #32
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	08007935 	.word	0x08007935

08007730 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800778e:	f7fa fa4f 	bl	8001c30 <HAL_GetTick>
 8007792:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a2:	d03c      	beq.n	800781e <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0220 	bic.w	r2, r2, #32
 80077b2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10d      	bne.n	80077d8 <SPI_DMAReceiveCplt+0x58>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077c4:	d108      	bne.n	80077d8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0203 	bic.w	r2, r2, #3
 80077d4:	605a      	str	r2, [r3, #4]
 80077d6:	e007      	b.n	80077e8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 0201 	bic.w	r2, r2, #1
 80077e6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	2164      	movs	r1, #100	; 0x64
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 f9d1 	bl	8007b94 <SPI_EndRxTransaction>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2220      	movs	r2, #32
 80077fc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f7ff ffa8 	bl	800776c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800781c:	e002      	b.n	8007824 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f7f9 fbc6 	bl	8000fb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b084      	sub	sp, #16
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007836:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007838:	f7fa f9fa 	bl	8001c30 <HAL_GetTick>
 800783c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784c:	d030      	beq.n	80078b0 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0220 	bic.w	r2, r2, #32
 800785c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	2164      	movs	r1, #100	; 0x64
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 f9ee 	bl	8007c44 <SPI_EndRxTxTransaction>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d005      	beq.n	800787a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007872:	f043 0220 	orr.w	r2, r3, #32
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 0203 	bic.w	r2, r2, #3
 8007888:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f7ff ff5f 	bl	800776c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80078ae:	e002      	b.n	80078b6 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f7ff ff3d 	bl	8007730 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f7ff ff3a 	bl	8007744 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7ff ff36 	bl	8007758 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007900:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 0203 	bic.w	r2, r2, #3
 8007910:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007916:	f043 0210 	orr.w	r2, r3, #16
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f7ff ff20 	bl	800776c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800792c:	bf00      	nop
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007940:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f7ff ff0b 	bl	800776c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007956:	bf00      	nop
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b088      	sub	sp, #32
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	603b      	str	r3, [r7, #0]
 800796c:	4613      	mov	r3, r2
 800796e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007970:	f7fa f95e 	bl	8001c30 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007978:	1a9b      	subs	r3, r3, r2
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	4413      	add	r3, r2
 800797e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007980:	f7fa f956 	bl	8001c30 <HAL_GetTick>
 8007984:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007986:	4b39      	ldr	r3, [pc, #228]	; (8007a6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	015b      	lsls	r3, r3, #5
 800798c:	0d1b      	lsrs	r3, r3, #20
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	fb02 f303 	mul.w	r3, r2, r3
 8007994:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007996:	e054      	b.n	8007a42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799e:	d050      	beq.n	8007a42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80079a0:	f7fa f946 	bl	8001c30 <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	69fa      	ldr	r2, [r7, #28]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d902      	bls.n	80079b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d13d      	bne.n	8007a32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079ce:	d111      	bne.n	80079f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079d8:	d004      	beq.n	80079e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079e2:	d107      	bne.n	80079f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079fc:	d10f      	bne.n	8007a1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e017      	b.n	8007a62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689a      	ldr	r2, [r3, #8]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	bf0c      	ite	eq
 8007a52:	2301      	moveq	r3, #1
 8007a54:	2300      	movne	r3, #0
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	461a      	mov	r2, r3
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d19b      	bne.n	8007998 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3720      	adds	r7, #32
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000004 	.word	0x20000004

08007a70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b088      	sub	sp, #32
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a7e:	f7fa f8d7 	bl	8001c30 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a86:	1a9b      	subs	r3, r3, r2
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a8e:	f7fa f8cf 	bl	8001c30 <HAL_GetTick>
 8007a92:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a94:	4b3e      	ldr	r3, [pc, #248]	; (8007b90 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	00da      	lsls	r2, r3, #3
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	0d1b      	lsrs	r3, r3, #20
 8007aa4:	69fa      	ldr	r2, [r7, #28]
 8007aa6:	fb02 f303 	mul.w	r3, r2, r3
 8007aaa:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8007aac:	e062      	b.n	8007b74 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007ab4:	d109      	bne.n	8007aca <SPI_WaitFifoStateUntilTimeout+0x5a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d106      	bne.n	8007aca <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	330c      	adds	r3, #12
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8007ac8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad0:	d050      	beq.n	8007b74 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ad2:	f7fa f8ad 	bl	8001c30 <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d902      	bls.n	8007ae8 <SPI_WaitFifoStateUntilTimeout+0x78>
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d13d      	bne.n	8007b64 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007af6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b00:	d111      	bne.n	8007b26 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b0a:	d004      	beq.n	8007b16 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b14:	d107      	bne.n	8007b26 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b24:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2e:	d10f      	bne.n	8007b50 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e010      	b.n	8007b86 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689a      	ldr	r2, [r3, #8]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d194      	bne.n	8007aae <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3720      	adds	r7, #32
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20000004 	.word	0x20000004

08007b94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ba8:	d111      	bne.n	8007bce <SPI_EndRxTransaction+0x3a>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb2:	d004      	beq.n	8007bbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bbc:	d107      	bne.n	8007bce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bcc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2180      	movs	r1, #128	; 0x80
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f7ff fec1 	bl	8007960 <SPI_WaitFlagStateUntilTimeout>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d007      	beq.n	8007bf4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be8:	f043 0220 	orr.w	r2, r3, #32
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e023      	b.n	8007c3c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bfc:	d11d      	bne.n	8007c3a <SPI_EndRxTransaction+0xa6>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c06:	d004      	beq.n	8007c12 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c10:	d113      	bne.n	8007c3a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	f7ff ff26 	bl	8007a70 <SPI_WaitFifoStateUntilTimeout>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d007      	beq.n	8007c3a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c2e:	f043 0220 	orr.w	r2, r3, #32
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e000      	b.n	8007c3c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af02      	add	r7, sp, #8
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f7ff ff07 	bl	8007a70 <SPI_WaitFifoStateUntilTimeout>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d007      	beq.n	8007c78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c6c:	f043 0220 	orr.w	r2, r3, #32
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e027      	b.n	8007cc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2180      	movs	r1, #128	; 0x80
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f7ff fe6c 	bl	8007960 <SPI_WaitFlagStateUntilTimeout>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d007      	beq.n	8007c9e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c92:	f043 0220 	orr.w	r2, r3, #32
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e014      	b.n	8007cc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f7ff fee0 	bl	8007a70 <SPI_WaitFifoStateUntilTimeout>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d007      	beq.n	8007cc6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cba:	f043 0220 	orr.w	r2, r3, #32
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e000      	b.n	8007cc8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e040      	b.n	8007d64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d106      	bne.n	8007cf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7f9 fc0e 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2224      	movs	r2, #36	; 0x24
 8007cfc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0201 	bic.w	r2, r2, #1
 8007d0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fb12 	bl	8008338 <UART_SetConfig>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d101      	bne.n	8007d1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e022      	b.n	8007d64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fd68 	bl	80087fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689a      	ldr	r2, [r3, #8]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0201 	orr.w	r2, r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fdef 	bl	8008940 <UART_CheckIdleState>
 8007d62:	4603      	mov	r3, r0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b08a      	sub	sp, #40	; 0x28
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	603b      	str	r3, [r7, #0]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d80:	2b20      	cmp	r3, #32
 8007d82:	f040 8081 	bne.w	8007e88 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <HAL_UART_Transmit+0x26>
 8007d8c:	88fb      	ldrh	r3, [r7, #6]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e079      	b.n	8007e8a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d101      	bne.n	8007da4 <HAL_UART_Transmit+0x38>
 8007da0:	2302      	movs	r3, #2
 8007da2:	e072      	b.n	8007e8a <HAL_UART_Transmit+0x11e>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2221      	movs	r2, #33	; 0x21
 8007db8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dba:	f7f9 ff39 	bl	8001c30 <HAL_GetTick>
 8007dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	88fa      	ldrh	r2, [r7, #6]
 8007dc4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	88fa      	ldrh	r2, [r7, #6]
 8007dcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd8:	d108      	bne.n	8007dec <HAL_UART_Transmit+0x80>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d104      	bne.n	8007dec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007de2:	2300      	movs	r3, #0
 8007de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	61bb      	str	r3, [r7, #24]
 8007dea:	e003      	b.n	8007df4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007df0:	2300      	movs	r3, #0
 8007df2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007dfc:	e02c      	b.n	8007e58 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	2200      	movs	r2, #0
 8007e06:	2180      	movs	r1, #128	; 0x80
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 fdcc 	bl	80089a6 <UART_WaitOnFlagUntilTimeout>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e038      	b.n	8007e8a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10b      	bne.n	8007e36 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	461a      	mov	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	3302      	adds	r3, #2
 8007e32:	61bb      	str	r3, [r7, #24]
 8007e34:	e007      	b.n	8007e46 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	781a      	ldrb	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	3301      	adds	r3, #1
 8007e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1cc      	bne.n	8007dfe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2140      	movs	r1, #64	; 0x40
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 fd99 	bl	80089a6 <UART_WaitOnFlagUntilTimeout>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e005      	b.n	8007e8a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2220      	movs	r2, #32
 8007e82:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007e84:	2300      	movs	r3, #0
 8007e86:	e000      	b.n	8007e8a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007e88:	2302      	movs	r3, #2
  }
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3720      	adds	r7, #32
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b084      	sub	sp, #16
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ea4:	2b20      	cmp	r3, #32
 8007ea6:	d12c      	bne.n	8007f02 <HAL_UART_Receive_DMA+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <HAL_UART_Receive_DMA+0x22>
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e025      	b.n	8007f04 <HAL_UART_Receive_DMA+0x72>
    }

    __HAL_LOCK(huart);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d101      	bne.n	8007ec6 <HAL_UART_Receive_DMA+0x34>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e01e      	b.n	8007f04 <HAL_UART_Receive_DMA+0x72>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d007      	beq.n	8007ef2 <HAL_UART_Receive_DMA+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007ef0:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007ef2:	88fb      	ldrh	r3, [r7, #6]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 fdd1 	bl	8008aa0 <UART_Start_Receive_DMA>
 8007efe:	4603      	mov	r3, r0
 8007f00:	e000      	b.n	8007f04 <HAL_UART_Receive_DMA+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007f02:	2302      	movs	r3, #2
  }
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f2c:	69fa      	ldr	r2, [r7, #28]
 8007f2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f32:	4013      	ands	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d113      	bne.n	8007f64 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	f003 0320 	and.w	r3, r3, #32
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00e      	beq.n	8007f64 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	f003 0320 	and.w	r3, r3, #32
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d009      	beq.n	8007f64 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 81b9 	beq.w	80082cc <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	4798      	blx	r3
      }
      return;
 8007f62:	e1b3      	b.n	80082cc <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 80e3 	beq.w	8008132 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d105      	bne.n	8007f82 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	4ba5      	ldr	r3, [pc, #660]	; (8008210 <HAL_UART_IRQHandler+0x304>)
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 80d8 	beq.w	8008132 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d010      	beq.n	8007fae <HAL_UART_IRQHandler+0xa2>
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00b      	beq.n	8007fae <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fa4:	f043 0201 	orr.w	r2, r3, #1
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	f003 0302 	and.w	r3, r3, #2
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d010      	beq.n	8007fda <HAL_UART_IRQHandler+0xce>
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00b      	beq.n	8007fda <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fd0:	f043 0204 	orr.w	r2, r3, #4
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d010      	beq.n	8008006 <HAL_UART_IRQHandler+0xfa>
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00b      	beq.n	8008006 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ffc:	f043 0202 	orr.w	r2, r3, #2
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	f003 0308 	and.w	r3, r3, #8
 800800c:	2b00      	cmp	r3, #0
 800800e:	d015      	beq.n	800803c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	f003 0320 	and.w	r3, r3, #32
 8008016:	2b00      	cmp	r3, #0
 8008018:	d104      	bne.n	8008024 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00b      	beq.n	800803c <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2208      	movs	r2, #8
 800802a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008032:	f043 0208 	orr.w	r2, r3, #8
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008042:	2b00      	cmp	r3, #0
 8008044:	d011      	beq.n	800806a <HAL_UART_IRQHandler+0x15e>
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008058:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008060:	f043 0220 	orr.w	r2, r3, #32
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 812d 	beq.w	80082d0 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	f003 0320 	and.w	r3, r3, #32
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00c      	beq.n	800809a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	f003 0320 	and.w	r3, r3, #32
 8008086:	2b00      	cmp	r3, #0
 8008088:	d007      	beq.n	800809a <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080a0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ac:	2b40      	cmp	r3, #64	; 0x40
 80080ae:	d004      	beq.n	80080ba <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d031      	beq.n	800811e <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fd71 	bl	8008ba2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ca:	2b40      	cmp	r3, #64	; 0x40
 80080cc:	d123      	bne.n	8008116 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	689a      	ldr	r2, [r3, #8]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080dc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d013      	beq.n	800810e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ea:	4a4a      	ldr	r2, [pc, #296]	; (8008214 <HAL_UART_IRQHandler+0x308>)
 80080ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fa f85c 	bl	80021b0 <HAL_DMA_Abort_IT>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d017      	beq.n	800812e <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008108:	4610      	mov	r0, r2
 800810a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800810c:	e00f      	b.n	800812e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f8fc 	bl	800830c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008114:	e00b      	b.n	800812e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f8f8 	bl	800830c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800811c:	e007      	b.n	800812e <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f8f4 	bl	800830c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800812c:	e0d0      	b.n	80082d0 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800812e:	bf00      	nop
    return;
 8008130:	e0ce      	b.n	80082d0 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008136:	2b01      	cmp	r3, #1
 8008138:	f040 80a7 	bne.w	800828a <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	f003 0310 	and.w	r3, r3, #16
 8008142:	2b00      	cmp	r3, #0
 8008144:	f000 80a1 	beq.w	800828a <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	f003 0310 	and.w	r3, r3, #16
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 809b 	beq.w	800828a <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2210      	movs	r2, #16
 800815a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008166:	2b40      	cmp	r3, #64	; 0x40
 8008168:	d156      	bne.n	8008218 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8008174:	893b      	ldrh	r3, [r7, #8]
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 80ac 	beq.w	80082d4 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008182:	893a      	ldrh	r2, [r7, #8]
 8008184:	429a      	cmp	r2, r3
 8008186:	f080 80a5 	bcs.w	80082d4 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	893a      	ldrh	r2, [r7, #8]
 800818e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800819c:	d02a      	beq.n	80081f4 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081ac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f022 0201 	bic.w	r2, r2, #1
 80081bc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	689a      	ldr	r2, [r3, #8]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081cc:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2220      	movs	r2, #32
 80081d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f022 0210 	bic.w	r2, r2, #16
 80081e8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7f9 ff6e 	bl	80020d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008200:	b29b      	uxth	r3, r3
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	b29b      	uxth	r3, r3
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f889 	bl	8008320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800820e:	e061      	b.n	80082d4 <HAL_UART_IRQHandler+0x3c8>
 8008210:	04000120 	.word	0x04000120
 8008214:	08008d49 	.word	0x08008d49
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008224:	b29b      	uxth	r3, r3
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008230:	b29b      	uxth	r3, r3
 8008232:	2b00      	cmp	r3, #0
 8008234:	d050      	beq.n	80082d8 <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8008236:	897b      	ldrh	r3, [r7, #10]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d04d      	beq.n	80082d8 <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800824a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f022 0201 	bic.w	r2, r2, #1
 800825a:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2220      	movs	r2, #32
 8008260:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 0210 	bic.w	r2, r2, #16
 800827c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800827e:	897b      	ldrh	r3, [r7, #10]
 8008280:	4619      	mov	r1, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f84c 	bl	8008320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008288:	e026      	b.n	80082d8 <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00d      	beq.n	80082b0 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800829a:	2b00      	cmp	r3, #0
 800829c:	d008      	beq.n	80082b0 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d01a      	beq.n	80082dc <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
    }
    return;
 80082ae:	e015      	b.n	80082dc <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d011      	beq.n	80082de <HAL_UART_IRQHandler+0x3d2>
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00c      	beq.n	80082de <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fd55 	bl	8008d74 <UART_EndTransmit_IT>
    return;
 80082ca:	e008      	b.n	80082de <HAL_UART_IRQHandler+0x3d2>
      return;
 80082cc:	bf00      	nop
 80082ce:	e006      	b.n	80082de <HAL_UART_IRQHandler+0x3d2>
    return;
 80082d0:	bf00      	nop
 80082d2:	e004      	b.n	80082de <HAL_UART_IRQHandler+0x3d2>
      return;
 80082d4:	bf00      	nop
 80082d6:	e002      	b.n	80082de <HAL_UART_IRQHandler+0x3d2>
      return;
 80082d8:	bf00      	nop
 80082da:	e000      	b.n	80082de <HAL_UART_IRQHandler+0x3d2>
    return;
 80082dc:	bf00      	nop
  }

}
 80082de:	3720      	adds	r7, #32
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80082ec:	bf00      	nop
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b088      	sub	sp, #32
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008340:	2300      	movs	r3, #0
 8008342:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	4313      	orrs	r3, r2
 800835a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4ba7      	ldr	r3, [pc, #668]	; (8008600 <UART_SetConfig+0x2c8>)
 8008364:	4013      	ands	r3, r2
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	6812      	ldr	r2, [r2, #0]
 800836a:	6979      	ldr	r1, [r7, #20]
 800836c:	430b      	orrs	r3, r1
 800836e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	4313      	orrs	r3, r2
 8008394:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a95      	ldr	r2, [pc, #596]	; (8008604 <UART_SetConfig+0x2cc>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d120      	bne.n	80083f6 <UART_SetConfig+0xbe>
 80083b4:	4b94      	ldr	r3, [pc, #592]	; (8008608 <UART_SetConfig+0x2d0>)
 80083b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ba:	f003 0303 	and.w	r3, r3, #3
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d816      	bhi.n	80083f0 <UART_SetConfig+0xb8>
 80083c2:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <UART_SetConfig+0x90>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	080083d9 	.word	0x080083d9
 80083cc:	080083e5 	.word	0x080083e5
 80083d0:	080083df 	.word	0x080083df
 80083d4:	080083eb 	.word	0x080083eb
 80083d8:	2301      	movs	r3, #1
 80083da:	77fb      	strb	r3, [r7, #31]
 80083dc:	e14f      	b.n	800867e <UART_SetConfig+0x346>
 80083de:	2302      	movs	r3, #2
 80083e0:	77fb      	strb	r3, [r7, #31]
 80083e2:	e14c      	b.n	800867e <UART_SetConfig+0x346>
 80083e4:	2304      	movs	r3, #4
 80083e6:	77fb      	strb	r3, [r7, #31]
 80083e8:	e149      	b.n	800867e <UART_SetConfig+0x346>
 80083ea:	2308      	movs	r3, #8
 80083ec:	77fb      	strb	r3, [r7, #31]
 80083ee:	e146      	b.n	800867e <UART_SetConfig+0x346>
 80083f0:	2310      	movs	r3, #16
 80083f2:	77fb      	strb	r3, [r7, #31]
 80083f4:	e143      	b.n	800867e <UART_SetConfig+0x346>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a84      	ldr	r2, [pc, #528]	; (800860c <UART_SetConfig+0x2d4>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d132      	bne.n	8008466 <UART_SetConfig+0x12e>
 8008400:	4b81      	ldr	r3, [pc, #516]	; (8008608 <UART_SetConfig+0x2d0>)
 8008402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008406:	f003 030c 	and.w	r3, r3, #12
 800840a:	2b0c      	cmp	r3, #12
 800840c:	d828      	bhi.n	8008460 <UART_SetConfig+0x128>
 800840e:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <UART_SetConfig+0xdc>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	08008449 	.word	0x08008449
 8008418:	08008461 	.word	0x08008461
 800841c:	08008461 	.word	0x08008461
 8008420:	08008461 	.word	0x08008461
 8008424:	08008455 	.word	0x08008455
 8008428:	08008461 	.word	0x08008461
 800842c:	08008461 	.word	0x08008461
 8008430:	08008461 	.word	0x08008461
 8008434:	0800844f 	.word	0x0800844f
 8008438:	08008461 	.word	0x08008461
 800843c:	08008461 	.word	0x08008461
 8008440:	08008461 	.word	0x08008461
 8008444:	0800845b 	.word	0x0800845b
 8008448:	2300      	movs	r3, #0
 800844a:	77fb      	strb	r3, [r7, #31]
 800844c:	e117      	b.n	800867e <UART_SetConfig+0x346>
 800844e:	2302      	movs	r3, #2
 8008450:	77fb      	strb	r3, [r7, #31]
 8008452:	e114      	b.n	800867e <UART_SetConfig+0x346>
 8008454:	2304      	movs	r3, #4
 8008456:	77fb      	strb	r3, [r7, #31]
 8008458:	e111      	b.n	800867e <UART_SetConfig+0x346>
 800845a:	2308      	movs	r3, #8
 800845c:	77fb      	strb	r3, [r7, #31]
 800845e:	e10e      	b.n	800867e <UART_SetConfig+0x346>
 8008460:	2310      	movs	r3, #16
 8008462:	77fb      	strb	r3, [r7, #31]
 8008464:	e10b      	b.n	800867e <UART_SetConfig+0x346>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a69      	ldr	r2, [pc, #420]	; (8008610 <UART_SetConfig+0x2d8>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d120      	bne.n	80084b2 <UART_SetConfig+0x17a>
 8008470:	4b65      	ldr	r3, [pc, #404]	; (8008608 <UART_SetConfig+0x2d0>)
 8008472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008476:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800847a:	2b30      	cmp	r3, #48	; 0x30
 800847c:	d013      	beq.n	80084a6 <UART_SetConfig+0x16e>
 800847e:	2b30      	cmp	r3, #48	; 0x30
 8008480:	d814      	bhi.n	80084ac <UART_SetConfig+0x174>
 8008482:	2b20      	cmp	r3, #32
 8008484:	d009      	beq.n	800849a <UART_SetConfig+0x162>
 8008486:	2b20      	cmp	r3, #32
 8008488:	d810      	bhi.n	80084ac <UART_SetConfig+0x174>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <UART_SetConfig+0x15c>
 800848e:	2b10      	cmp	r3, #16
 8008490:	d006      	beq.n	80084a0 <UART_SetConfig+0x168>
 8008492:	e00b      	b.n	80084ac <UART_SetConfig+0x174>
 8008494:	2300      	movs	r3, #0
 8008496:	77fb      	strb	r3, [r7, #31]
 8008498:	e0f1      	b.n	800867e <UART_SetConfig+0x346>
 800849a:	2302      	movs	r3, #2
 800849c:	77fb      	strb	r3, [r7, #31]
 800849e:	e0ee      	b.n	800867e <UART_SetConfig+0x346>
 80084a0:	2304      	movs	r3, #4
 80084a2:	77fb      	strb	r3, [r7, #31]
 80084a4:	e0eb      	b.n	800867e <UART_SetConfig+0x346>
 80084a6:	2308      	movs	r3, #8
 80084a8:	77fb      	strb	r3, [r7, #31]
 80084aa:	e0e8      	b.n	800867e <UART_SetConfig+0x346>
 80084ac:	2310      	movs	r3, #16
 80084ae:	77fb      	strb	r3, [r7, #31]
 80084b0:	e0e5      	b.n	800867e <UART_SetConfig+0x346>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a57      	ldr	r2, [pc, #348]	; (8008614 <UART_SetConfig+0x2dc>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d120      	bne.n	80084fe <UART_SetConfig+0x1c6>
 80084bc:	4b52      	ldr	r3, [pc, #328]	; (8008608 <UART_SetConfig+0x2d0>)
 80084be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80084c6:	2bc0      	cmp	r3, #192	; 0xc0
 80084c8:	d013      	beq.n	80084f2 <UART_SetConfig+0x1ba>
 80084ca:	2bc0      	cmp	r3, #192	; 0xc0
 80084cc:	d814      	bhi.n	80084f8 <UART_SetConfig+0x1c0>
 80084ce:	2b80      	cmp	r3, #128	; 0x80
 80084d0:	d009      	beq.n	80084e6 <UART_SetConfig+0x1ae>
 80084d2:	2b80      	cmp	r3, #128	; 0x80
 80084d4:	d810      	bhi.n	80084f8 <UART_SetConfig+0x1c0>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d002      	beq.n	80084e0 <UART_SetConfig+0x1a8>
 80084da:	2b40      	cmp	r3, #64	; 0x40
 80084dc:	d006      	beq.n	80084ec <UART_SetConfig+0x1b4>
 80084de:	e00b      	b.n	80084f8 <UART_SetConfig+0x1c0>
 80084e0:	2300      	movs	r3, #0
 80084e2:	77fb      	strb	r3, [r7, #31]
 80084e4:	e0cb      	b.n	800867e <UART_SetConfig+0x346>
 80084e6:	2302      	movs	r3, #2
 80084e8:	77fb      	strb	r3, [r7, #31]
 80084ea:	e0c8      	b.n	800867e <UART_SetConfig+0x346>
 80084ec:	2304      	movs	r3, #4
 80084ee:	77fb      	strb	r3, [r7, #31]
 80084f0:	e0c5      	b.n	800867e <UART_SetConfig+0x346>
 80084f2:	2308      	movs	r3, #8
 80084f4:	77fb      	strb	r3, [r7, #31]
 80084f6:	e0c2      	b.n	800867e <UART_SetConfig+0x346>
 80084f8:	2310      	movs	r3, #16
 80084fa:	77fb      	strb	r3, [r7, #31]
 80084fc:	e0bf      	b.n	800867e <UART_SetConfig+0x346>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a45      	ldr	r2, [pc, #276]	; (8008618 <UART_SetConfig+0x2e0>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d125      	bne.n	8008554 <UART_SetConfig+0x21c>
 8008508:	4b3f      	ldr	r3, [pc, #252]	; (8008608 <UART_SetConfig+0x2d0>)
 800850a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800850e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008516:	d017      	beq.n	8008548 <UART_SetConfig+0x210>
 8008518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800851c:	d817      	bhi.n	800854e <UART_SetConfig+0x216>
 800851e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008522:	d00b      	beq.n	800853c <UART_SetConfig+0x204>
 8008524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008528:	d811      	bhi.n	800854e <UART_SetConfig+0x216>
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <UART_SetConfig+0x1fe>
 800852e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008532:	d006      	beq.n	8008542 <UART_SetConfig+0x20a>
 8008534:	e00b      	b.n	800854e <UART_SetConfig+0x216>
 8008536:	2300      	movs	r3, #0
 8008538:	77fb      	strb	r3, [r7, #31]
 800853a:	e0a0      	b.n	800867e <UART_SetConfig+0x346>
 800853c:	2302      	movs	r3, #2
 800853e:	77fb      	strb	r3, [r7, #31]
 8008540:	e09d      	b.n	800867e <UART_SetConfig+0x346>
 8008542:	2304      	movs	r3, #4
 8008544:	77fb      	strb	r3, [r7, #31]
 8008546:	e09a      	b.n	800867e <UART_SetConfig+0x346>
 8008548:	2308      	movs	r3, #8
 800854a:	77fb      	strb	r3, [r7, #31]
 800854c:	e097      	b.n	800867e <UART_SetConfig+0x346>
 800854e:	2310      	movs	r3, #16
 8008550:	77fb      	strb	r3, [r7, #31]
 8008552:	e094      	b.n	800867e <UART_SetConfig+0x346>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a30      	ldr	r2, [pc, #192]	; (800861c <UART_SetConfig+0x2e4>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d125      	bne.n	80085aa <UART_SetConfig+0x272>
 800855e:	4b2a      	ldr	r3, [pc, #168]	; (8008608 <UART_SetConfig+0x2d0>)
 8008560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008564:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008568:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800856c:	d017      	beq.n	800859e <UART_SetConfig+0x266>
 800856e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008572:	d817      	bhi.n	80085a4 <UART_SetConfig+0x26c>
 8008574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008578:	d00b      	beq.n	8008592 <UART_SetConfig+0x25a>
 800857a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800857e:	d811      	bhi.n	80085a4 <UART_SetConfig+0x26c>
 8008580:	2b00      	cmp	r3, #0
 8008582:	d003      	beq.n	800858c <UART_SetConfig+0x254>
 8008584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008588:	d006      	beq.n	8008598 <UART_SetConfig+0x260>
 800858a:	e00b      	b.n	80085a4 <UART_SetConfig+0x26c>
 800858c:	2301      	movs	r3, #1
 800858e:	77fb      	strb	r3, [r7, #31]
 8008590:	e075      	b.n	800867e <UART_SetConfig+0x346>
 8008592:	2302      	movs	r3, #2
 8008594:	77fb      	strb	r3, [r7, #31]
 8008596:	e072      	b.n	800867e <UART_SetConfig+0x346>
 8008598:	2304      	movs	r3, #4
 800859a:	77fb      	strb	r3, [r7, #31]
 800859c:	e06f      	b.n	800867e <UART_SetConfig+0x346>
 800859e:	2308      	movs	r3, #8
 80085a0:	77fb      	strb	r3, [r7, #31]
 80085a2:	e06c      	b.n	800867e <UART_SetConfig+0x346>
 80085a4:	2310      	movs	r3, #16
 80085a6:	77fb      	strb	r3, [r7, #31]
 80085a8:	e069      	b.n	800867e <UART_SetConfig+0x346>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a1c      	ldr	r2, [pc, #112]	; (8008620 <UART_SetConfig+0x2e8>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d137      	bne.n	8008624 <UART_SetConfig+0x2ec>
 80085b4:	4b14      	ldr	r3, [pc, #80]	; (8008608 <UART_SetConfig+0x2d0>)
 80085b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80085be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085c2:	d017      	beq.n	80085f4 <UART_SetConfig+0x2bc>
 80085c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085c8:	d817      	bhi.n	80085fa <UART_SetConfig+0x2c2>
 80085ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ce:	d00b      	beq.n	80085e8 <UART_SetConfig+0x2b0>
 80085d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d4:	d811      	bhi.n	80085fa <UART_SetConfig+0x2c2>
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d003      	beq.n	80085e2 <UART_SetConfig+0x2aa>
 80085da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085de:	d006      	beq.n	80085ee <UART_SetConfig+0x2b6>
 80085e0:	e00b      	b.n	80085fa <UART_SetConfig+0x2c2>
 80085e2:	2300      	movs	r3, #0
 80085e4:	77fb      	strb	r3, [r7, #31]
 80085e6:	e04a      	b.n	800867e <UART_SetConfig+0x346>
 80085e8:	2302      	movs	r3, #2
 80085ea:	77fb      	strb	r3, [r7, #31]
 80085ec:	e047      	b.n	800867e <UART_SetConfig+0x346>
 80085ee:	2304      	movs	r3, #4
 80085f0:	77fb      	strb	r3, [r7, #31]
 80085f2:	e044      	b.n	800867e <UART_SetConfig+0x346>
 80085f4:	2308      	movs	r3, #8
 80085f6:	77fb      	strb	r3, [r7, #31]
 80085f8:	e041      	b.n	800867e <UART_SetConfig+0x346>
 80085fa:	2310      	movs	r3, #16
 80085fc:	77fb      	strb	r3, [r7, #31]
 80085fe:	e03e      	b.n	800867e <UART_SetConfig+0x346>
 8008600:	efff69f3 	.word	0xefff69f3
 8008604:	40011000 	.word	0x40011000
 8008608:	40023800 	.word	0x40023800
 800860c:	40004400 	.word	0x40004400
 8008610:	40004800 	.word	0x40004800
 8008614:	40004c00 	.word	0x40004c00
 8008618:	40005000 	.word	0x40005000
 800861c:	40011400 	.word	0x40011400
 8008620:	40007800 	.word	0x40007800
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a71      	ldr	r2, [pc, #452]	; (80087f0 <UART_SetConfig+0x4b8>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d125      	bne.n	800867a <UART_SetConfig+0x342>
 800862e:	4b71      	ldr	r3, [pc, #452]	; (80087f4 <UART_SetConfig+0x4bc>)
 8008630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008638:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800863c:	d017      	beq.n	800866e <UART_SetConfig+0x336>
 800863e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008642:	d817      	bhi.n	8008674 <UART_SetConfig+0x33c>
 8008644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008648:	d00b      	beq.n	8008662 <UART_SetConfig+0x32a>
 800864a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800864e:	d811      	bhi.n	8008674 <UART_SetConfig+0x33c>
 8008650:	2b00      	cmp	r3, #0
 8008652:	d003      	beq.n	800865c <UART_SetConfig+0x324>
 8008654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008658:	d006      	beq.n	8008668 <UART_SetConfig+0x330>
 800865a:	e00b      	b.n	8008674 <UART_SetConfig+0x33c>
 800865c:	2300      	movs	r3, #0
 800865e:	77fb      	strb	r3, [r7, #31]
 8008660:	e00d      	b.n	800867e <UART_SetConfig+0x346>
 8008662:	2302      	movs	r3, #2
 8008664:	77fb      	strb	r3, [r7, #31]
 8008666:	e00a      	b.n	800867e <UART_SetConfig+0x346>
 8008668:	2304      	movs	r3, #4
 800866a:	77fb      	strb	r3, [r7, #31]
 800866c:	e007      	b.n	800867e <UART_SetConfig+0x346>
 800866e:	2308      	movs	r3, #8
 8008670:	77fb      	strb	r3, [r7, #31]
 8008672:	e004      	b.n	800867e <UART_SetConfig+0x346>
 8008674:	2310      	movs	r3, #16
 8008676:	77fb      	strb	r3, [r7, #31]
 8008678:	e001      	b.n	800867e <UART_SetConfig+0x346>
 800867a:	2310      	movs	r3, #16
 800867c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008686:	d15b      	bne.n	8008740 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8008688:	7ffb      	ldrb	r3, [r7, #31]
 800868a:	2b08      	cmp	r3, #8
 800868c:	d827      	bhi.n	80086de <UART_SetConfig+0x3a6>
 800868e:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <UART_SetConfig+0x35c>)
 8008690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008694:	080086b9 	.word	0x080086b9
 8008698:	080086c1 	.word	0x080086c1
 800869c:	080086c9 	.word	0x080086c9
 80086a0:	080086df 	.word	0x080086df
 80086a4:	080086cf 	.word	0x080086cf
 80086a8:	080086df 	.word	0x080086df
 80086ac:	080086df 	.word	0x080086df
 80086b0:	080086df 	.word	0x080086df
 80086b4:	080086d7 	.word	0x080086d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086b8:	f7fd fe58 	bl	800636c <HAL_RCC_GetPCLK1Freq>
 80086bc:	61b8      	str	r0, [r7, #24]
        break;
 80086be:	e013      	b.n	80086e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086c0:	f7fd fe68 	bl	8006394 <HAL_RCC_GetPCLK2Freq>
 80086c4:	61b8      	str	r0, [r7, #24]
        break;
 80086c6:	e00f      	b.n	80086e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086c8:	4b4b      	ldr	r3, [pc, #300]	; (80087f8 <UART_SetConfig+0x4c0>)
 80086ca:	61bb      	str	r3, [r7, #24]
        break;
 80086cc:	e00c      	b.n	80086e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ce:	f7fd fd5f 	bl	8006190 <HAL_RCC_GetSysClockFreq>
 80086d2:	61b8      	str	r0, [r7, #24]
        break;
 80086d4:	e008      	b.n	80086e8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086da:	61bb      	str	r3, [r7, #24]
        break;
 80086dc:	e004      	b.n	80086e8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	77bb      	strb	r3, [r7, #30]
        break;
 80086e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d074      	beq.n	80087d8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	005a      	lsls	r2, r3, #1
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	085b      	lsrs	r3, r3, #1
 80086f8:	441a      	add	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008702:	b29b      	uxth	r3, r3
 8008704:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	2b0f      	cmp	r3, #15
 800870a:	d916      	bls.n	800873a <UART_SetConfig+0x402>
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008712:	d212      	bcs.n	800873a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	b29b      	uxth	r3, r3
 8008718:	f023 030f 	bic.w	r3, r3, #15
 800871c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	085b      	lsrs	r3, r3, #1
 8008722:	b29b      	uxth	r3, r3
 8008724:	f003 0307 	and.w	r3, r3, #7
 8008728:	b29a      	uxth	r2, r3
 800872a:	89fb      	ldrh	r3, [r7, #14]
 800872c:	4313      	orrs	r3, r2
 800872e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	89fa      	ldrh	r2, [r7, #14]
 8008736:	60da      	str	r2, [r3, #12]
 8008738:	e04e      	b.n	80087d8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	77bb      	strb	r3, [r7, #30]
 800873e:	e04b      	b.n	80087d8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008740:	7ffb      	ldrb	r3, [r7, #31]
 8008742:	2b08      	cmp	r3, #8
 8008744:	d827      	bhi.n	8008796 <UART_SetConfig+0x45e>
 8008746:	a201      	add	r2, pc, #4	; (adr r2, 800874c <UART_SetConfig+0x414>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	08008771 	.word	0x08008771
 8008750:	08008779 	.word	0x08008779
 8008754:	08008781 	.word	0x08008781
 8008758:	08008797 	.word	0x08008797
 800875c:	08008787 	.word	0x08008787
 8008760:	08008797 	.word	0x08008797
 8008764:	08008797 	.word	0x08008797
 8008768:	08008797 	.word	0x08008797
 800876c:	0800878f 	.word	0x0800878f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008770:	f7fd fdfc 	bl	800636c <HAL_RCC_GetPCLK1Freq>
 8008774:	61b8      	str	r0, [r7, #24]
        break;
 8008776:	e013      	b.n	80087a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008778:	f7fd fe0c 	bl	8006394 <HAL_RCC_GetPCLK2Freq>
 800877c:	61b8      	str	r0, [r7, #24]
        break;
 800877e:	e00f      	b.n	80087a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008780:	4b1d      	ldr	r3, [pc, #116]	; (80087f8 <UART_SetConfig+0x4c0>)
 8008782:	61bb      	str	r3, [r7, #24]
        break;
 8008784:	e00c      	b.n	80087a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008786:	f7fd fd03 	bl	8006190 <HAL_RCC_GetSysClockFreq>
 800878a:	61b8      	str	r0, [r7, #24]
        break;
 800878c:	e008      	b.n	80087a0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800878e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008792:	61bb      	str	r3, [r7, #24]
        break;
 8008794:	e004      	b.n	80087a0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8008796:	2300      	movs	r3, #0
 8008798:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	77bb      	strb	r3, [r7, #30]
        break;
 800879e:	bf00      	nop
    }

    if (pclk != 0U)
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d018      	beq.n	80087d8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	085a      	lsrs	r2, r3, #1
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	441a      	add	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	2b0f      	cmp	r3, #15
 80087c0:	d908      	bls.n	80087d4 <UART_SetConfig+0x49c>
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087c8:	d204      	bcs.n	80087d4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	60da      	str	r2, [r3, #12]
 80087d2:	e001      	b.n	80087d8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80087e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3720      	adds	r7, #32
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	40007c00 	.word	0x40007c00
 80087f4:	40023800 	.word	0x40023800
 80087f8:	00f42400 	.word	0x00f42400

080087fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00a      	beq.n	8008826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882a:	f003 0302 	and.w	r3, r3, #2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00a      	beq.n	800886a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	f003 0308 	and.w	r3, r3, #8
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00a      	beq.n	800888c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	f003 0310 	and.w	r3, r3, #16
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00a      	beq.n	80088ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	f003 0320 	and.w	r3, r3, #32
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d01a      	beq.n	8008912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088fa:	d10a      	bne.n	8008912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	430a      	orrs	r2, r1
 8008910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00a      	beq.n	8008934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	430a      	orrs	r2, r1
 8008932:	605a      	str	r2, [r3, #4]
  }
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af02      	add	r7, sp, #8
 8008946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008950:	f7f9 f96e 	bl	8001c30 <HAL_GetTick>
 8008954:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0308 	and.w	r3, r3, #8
 8008960:	2b08      	cmp	r3, #8
 8008962:	d10e      	bne.n	8008982 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f817 	bl	80089a6 <UART_WaitOnFlagUntilTimeout>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e00d      	b.n	800899e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2220      	movs	r2, #32
 8008986:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2220      	movs	r2, #32
 800898c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b084      	sub	sp, #16
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	603b      	str	r3, [r7, #0]
 80089b2:	4613      	mov	r3, r2
 80089b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b6:	e05e      	b.n	8008a76 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089be:	d05a      	beq.n	8008a76 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089c0:	f7f9 f936 	bl	8001c30 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d302      	bcc.n	80089d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d11b      	bne.n	8008a0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	689a      	ldr	r2, [r3, #8]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0201 	bic.w	r2, r2, #1
 80089f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2220      	movs	r2, #32
 80089fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2220      	movs	r2, #32
 8008a00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e043      	b.n	8008a96 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d02c      	beq.n	8008a76 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a2a:	d124      	bne.n	8008a76 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008a44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	689a      	ldr	r2, [r3, #8]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f022 0201 	bic.w	r2, r2, #1
 8008a54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2220      	movs	r2, #32
 8008a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e00f      	b.n	8008a96 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	69da      	ldr	r2, [r3, #28]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	4013      	ands	r3, r2
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	bf0c      	ite	eq
 8008a86:	2301      	moveq	r3, #1
 8008a88:	2300      	movne	r3, #0
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	79fb      	ldrb	r3, [r7, #7]
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d091      	beq.n	80089b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
	...

08008aa0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	88fa      	ldrh	r2, [r7, #6]
 8008ab8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2222      	movs	r2, #34	; 0x22
 8008ac8:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d02b      	beq.n	8008b2a <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad6:	4a25      	ldr	r2, [pc, #148]	; (8008b6c <UART_Start_Receive_DMA+0xcc>)
 8008ad8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ade:	4a24      	ldr	r2, [pc, #144]	; (8008b70 <UART_Start_Receive_DMA+0xd0>)
 8008ae0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ae6:	4a23      	ldr	r2, [pc, #140]	; (8008b74 <UART_Start_Receive_DMA+0xd4>)
 8008ae8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aee:	2200      	movs	r2, #0
 8008af0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3324      	adds	r3, #36	; 0x24
 8008afc:	4619      	mov	r1, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b02:	461a      	mov	r2, r3
 8008b04:	88fb      	ldrh	r3, [r7, #6]
 8008b06:	f7f9 fa83 	bl	8002010 <HAL_DMA_Start_IT>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00c      	beq.n	8008b2a <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2210      	movs	r2, #16
 8008b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2220      	movs	r2, #32
 8008b24:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e01c      	b.n	8008b64 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b40:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f042 0201 	orr.w	r2, r2, #1
 8008b50:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b60:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	08008c01 	.word	0x08008c01
 8008b70:	08008c95 	.word	0x08008c95
 8008b74:	08008ccd 	.word	0x08008ccd

08008b78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008b8e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2220      	movs	r2, #32
 8008b94:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b083      	sub	sp, #12
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008bb8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 0201 	bic.w	r2, r2, #1
 8008bc8:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d107      	bne.n	8008be2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0210 	bic.w	r2, r2, #16
 8008be0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2220      	movs	r2, #32
 8008be6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c16:	d02a      	beq.n	8008c6e <UART_DMAReceiveCplt+0x6e>
  {
    huart->RxXferCount = 0U;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c2e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689a      	ldr	r2, [r3, #8]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f022 0201 	bic.w	r2, r2, #1
 8008c3e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689a      	ldr	r2, [r3, #8]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c4e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2220      	movs	r2, #32
 8008c54:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d107      	bne.n	8008c6e <UART_DMAReceiveCplt+0x6e>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 0210 	bic.w	r2, r2, #16
 8008c6c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d107      	bne.n	8008c86 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	68f8      	ldr	r0, [r7, #12]
 8008c80:	f7ff fb4e 	bl	8008320 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c84:	e002      	b.n	8008c8c <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f7f8 f972 	bl	8000f70 <HAL_UART_RxCpltCallback>
}
 8008c8c:	bf00      	nop
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d109      	bne.n	8008cbe <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008cb0:	085b      	lsrs	r3, r3, #1
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f7ff fb32 	bl	8008320 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cbc:	e002      	b.n	8008cc4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f7ff fb1a 	bl	80082f8 <HAL_UART_RxHalfCpltCallback>
}
 8008cc4:	bf00      	nop
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b086      	sub	sp, #24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cde:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ce4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cf0:	2b80      	cmp	r3, #128	; 0x80
 8008cf2:	d109      	bne.n	8008d08 <UART_DMAError+0x3c>
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	2b21      	cmp	r3, #33	; 0x21
 8008cf8:	d106      	bne.n	8008d08 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008d02:	6978      	ldr	r0, [r7, #20]
 8008d04:	f7ff ff38 	bl	8008b78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d12:	2b40      	cmp	r3, #64	; 0x40
 8008d14:	d109      	bne.n	8008d2a <UART_DMAError+0x5e>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2b22      	cmp	r3, #34	; 0x22
 8008d1a:	d106      	bne.n	8008d2a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008d24:	6978      	ldr	r0, [r7, #20]
 8008d26:	f7ff ff3c 	bl	8008ba2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d30:	f043 0210 	orr.w	r2, r3, #16
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d3a:	6978      	ldr	r0, [r7, #20]
 8008d3c:	f7ff fae6 	bl	800830c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d40:	bf00      	nop
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f7ff fad0 	bl	800830c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d6c:	bf00      	nop
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d8a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff faa3 	bl	80082e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d9e:	bf00      	nop
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008da8:	b084      	sub	sp, #16
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	f107 001c 	add.w	r0, r7, #28
 8008db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d120      	bne.n	8008e02 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	68da      	ldr	r2, [r3, #12]
 8008dd0:	4b20      	ldr	r3, [pc, #128]	; (8008e54 <USB_CoreInit+0xac>)
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d105      	bne.n	8008df6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa5a 	bl	80092b0 <USB_CoreReset>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	73fb      	strb	r3, [r7, #15]
 8008e00:	e010      	b.n	8008e24 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fa4e 	bl	80092b0 <USB_CoreReset>
 8008e14:	4603      	mov	r3, r0
 8008e16:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d10b      	bne.n	8008e42 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f043 0206 	orr.w	r2, r3, #6
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f043 0220 	orr.w	r2, r3, #32
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e4e:	b004      	add	sp, #16
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	ffbdffbf 	.word	0xffbdffbf

08008e58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f023 0201 	bic.w	r2, r3, #1
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	370c      	adds	r7, #12
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b082      	sub	sp, #8
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	460b      	mov	r3, r1
 8008e84:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008e92:	78fb      	ldrb	r3, [r7, #3]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d106      	bne.n	8008ea6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	60da      	str	r2, [r3, #12]
 8008ea4:	e00b      	b.n	8008ebe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ea6:	78fb      	ldrb	r3, [r7, #3]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d106      	bne.n	8008eba <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	60da      	str	r2, [r3, #12]
 8008eb8:	e001      	b.n	8008ebe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e003      	b.n	8008ec6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008ebe:	2032      	movs	r0, #50	; 0x32
 8008ec0:	f7f8 fec2 	bl	8001c48 <HAL_Delay>

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b086      	sub	sp, #24
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008eea:	2300      	movs	r3, #0
 8008eec:	613b      	str	r3, [r7, #16]
 8008eee:	e009      	b.n	8008f04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	3340      	adds	r3, #64	; 0x40
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	2200      	movs	r2, #0
 8008efc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	3301      	adds	r3, #1
 8008f02:	613b      	str	r3, [r7, #16]
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	2b0e      	cmp	r3, #14
 8008f08:	d9f2      	bls.n	8008ef0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d11c      	bne.n	8008f4a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f1e:	f043 0302 	orr.w	r3, r3, #2
 8008f22:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f28:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	e005      	b.n	8008f56 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	2300      	movs	r3, #0
 8008f60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f68:	4619      	mov	r1, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f70:	461a      	mov	r2, r3
 8008f72:	680b      	ldr	r3, [r1, #0]
 8008f74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d10c      	bne.n	8008f96 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d104      	bne.n	8008f8c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f82:	2100      	movs	r1, #0
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f959 	bl	800923c <USB_SetDevSpeed>
 8008f8a:	e018      	b.n	8008fbe <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f954 	bl	800923c <USB_SetDevSpeed>
 8008f94:	e013      	b.n	8008fbe <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f98:	2b03      	cmp	r3, #3
 8008f9a:	d10c      	bne.n	8008fb6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d104      	bne.n	8008fac <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f949 	bl	800923c <USB_SetDevSpeed>
 8008faa:	e008      	b.n	8008fbe <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008fac:	2101      	movs	r1, #1
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f944 	bl	800923c <USB_SetDevSpeed>
 8008fb4:	e003      	b.n	8008fbe <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008fb6:	2103      	movs	r1, #3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f93f 	bl	800923c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008fbe:	2110      	movs	r1, #16
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f8f3 	bl	80091ac <USB_FlushTxFifo>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d001      	beq.n	8008fd0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 f911 	bl	80091f8 <USB_FlushRxFifo>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	2300      	movs	r3, #0
 8008fea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffe:	461a      	mov	r2, r3
 8009000:	2300      	movs	r3, #0
 8009002:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009004:	2300      	movs	r3, #0
 8009006:	613b      	str	r3, [r7, #16]
 8009008:	e043      	b.n	8009092 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	015a      	lsls	r2, r3, #5
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	4413      	add	r3, r2
 8009012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800901c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009020:	d118      	bne.n	8009054 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10a      	bne.n	800903e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	015a      	lsls	r2, r3, #5
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	4413      	add	r3, r2
 8009030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009034:	461a      	mov	r2, r3
 8009036:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	e013      	b.n	8009066 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	4413      	add	r3, r2
 8009046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800904a:	461a      	mov	r2, r3
 800904c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009050:	6013      	str	r3, [r2, #0]
 8009052:	e008      	b.n	8009066 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	015a      	lsls	r2, r3, #5
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4413      	add	r3, r2
 800905c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009060:	461a      	mov	r2, r3
 8009062:	2300      	movs	r3, #0
 8009064:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	015a      	lsls	r2, r3, #5
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009072:	461a      	mov	r2, r3
 8009074:	2300      	movs	r3, #0
 8009076:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	015a      	lsls	r2, r3, #5
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	4413      	add	r3, r2
 8009080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009084:	461a      	mov	r2, r3
 8009086:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800908a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	3301      	adds	r3, #1
 8009090:	613b      	str	r3, [r7, #16]
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	429a      	cmp	r2, r3
 8009098:	d3b7      	bcc.n	800900a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800909a:	2300      	movs	r3, #0
 800909c:	613b      	str	r3, [r7, #16]
 800909e:	e043      	b.n	8009128 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090b6:	d118      	bne.n	80090ea <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10a      	bne.n	80090d4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ca:	461a      	mov	r2, r3
 80090cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090d0:	6013      	str	r3, [r2, #0]
 80090d2:	e013      	b.n	80090fc <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e0:	461a      	mov	r2, r3
 80090e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090e6:	6013      	str	r3, [r2, #0]
 80090e8:	e008      	b.n	80090fc <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	015a      	lsls	r2, r3, #5
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	4413      	add	r3, r2
 80090f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f6:	461a      	mov	r2, r3
 80090f8:	2300      	movs	r3, #0
 80090fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4413      	add	r3, r2
 8009104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009108:	461a      	mov	r2, r3
 800910a:	2300      	movs	r3, #0
 800910c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4413      	add	r3, r2
 8009116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911a:	461a      	mov	r2, r3
 800911c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009120:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	3301      	adds	r3, #1
 8009126:	613b      	str	r3, [r7, #16]
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	429a      	cmp	r2, r3
 800912e:	d3b7      	bcc.n	80090a0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800913e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009142:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009150:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009154:	2b00      	cmp	r3, #0
 8009156:	d105      	bne.n	8009164 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	f043 0210 	orr.w	r2, r3, #16
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	699a      	ldr	r2, [r3, #24]
 8009168:	4b0e      	ldr	r3, [pc, #56]	; (80091a4 <USB_DevInit+0x2d4>)
 800916a:	4313      	orrs	r3, r2
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009172:	2b00      	cmp	r3, #0
 8009174:	d005      	beq.n	8009182 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	f043 0208 	orr.w	r2, r3, #8
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009184:	2b01      	cmp	r3, #1
 8009186:	d105      	bne.n	8009194 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	699a      	ldr	r2, [r3, #24]
 800918c:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <USB_DevInit+0x2d8>)
 800918e:	4313      	orrs	r3, r2
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009194:	7dfb      	ldrb	r3, [r7, #23]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3718      	adds	r7, #24
 800919a:	46bd      	mov	sp, r7
 800919c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091a0:	b004      	add	sp, #16
 80091a2:	4770      	bx	lr
 80091a4:	803c3800 	.word	0x803c3800
 80091a8:	40000004 	.word	0x40000004

080091ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	019b      	lsls	r3, r3, #6
 80091be:	f043 0220 	orr.w	r2, r3, #32
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	3301      	adds	r3, #1
 80091ca:	60fb      	str	r3, [r7, #12]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4a09      	ldr	r2, [pc, #36]	; (80091f4 <USB_FlushTxFifo+0x48>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d901      	bls.n	80091d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e006      	b.n	80091e6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	f003 0320 	and.w	r3, r3, #32
 80091e0:	2b20      	cmp	r3, #32
 80091e2:	d0f0      	beq.n	80091c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	00030d40 	.word	0x00030d40

080091f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2210      	movs	r2, #16
 8009208:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	3301      	adds	r3, #1
 800920e:	60fb      	str	r3, [r7, #12]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4a09      	ldr	r2, [pc, #36]	; (8009238 <USB_FlushRxFifo+0x40>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d901      	bls.n	800921c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e006      	b.n	800922a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	f003 0310 	and.w	r3, r3, #16
 8009224:	2b10      	cmp	r3, #16
 8009226:	d0f0      	beq.n	800920a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	00030d40 	.word	0x00030d40

0800923c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	68f9      	ldr	r1, [r7, #12]
 8009258:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800925c:	4313      	orrs	r3, r2
 800925e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3714      	adds	r7, #20
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800926e:	b480      	push	{r7}
 8009270:	b085      	sub	sp, #20
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009288:	f023 0303 	bic.w	r3, r3, #3
 800928c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800929c:	f043 0302 	orr.w	r3, r3, #2
 80092a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b085      	sub	sp, #20
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80092b8:	2300      	movs	r3, #0
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3301      	adds	r3, #1
 80092c0:	60fb      	str	r3, [r7, #12]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	4a13      	ldr	r2, [pc, #76]	; (8009314 <USB_CoreReset+0x64>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d901      	bls.n	80092ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092ca:	2303      	movs	r3, #3
 80092cc:	e01b      	b.n	8009306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	daf2      	bge.n	80092bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	f043 0201 	orr.w	r2, r3, #1
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3301      	adds	r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	4a09      	ldr	r2, [pc, #36]	; (8009314 <USB_CoreReset+0x64>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d901      	bls.n	80092f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e006      	b.n	8009306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	f003 0301 	and.w	r3, r3, #1
 8009300:	2b01      	cmp	r3, #1
 8009302:	d0f0      	beq.n	80092e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	00030d40 	.word	0x00030d40

08009318 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800931e:	4b8d      	ldr	r3, [pc, #564]	; (8009554 <MX_LWIP_Init+0x23c>)
 8009320:	22c0      	movs	r2, #192	; 0xc0
 8009322:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009324:	4b8b      	ldr	r3, [pc, #556]	; (8009554 <MX_LWIP_Init+0x23c>)
 8009326:	22a8      	movs	r2, #168	; 0xa8
 8009328:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800932a:	4b8a      	ldr	r3, [pc, #552]	; (8009554 <MX_LWIP_Init+0x23c>)
 800932c:	2201      	movs	r2, #1
 800932e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8009330:	4b88      	ldr	r3, [pc, #544]	; (8009554 <MX_LWIP_Init+0x23c>)
 8009332:	226f      	movs	r2, #111	; 0x6f
 8009334:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009336:	4b88      	ldr	r3, [pc, #544]	; (8009558 <MX_LWIP_Init+0x240>)
 8009338:	22ff      	movs	r2, #255	; 0xff
 800933a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800933c:	4b86      	ldr	r3, [pc, #536]	; (8009558 <MX_LWIP_Init+0x240>)
 800933e:	22ff      	movs	r2, #255	; 0xff
 8009340:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009342:	4b85      	ldr	r3, [pc, #532]	; (8009558 <MX_LWIP_Init+0x240>)
 8009344:	22ff      	movs	r2, #255	; 0xff
 8009346:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009348:	4b83      	ldr	r3, [pc, #524]	; (8009558 <MX_LWIP_Init+0x240>)
 800934a:	2200      	movs	r2, #0
 800934c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800934e:	4b83      	ldr	r3, [pc, #524]	; (800955c <MX_LWIP_Init+0x244>)
 8009350:	22c0      	movs	r2, #192	; 0xc0
 8009352:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009354:	4b81      	ldr	r3, [pc, #516]	; (800955c <MX_LWIP_Init+0x244>)
 8009356:	22a8      	movs	r2, #168	; 0xa8
 8009358:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800935a:	4b80      	ldr	r3, [pc, #512]	; (800955c <MX_LWIP_Init+0x244>)
 800935c:	2201      	movs	r2, #1
 800935e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009360:	4b7e      	ldr	r3, [pc, #504]	; (800955c <MX_LWIP_Init+0x244>)
 8009362:	2201      	movs	r2, #1
 8009364:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8009366:	f000 fcd3 	bl	8009d10 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800936a:	4b7a      	ldr	r3, [pc, #488]	; (8009554 <MX_LWIP_Init+0x23c>)
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	061a      	lsls	r2, r3, #24
 8009370:	4b78      	ldr	r3, [pc, #480]	; (8009554 <MX_LWIP_Init+0x23c>)
 8009372:	785b      	ldrb	r3, [r3, #1]
 8009374:	041b      	lsls	r3, r3, #16
 8009376:	431a      	orrs	r2, r3
 8009378:	4b76      	ldr	r3, [pc, #472]	; (8009554 <MX_LWIP_Init+0x23c>)
 800937a:	789b      	ldrb	r3, [r3, #2]
 800937c:	021b      	lsls	r3, r3, #8
 800937e:	4313      	orrs	r3, r2
 8009380:	4a74      	ldr	r2, [pc, #464]	; (8009554 <MX_LWIP_Init+0x23c>)
 8009382:	78d2      	ldrb	r2, [r2, #3]
 8009384:	4313      	orrs	r3, r2
 8009386:	061a      	lsls	r2, r3, #24
 8009388:	4b72      	ldr	r3, [pc, #456]	; (8009554 <MX_LWIP_Init+0x23c>)
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	0619      	lsls	r1, r3, #24
 800938e:	4b71      	ldr	r3, [pc, #452]	; (8009554 <MX_LWIP_Init+0x23c>)
 8009390:	785b      	ldrb	r3, [r3, #1]
 8009392:	041b      	lsls	r3, r3, #16
 8009394:	4319      	orrs	r1, r3
 8009396:	4b6f      	ldr	r3, [pc, #444]	; (8009554 <MX_LWIP_Init+0x23c>)
 8009398:	789b      	ldrb	r3, [r3, #2]
 800939a:	021b      	lsls	r3, r3, #8
 800939c:	430b      	orrs	r3, r1
 800939e:	496d      	ldr	r1, [pc, #436]	; (8009554 <MX_LWIP_Init+0x23c>)
 80093a0:	78c9      	ldrb	r1, [r1, #3]
 80093a2:	430b      	orrs	r3, r1
 80093a4:	021b      	lsls	r3, r3, #8
 80093a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093aa:	431a      	orrs	r2, r3
 80093ac:	4b69      	ldr	r3, [pc, #420]	; (8009554 <MX_LWIP_Init+0x23c>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	0619      	lsls	r1, r3, #24
 80093b2:	4b68      	ldr	r3, [pc, #416]	; (8009554 <MX_LWIP_Init+0x23c>)
 80093b4:	785b      	ldrb	r3, [r3, #1]
 80093b6:	041b      	lsls	r3, r3, #16
 80093b8:	4319      	orrs	r1, r3
 80093ba:	4b66      	ldr	r3, [pc, #408]	; (8009554 <MX_LWIP_Init+0x23c>)
 80093bc:	789b      	ldrb	r3, [r3, #2]
 80093be:	021b      	lsls	r3, r3, #8
 80093c0:	430b      	orrs	r3, r1
 80093c2:	4964      	ldr	r1, [pc, #400]	; (8009554 <MX_LWIP_Init+0x23c>)
 80093c4:	78c9      	ldrb	r1, [r1, #3]
 80093c6:	430b      	orrs	r3, r1
 80093c8:	0a1b      	lsrs	r3, r3, #8
 80093ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80093ce:	431a      	orrs	r2, r3
 80093d0:	4b60      	ldr	r3, [pc, #384]	; (8009554 <MX_LWIP_Init+0x23c>)
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	0619      	lsls	r1, r3, #24
 80093d6:	4b5f      	ldr	r3, [pc, #380]	; (8009554 <MX_LWIP_Init+0x23c>)
 80093d8:	785b      	ldrb	r3, [r3, #1]
 80093da:	041b      	lsls	r3, r3, #16
 80093dc:	4319      	orrs	r1, r3
 80093de:	4b5d      	ldr	r3, [pc, #372]	; (8009554 <MX_LWIP_Init+0x23c>)
 80093e0:	789b      	ldrb	r3, [r3, #2]
 80093e2:	021b      	lsls	r3, r3, #8
 80093e4:	430b      	orrs	r3, r1
 80093e6:	495b      	ldr	r1, [pc, #364]	; (8009554 <MX_LWIP_Init+0x23c>)
 80093e8:	78c9      	ldrb	r1, [r1, #3]
 80093ea:	430b      	orrs	r3, r1
 80093ec:	0e1b      	lsrs	r3, r3, #24
 80093ee:	4313      	orrs	r3, r2
 80093f0:	4a5b      	ldr	r2, [pc, #364]	; (8009560 <MX_LWIP_Init+0x248>)
 80093f2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80093f4:	4b58      	ldr	r3, [pc, #352]	; (8009558 <MX_LWIP_Init+0x240>)
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	061a      	lsls	r2, r3, #24
 80093fa:	4b57      	ldr	r3, [pc, #348]	; (8009558 <MX_LWIP_Init+0x240>)
 80093fc:	785b      	ldrb	r3, [r3, #1]
 80093fe:	041b      	lsls	r3, r3, #16
 8009400:	431a      	orrs	r2, r3
 8009402:	4b55      	ldr	r3, [pc, #340]	; (8009558 <MX_LWIP_Init+0x240>)
 8009404:	789b      	ldrb	r3, [r3, #2]
 8009406:	021b      	lsls	r3, r3, #8
 8009408:	4313      	orrs	r3, r2
 800940a:	4a53      	ldr	r2, [pc, #332]	; (8009558 <MX_LWIP_Init+0x240>)
 800940c:	78d2      	ldrb	r2, [r2, #3]
 800940e:	4313      	orrs	r3, r2
 8009410:	061a      	lsls	r2, r3, #24
 8009412:	4b51      	ldr	r3, [pc, #324]	; (8009558 <MX_LWIP_Init+0x240>)
 8009414:	781b      	ldrb	r3, [r3, #0]
 8009416:	0619      	lsls	r1, r3, #24
 8009418:	4b4f      	ldr	r3, [pc, #316]	; (8009558 <MX_LWIP_Init+0x240>)
 800941a:	785b      	ldrb	r3, [r3, #1]
 800941c:	041b      	lsls	r3, r3, #16
 800941e:	4319      	orrs	r1, r3
 8009420:	4b4d      	ldr	r3, [pc, #308]	; (8009558 <MX_LWIP_Init+0x240>)
 8009422:	789b      	ldrb	r3, [r3, #2]
 8009424:	021b      	lsls	r3, r3, #8
 8009426:	430b      	orrs	r3, r1
 8009428:	494b      	ldr	r1, [pc, #300]	; (8009558 <MX_LWIP_Init+0x240>)
 800942a:	78c9      	ldrb	r1, [r1, #3]
 800942c:	430b      	orrs	r3, r1
 800942e:	021b      	lsls	r3, r3, #8
 8009430:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009434:	431a      	orrs	r2, r3
 8009436:	4b48      	ldr	r3, [pc, #288]	; (8009558 <MX_LWIP_Init+0x240>)
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	0619      	lsls	r1, r3, #24
 800943c:	4b46      	ldr	r3, [pc, #280]	; (8009558 <MX_LWIP_Init+0x240>)
 800943e:	785b      	ldrb	r3, [r3, #1]
 8009440:	041b      	lsls	r3, r3, #16
 8009442:	4319      	orrs	r1, r3
 8009444:	4b44      	ldr	r3, [pc, #272]	; (8009558 <MX_LWIP_Init+0x240>)
 8009446:	789b      	ldrb	r3, [r3, #2]
 8009448:	021b      	lsls	r3, r3, #8
 800944a:	430b      	orrs	r3, r1
 800944c:	4942      	ldr	r1, [pc, #264]	; (8009558 <MX_LWIP_Init+0x240>)
 800944e:	78c9      	ldrb	r1, [r1, #3]
 8009450:	430b      	orrs	r3, r1
 8009452:	0a1b      	lsrs	r3, r3, #8
 8009454:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009458:	431a      	orrs	r2, r3
 800945a:	4b3f      	ldr	r3, [pc, #252]	; (8009558 <MX_LWIP_Init+0x240>)
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	0619      	lsls	r1, r3, #24
 8009460:	4b3d      	ldr	r3, [pc, #244]	; (8009558 <MX_LWIP_Init+0x240>)
 8009462:	785b      	ldrb	r3, [r3, #1]
 8009464:	041b      	lsls	r3, r3, #16
 8009466:	4319      	orrs	r1, r3
 8009468:	4b3b      	ldr	r3, [pc, #236]	; (8009558 <MX_LWIP_Init+0x240>)
 800946a:	789b      	ldrb	r3, [r3, #2]
 800946c:	021b      	lsls	r3, r3, #8
 800946e:	430b      	orrs	r3, r1
 8009470:	4939      	ldr	r1, [pc, #228]	; (8009558 <MX_LWIP_Init+0x240>)
 8009472:	78c9      	ldrb	r1, [r1, #3]
 8009474:	430b      	orrs	r3, r1
 8009476:	0e1b      	lsrs	r3, r3, #24
 8009478:	4313      	orrs	r3, r2
 800947a:	4a3a      	ldr	r2, [pc, #232]	; (8009564 <MX_LWIP_Init+0x24c>)
 800947c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800947e:	4b37      	ldr	r3, [pc, #220]	; (800955c <MX_LWIP_Init+0x244>)
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	061a      	lsls	r2, r3, #24
 8009484:	4b35      	ldr	r3, [pc, #212]	; (800955c <MX_LWIP_Init+0x244>)
 8009486:	785b      	ldrb	r3, [r3, #1]
 8009488:	041b      	lsls	r3, r3, #16
 800948a:	431a      	orrs	r2, r3
 800948c:	4b33      	ldr	r3, [pc, #204]	; (800955c <MX_LWIP_Init+0x244>)
 800948e:	789b      	ldrb	r3, [r3, #2]
 8009490:	021b      	lsls	r3, r3, #8
 8009492:	4313      	orrs	r3, r2
 8009494:	4a31      	ldr	r2, [pc, #196]	; (800955c <MX_LWIP_Init+0x244>)
 8009496:	78d2      	ldrb	r2, [r2, #3]
 8009498:	4313      	orrs	r3, r2
 800949a:	061a      	lsls	r2, r3, #24
 800949c:	4b2f      	ldr	r3, [pc, #188]	; (800955c <MX_LWIP_Init+0x244>)
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	0619      	lsls	r1, r3, #24
 80094a2:	4b2e      	ldr	r3, [pc, #184]	; (800955c <MX_LWIP_Init+0x244>)
 80094a4:	785b      	ldrb	r3, [r3, #1]
 80094a6:	041b      	lsls	r3, r3, #16
 80094a8:	4319      	orrs	r1, r3
 80094aa:	4b2c      	ldr	r3, [pc, #176]	; (800955c <MX_LWIP_Init+0x244>)
 80094ac:	789b      	ldrb	r3, [r3, #2]
 80094ae:	021b      	lsls	r3, r3, #8
 80094b0:	430b      	orrs	r3, r1
 80094b2:	492a      	ldr	r1, [pc, #168]	; (800955c <MX_LWIP_Init+0x244>)
 80094b4:	78c9      	ldrb	r1, [r1, #3]
 80094b6:	430b      	orrs	r3, r1
 80094b8:	021b      	lsls	r3, r3, #8
 80094ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094be:	431a      	orrs	r2, r3
 80094c0:	4b26      	ldr	r3, [pc, #152]	; (800955c <MX_LWIP_Init+0x244>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	0619      	lsls	r1, r3, #24
 80094c6:	4b25      	ldr	r3, [pc, #148]	; (800955c <MX_LWIP_Init+0x244>)
 80094c8:	785b      	ldrb	r3, [r3, #1]
 80094ca:	041b      	lsls	r3, r3, #16
 80094cc:	4319      	orrs	r1, r3
 80094ce:	4b23      	ldr	r3, [pc, #140]	; (800955c <MX_LWIP_Init+0x244>)
 80094d0:	789b      	ldrb	r3, [r3, #2]
 80094d2:	021b      	lsls	r3, r3, #8
 80094d4:	430b      	orrs	r3, r1
 80094d6:	4921      	ldr	r1, [pc, #132]	; (800955c <MX_LWIP_Init+0x244>)
 80094d8:	78c9      	ldrb	r1, [r1, #3]
 80094da:	430b      	orrs	r3, r1
 80094dc:	0a1b      	lsrs	r3, r3, #8
 80094de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80094e2:	431a      	orrs	r2, r3
 80094e4:	4b1d      	ldr	r3, [pc, #116]	; (800955c <MX_LWIP_Init+0x244>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	0619      	lsls	r1, r3, #24
 80094ea:	4b1c      	ldr	r3, [pc, #112]	; (800955c <MX_LWIP_Init+0x244>)
 80094ec:	785b      	ldrb	r3, [r3, #1]
 80094ee:	041b      	lsls	r3, r3, #16
 80094f0:	4319      	orrs	r1, r3
 80094f2:	4b1a      	ldr	r3, [pc, #104]	; (800955c <MX_LWIP_Init+0x244>)
 80094f4:	789b      	ldrb	r3, [r3, #2]
 80094f6:	021b      	lsls	r3, r3, #8
 80094f8:	430b      	orrs	r3, r1
 80094fa:	4918      	ldr	r1, [pc, #96]	; (800955c <MX_LWIP_Init+0x244>)
 80094fc:	78c9      	ldrb	r1, [r1, #3]
 80094fe:	430b      	orrs	r3, r1
 8009500:	0e1b      	lsrs	r3, r3, #24
 8009502:	4313      	orrs	r3, r2
 8009504:	4a18      	ldr	r2, [pc, #96]	; (8009568 <MX_LWIP_Init+0x250>)
 8009506:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009508:	4b18      	ldr	r3, [pc, #96]	; (800956c <MX_LWIP_Init+0x254>)
 800950a:	9302      	str	r3, [sp, #8]
 800950c:	4b18      	ldr	r3, [pc, #96]	; (8009570 <MX_LWIP_Init+0x258>)
 800950e:	9301      	str	r3, [sp, #4]
 8009510:	2300      	movs	r3, #0
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	4b14      	ldr	r3, [pc, #80]	; (8009568 <MX_LWIP_Init+0x250>)
 8009516:	4a13      	ldr	r2, [pc, #76]	; (8009564 <MX_LWIP_Init+0x24c>)
 8009518:	4911      	ldr	r1, [pc, #68]	; (8009560 <MX_LWIP_Init+0x248>)
 800951a:	4816      	ldr	r0, [pc, #88]	; (8009574 <MX_LWIP_Init+0x25c>)
 800951c:	f001 f8ae 	bl	800a67c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009520:	4814      	ldr	r0, [pc, #80]	; (8009574 <MX_LWIP_Init+0x25c>)
 8009522:	f001 fa5d 	bl	800a9e0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009526:	4b13      	ldr	r3, [pc, #76]	; (8009574 <MX_LWIP_Init+0x25c>)
 8009528:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800952c:	089b      	lsrs	r3, r3, #2
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b00      	cmp	r3, #0
 8009536:	d003      	beq.n	8009540 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009538:	480e      	ldr	r0, [pc, #56]	; (8009574 <MX_LWIP_Init+0x25c>)
 800953a:	f001 fa61 	bl	800aa00 <netif_set_up>
 800953e:	e002      	b.n	8009546 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009540:	480c      	ldr	r0, [pc, #48]	; (8009574 <MX_LWIP_Init+0x25c>)
 8009542:	f001 fac9 	bl	800aad8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8009546:	490c      	ldr	r1, [pc, #48]	; (8009578 <MX_LWIP_Init+0x260>)
 8009548:	480a      	ldr	r0, [pc, #40]	; (8009574 <MX_LWIP_Init+0x25c>)
 800954a:	f001 faf7 	bl	800ab3c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800954e:	bf00      	nop
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	20000be0 	.word	0x20000be0
 8009558:	20000bdc 	.word	0x20000bdc
 800955c:	20000ba0 	.word	0x20000ba0
 8009560:	20000bd8 	.word	0x20000bd8
 8009564:	20000be4 	.word	0x20000be4
 8009568:	20000be8 	.word	0x20000be8
 800956c:	0801389d 	.word	0x0801389d
 8009570:	08009b3d 	.word	0x08009b3d
 8009574:	20000ba4 	.word	0x20000ba4
 8009578:	08009ba9 	.word	0x08009ba9

0800957c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b08e      	sub	sp, #56	; 0x38
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009588:	2200      	movs	r2, #0
 800958a:	601a      	str	r2, [r3, #0]
 800958c:	605a      	str	r2, [r3, #4]
 800958e:	609a      	str	r2, [r3, #8]
 8009590:	60da      	str	r2, [r3, #12]
 8009592:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a52      	ldr	r2, [pc, #328]	; (80096e4 <HAL_ETH_MspInit+0x168>)
 800959a:	4293      	cmp	r3, r2
 800959c:	f040 809e 	bne.w	80096dc <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80095a0:	4b51      	ldr	r3, [pc, #324]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 80095a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a4:	4a50      	ldr	r2, [pc, #320]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 80095a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80095aa:	6313      	str	r3, [r2, #48]	; 0x30
 80095ac:	4b4e      	ldr	r3, [pc, #312]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 80095ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095b4:	623b      	str	r3, [r7, #32]
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	4b4b      	ldr	r3, [pc, #300]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 80095ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095bc:	4a4a      	ldr	r2, [pc, #296]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 80095be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80095c2:	6313      	str	r3, [r2, #48]	; 0x30
 80095c4:	4b48      	ldr	r3, [pc, #288]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 80095c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095cc:	61fb      	str	r3, [r7, #28]
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	4b45      	ldr	r3, [pc, #276]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 80095d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d4:	4a44      	ldr	r2, [pc, #272]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 80095d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80095da:	6313      	str	r3, [r2, #48]	; 0x30
 80095dc:	4b42      	ldr	r3, [pc, #264]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 80095de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095e4:	61bb      	str	r3, [r7, #24]
 80095e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80095e8:	4b3f      	ldr	r3, [pc, #252]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 80095ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ec:	4a3e      	ldr	r2, [pc, #248]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 80095ee:	f043 0304 	orr.w	r3, r3, #4
 80095f2:	6313      	str	r3, [r2, #48]	; 0x30
 80095f4:	4b3c      	ldr	r3, [pc, #240]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 80095f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f8:	f003 0304 	and.w	r3, r3, #4
 80095fc:	617b      	str	r3, [r7, #20]
 80095fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009600:	4b39      	ldr	r3, [pc, #228]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 8009602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009604:	4a38      	ldr	r2, [pc, #224]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 8009606:	f043 0301 	orr.w	r3, r3, #1
 800960a:	6313      	str	r3, [r2, #48]	; 0x30
 800960c:	4b36      	ldr	r3, [pc, #216]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 800960e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009610:	f003 0301 	and.w	r3, r3, #1
 8009614:	613b      	str	r3, [r7, #16]
 8009616:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009618:	4b33      	ldr	r3, [pc, #204]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 800961a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961c:	4a32      	ldr	r2, [pc, #200]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 800961e:	f043 0302 	orr.w	r3, r3, #2
 8009622:	6313      	str	r3, [r2, #48]	; 0x30
 8009624:	4b30      	ldr	r3, [pc, #192]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 8009626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009628:	f003 0302 	and.w	r3, r3, #2
 800962c:	60fb      	str	r3, [r7, #12]
 800962e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009630:	4b2d      	ldr	r3, [pc, #180]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 8009632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009634:	4a2c      	ldr	r2, [pc, #176]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 8009636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800963a:	6313      	str	r3, [r2, #48]	; 0x30
 800963c:	4b2a      	ldr	r3, [pc, #168]	; (80096e8 <HAL_ETH_MspInit+0x16c>)
 800963e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009644:	60bb      	str	r3, [r7, #8]
 8009646:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009648:	2332      	movs	r3, #50	; 0x32
 800964a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800964c:	2302      	movs	r3, #2
 800964e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009650:	2300      	movs	r3, #0
 8009652:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009654:	2303      	movs	r3, #3
 8009656:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009658:	230b      	movs	r3, #11
 800965a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800965c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009660:	4619      	mov	r1, r3
 8009662:	4822      	ldr	r0, [pc, #136]	; (80096ec <HAL_ETH_MspInit+0x170>)
 8009664:	f7fa f9d4 	bl	8003a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009668:	2386      	movs	r3, #134	; 0x86
 800966a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800966c:	2302      	movs	r3, #2
 800966e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009670:	2300      	movs	r3, #0
 8009672:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009674:	2303      	movs	r3, #3
 8009676:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009678:	230b      	movs	r3, #11
 800967a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800967c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009680:	4619      	mov	r1, r3
 8009682:	481b      	ldr	r0, [pc, #108]	; (80096f0 <HAL_ETH_MspInit+0x174>)
 8009684:	f7fa f9c4 	bl	8003a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8009688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800968e:	2302      	movs	r3, #2
 8009690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009692:	2300      	movs	r3, #0
 8009694:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009696:	2303      	movs	r3, #3
 8009698:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800969a:	230b      	movs	r3, #11
 800969c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800969e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096a2:	4619      	mov	r1, r3
 80096a4:	4813      	ldr	r0, [pc, #76]	; (80096f4 <HAL_ETH_MspInit+0x178>)
 80096a6:	f7fa f9b3 	bl	8003a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80096aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80096ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096b0:	2302      	movs	r3, #2
 80096b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096b4:	2300      	movs	r3, #0
 80096b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096b8:	2303      	movs	r3, #3
 80096ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80096bc:	230b      	movs	r3, #11
 80096be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80096c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096c4:	4619      	mov	r1, r3
 80096c6:	480c      	ldr	r0, [pc, #48]	; (80096f8 <HAL_ETH_MspInit+0x17c>)
 80096c8:	f7fa f9a2 	bl	8003a10 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80096cc:	2200      	movs	r2, #0
 80096ce:	2100      	movs	r1, #0
 80096d0:	203d      	movs	r0, #61	; 0x3d
 80096d2:	f7f8 fbb8 	bl	8001e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80096d6:	203d      	movs	r0, #61	; 0x3d
 80096d8:	f7f8 fbd1 	bl	8001e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80096dc:	bf00      	nop
 80096de:	3738      	adds	r7, #56	; 0x38
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	40028000 	.word	0x40028000
 80096e8:	40023800 	.word	0x40023800
 80096ec:	40020800 	.word	0x40020800
 80096f0:	40020000 	.word	0x40020000
 80096f4:	40020400 	.word	0x40020400
 80096f8:	40021800 	.word	0x40021800

080096fc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8009704:	2300      	movs	r3, #0
 8009706:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009708:	4b4d      	ldr	r3, [pc, #308]	; (8009840 <low_level_init+0x144>)
 800970a:	4a4e      	ldr	r2, [pc, #312]	; (8009844 <low_level_init+0x148>)
 800970c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800970e:	4b4c      	ldr	r3, [pc, #304]	; (8009840 <low_level_init+0x144>)
 8009710:	2201      	movs	r2, #1
 8009712:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8009714:	4b4a      	ldr	r3, [pc, #296]	; (8009840 <low_level_init+0x144>)
 8009716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800971a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800971c:	4b48      	ldr	r3, [pc, #288]	; (8009840 <low_level_init+0x144>)
 800971e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009722:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8009724:	4b46      	ldr	r3, [pc, #280]	; (8009840 <low_level_init+0x144>)
 8009726:	2200      	movs	r2, #0
 8009728:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800972a:	2300      	movs	r3, #0
 800972c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800972e:	2380      	movs	r3, #128	; 0x80
 8009730:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8009732:	23e1      	movs	r3, #225	; 0xe1
 8009734:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009736:	2300      	movs	r3, #0
 8009738:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800973a:	2300      	movs	r3, #0
 800973c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800973e:	2300      	movs	r3, #0
 8009740:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009742:	4a3f      	ldr	r2, [pc, #252]	; (8009840 <low_level_init+0x144>)
 8009744:	f107 0308 	add.w	r3, r7, #8
 8009748:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800974a:	4b3d      	ldr	r3, [pc, #244]	; (8009840 <low_level_init+0x144>)
 800974c:	2200      	movs	r2, #0
 800974e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009750:	4b3b      	ldr	r3, [pc, #236]	; (8009840 <low_level_init+0x144>)
 8009752:	2200      	movs	r2, #0
 8009754:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8009756:	4b3a      	ldr	r3, [pc, #232]	; (8009840 <low_level_init+0x144>)
 8009758:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800975c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800975e:	4838      	ldr	r0, [pc, #224]	; (8009840 <low_level_init+0x144>)
 8009760:	f7f8 ffcc 	bl	80026fc <HAL_ETH_Init>
 8009764:	4603      	mov	r3, r0
 8009766:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8009768:	7dfb      	ldrb	r3, [r7, #23]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d108      	bne.n	8009780 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009774:	f043 0304 	orr.w	r3, r3, #4
 8009778:	b2da      	uxtb	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8009780:	2304      	movs	r3, #4
 8009782:	4a31      	ldr	r2, [pc, #196]	; (8009848 <low_level_init+0x14c>)
 8009784:	4931      	ldr	r1, [pc, #196]	; (800984c <low_level_init+0x150>)
 8009786:	482e      	ldr	r0, [pc, #184]	; (8009840 <low_level_init+0x144>)
 8009788:	f7f9 f952 	bl	8002a30 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800978c:	2304      	movs	r3, #4
 800978e:	4a30      	ldr	r2, [pc, #192]	; (8009850 <low_level_init+0x154>)
 8009790:	4930      	ldr	r1, [pc, #192]	; (8009854 <low_level_init+0x158>)
 8009792:	482b      	ldr	r0, [pc, #172]	; (8009840 <low_level_init+0x144>)
 8009794:	f7f9 f9b5 	bl	8002b02 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2206      	movs	r2, #6
 800979c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80097a0:	4b27      	ldr	r3, [pc, #156]	; (8009840 <low_level_init+0x144>)
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	781a      	ldrb	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80097ac:	4b24      	ldr	r3, [pc, #144]	; (8009840 <low_level_init+0x144>)
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	785a      	ldrb	r2, [r3, #1]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80097b8:	4b21      	ldr	r3, [pc, #132]	; (8009840 <low_level_init+0x144>)
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	789a      	ldrb	r2, [r3, #2]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80097c4:	4b1e      	ldr	r3, [pc, #120]	; (8009840 <low_level_init+0x144>)
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	78da      	ldrb	r2, [r3, #3]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80097d0:	4b1b      	ldr	r3, [pc, #108]	; (8009840 <low_level_init+0x144>)
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	791a      	ldrb	r2, [r3, #4]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80097dc:	4b18      	ldr	r3, [pc, #96]	; (8009840 <low_level_init+0x144>)
 80097de:	695b      	ldr	r3, [r3, #20]
 80097e0:	795a      	ldrb	r2, [r3, #5]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80097ee:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80097f6:	f043 030a 	orr.w	r3, r3, #10
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8009802:	480f      	ldr	r0, [pc, #60]	; (8009840 <low_level_init+0x144>)
 8009804:	f7f9 fcab 	bl	800315e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8009808:	f107 0310 	add.w	r3, r7, #16
 800980c:	461a      	mov	r2, r3
 800980e:	211d      	movs	r1, #29
 8009810:	480b      	ldr	r0, [pc, #44]	; (8009840 <low_level_init+0x144>)
 8009812:	f7f9 fbd6 	bl	8002fc2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	f043 030b 	orr.w	r3, r3, #11
 800981c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	461a      	mov	r2, r3
 8009822:	211d      	movs	r1, #29
 8009824:	4806      	ldr	r0, [pc, #24]	; (8009840 <low_level_init+0x144>)
 8009826:	f7f9 fc34 	bl	8003092 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800982a:	f107 0310 	add.w	r3, r7, #16
 800982e:	461a      	mov	r2, r3
 8009830:	211d      	movs	r1, #29
 8009832:	4803      	ldr	r0, [pc, #12]	; (8009840 <low_level_init+0x144>)
 8009834:	f7f9 fbc5 	bl	8002fc2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009838:	bf00      	nop
 800983a:	3718      	adds	r7, #24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	200024bc 	.word	0x200024bc
 8009844:	40028000 	.word	0x40028000
 8009848:	20002504 	.word	0x20002504
 800984c:	20000bec 	.word	0x20000bec
 8009850:	20000c6c 	.word	0x20000c6c
 8009854:	2000243c 	.word	0x2000243c

08009858 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08a      	sub	sp, #40	; 0x28
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8009862:	4b4b      	ldr	r3, [pc, #300]	; (8009990 <low_level_output+0x138>)
 8009864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8009876:	2300      	movs	r3, #0
 8009878:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800987a:	4b45      	ldr	r3, [pc, #276]	; (8009990 <low_level_output+0x138>)
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8009880:	2300      	movs	r3, #0
 8009882:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	623b      	str	r3, [r7, #32]
 8009888:	e05a      	b.n	8009940 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	da03      	bge.n	800989a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8009892:	23f8      	movs	r3, #248	; 0xf8
 8009894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8009898:	e05c      	b.n	8009954 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	895b      	ldrh	r3, [r3, #10]
 800989e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80098a0:	2300      	movs	r3, #0
 80098a2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80098a4:	e02f      	b.n	8009906 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80098a6:	69fa      	ldr	r2, [r7, #28]
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	18d0      	adds	r0, r2, r3
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	685a      	ldr	r2, [r3, #4]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	18d1      	adds	r1, r2, r3
 80098b4:	693a      	ldr	r2, [r7, #16]
 80098b6:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80098ba:	1a9b      	subs	r3, r3, r2
 80098bc:	461a      	mov	r2, r3
 80098be:	f00a f8f5 	bl	8013aac <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	da03      	bge.n	80098d8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80098d0:	23f8      	movs	r3, #248	; 0xf8
 80098d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80098d6:	e03d      	b.n	8009954 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	4413      	add	r3, r2
 80098e4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80098e8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80098f4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009900:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	4413      	add	r3, r2
 800990c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009910:	4293      	cmp	r3, r2
 8009912:	d8c8      	bhi.n	80098a6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009914:	69fa      	ldr	r2, [r7, #28]
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	18d0      	adds	r0, r2, r3
 800991a:	6a3b      	ldr	r3, [r7, #32]
 800991c:	685a      	ldr	r2, [r3, #4]
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	4413      	add	r3, r2
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	4619      	mov	r1, r3
 8009926:	f00a f8c1 	bl	8013aac <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800992a:	693a      	ldr	r2, [r7, #16]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4413      	add	r3, r2
 8009930:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8009932:	697a      	ldr	r2, [r7, #20]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	4413      	add	r3, r2
 8009938:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800993a:	6a3b      	ldr	r3, [r7, #32]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	623b      	str	r3, [r7, #32]
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1a1      	bne.n	800988a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8009946:	6979      	ldr	r1, [r7, #20]
 8009948:	4811      	ldr	r0, [pc, #68]	; (8009990 <low_level_output+0x138>)
 800994a:	f7f9 f947 	bl	8002bdc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800994e:	2300      	movs	r3, #0
 8009950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8009954:	4b0e      	ldr	r3, [pc, #56]	; (8009990 <low_level_output+0x138>)
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	f241 0314 	movw	r3, #4116	; 0x1014
 800995c:	4413      	add	r3, r2
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 0320 	and.w	r3, r3, #32
 8009964:	2b00      	cmp	r3, #0
 8009966:	d00d      	beq.n	8009984 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8009968:	4b09      	ldr	r3, [pc, #36]	; (8009990 <low_level_output+0x138>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	f241 0314 	movw	r3, #4116	; 0x1014
 8009970:	4413      	add	r3, r2
 8009972:	2220      	movs	r2, #32
 8009974:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8009976:	4b06      	ldr	r3, [pc, #24]	; (8009990 <low_level_output+0x138>)
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	f241 0304 	movw	r3, #4100	; 0x1004
 800997e:	4413      	add	r3, r2
 8009980:	2200      	movs	r2, #0
 8009982:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8009984:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009988:	4618      	mov	r0, r3
 800998a:	3728      	adds	r7, #40	; 0x28
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	200024bc 	.word	0x200024bc

08009994 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b08c      	sub	sp, #48	; 0x30
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800999c:	2300      	movs	r3, #0
 800999e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80099a0:	2300      	movs	r3, #0
 80099a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80099b0:	2300      	movs	r3, #0
 80099b2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80099b4:	2300      	movs	r3, #0
 80099b6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80099b8:	484f      	ldr	r0, [pc, #316]	; (8009af8 <low_level_input+0x164>)
 80099ba:	f7f9 f9f9 	bl	8002db0 <HAL_ETH_GetReceivedFrame>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <low_level_input+0x34>

    return NULL;
 80099c4:	2300      	movs	r3, #0
 80099c6:	e092      	b.n	8009aee <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80099c8:	4b4b      	ldr	r3, [pc, #300]	; (8009af8 <low_level_input+0x164>)
 80099ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099cc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80099ce:	4b4a      	ldr	r3, [pc, #296]	; (8009af8 <low_level_input+0x164>)
 80099d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80099d4:	89fb      	ldrh	r3, [r7, #14]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d007      	beq.n	80099ea <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80099da:	89fb      	ldrh	r3, [r7, #14]
 80099dc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80099e0:	4619      	mov	r1, r3
 80099e2:	2000      	movs	r0, #0
 80099e4:	f001 f926 	bl	800ac34 <pbuf_alloc>
 80099e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80099ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d04b      	beq.n	8009a88 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80099f0:	4b41      	ldr	r3, [pc, #260]	; (8009af8 <low_level_input+0x164>)
 80099f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80099f6:	2300      	movs	r3, #0
 80099f8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80099fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80099fe:	e040      	b.n	8009a82 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	895b      	ldrh	r3, [r3, #10]
 8009a04:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8009a06:	2300      	movs	r3, #0
 8009a08:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009a0a:	e021      	b.n	8009a50 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0e:	685a      	ldr	r2, [r3, #4]
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	18d0      	adds	r0, r2, r3
 8009a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	18d1      	adds	r1, r2, r3
 8009a1a:	69fa      	ldr	r2, [r7, #28]
 8009a1c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8009a20:	1a9b      	subs	r3, r3, r2
 8009a22:	461a      	mov	r2, r3
 8009a24:	f00a f842 	bl	8013aac <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8009a34:	69fa      	ldr	r2, [r7, #28]
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	4413      	add	r3, r2
 8009a3a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009a3e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8009a40:	69ba      	ldr	r2, [r7, #24]
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009a4a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	4413      	add	r3, r2
 8009a56:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d8d6      	bhi.n	8009a0c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8009a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	18d0      	adds	r0, r2, r3
 8009a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	f00a f81c 	bl	8013aac <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009a74:	69fa      	ldr	r2, [r7, #28]
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	4413      	add	r3, r2
 8009a7a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1bb      	bne.n	8009a00 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009a88:	4b1b      	ldr	r3, [pc, #108]	; (8009af8 <low_level_input+0x164>)
 8009a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009a8e:	2300      	movs	r3, #0
 8009a90:	613b      	str	r3, [r7, #16]
 8009a92:	e00b      	b.n	8009aac <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009a9c:	6a3b      	ldr	r3, [r7, #32]
 8009a9e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009aa0:	6a3b      	ldr	r3, [r7, #32]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	613b      	str	r3, [r7, #16]
 8009aac:	4b12      	ldr	r3, [pc, #72]	; (8009af8 <low_level_input+0x164>)
 8009aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab0:	693a      	ldr	r2, [r7, #16]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d3ee      	bcc.n	8009a94 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8009ab6:	4b10      	ldr	r3, [pc, #64]	; (8009af8 <low_level_input+0x164>)
 8009ab8:	2200      	movs	r2, #0
 8009aba:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8009abc:	4b0e      	ldr	r3, [pc, #56]	; (8009af8 <low_level_input+0x164>)
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	f241 0314 	movw	r3, #4116	; 0x1014
 8009ac4:	4413      	add	r3, r2
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00d      	beq.n	8009aec <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009ad0:	4b09      	ldr	r3, [pc, #36]	; (8009af8 <low_level_input+0x164>)
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	f241 0314 	movw	r3, #4116	; 0x1014
 8009ad8:	4413      	add	r3, r2
 8009ada:	2280      	movs	r2, #128	; 0x80
 8009adc:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8009ade:	4b06      	ldr	r3, [pc, #24]	; (8009af8 <low_level_input+0x164>)
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	f241 0308 	movw	r3, #4104	; 0x1008
 8009ae6:	4413      	add	r3, r2
 8009ae8:	2200      	movs	r2, #0
 8009aea:	601a      	str	r2, [r3, #0]
  }
  return p;
 8009aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3730      	adds	r7, #48	; 0x30
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	200024bc 	.word	0x200024bc

08009afc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7ff ff45 	bl	8009994 <low_level_input>
 8009b0a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d010      	beq.n	8009b34 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	6879      	ldr	r1, [r7, #4]
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	4798      	blx	r3
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8009b20:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d006      	beq.n	8009b36 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f001 fb67 	bl	800b1fc <pbuf_free>
    p = NULL;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60fb      	str	r3, [r7, #12]
 8009b32:	e000      	b.n	8009b36 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8009b34:	bf00      	nop
  }
}
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d106      	bne.n	8009b58 <ethernetif_init+0x1c>
 8009b4a:	4b0e      	ldr	r3, [pc, #56]	; (8009b84 <ethernetif_init+0x48>)
 8009b4c:	f240 2217 	movw	r2, #535	; 0x217
 8009b50:	490d      	ldr	r1, [pc, #52]	; (8009b88 <ethernetif_init+0x4c>)
 8009b52:	480e      	ldr	r0, [pc, #56]	; (8009b8c <ethernetif_init+0x50>)
 8009b54:	f009 ffc0 	bl	8013ad8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2273      	movs	r2, #115	; 0x73
 8009b5c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2274      	movs	r2, #116	; 0x74
 8009b64:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a09      	ldr	r2, [pc, #36]	; (8009b90 <ethernetif_init+0x54>)
 8009b6c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a08      	ldr	r2, [pc, #32]	; (8009b94 <ethernetif_init+0x58>)
 8009b72:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff fdc1 	bl	80096fc <low_level_init>

  return ERR_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	08014e18 	.word	0x08014e18
 8009b88:	08014e34 	.word	0x08014e34
 8009b8c:	08014e44 	.word	0x08014e44
 8009b90:	08011d61 	.word	0x08011d61
 8009b94:	08009859 	.word	0x08009859

08009b98 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009b9c:	f7f8 f848 	bl	8001c30 <HAL_GetTick>
 8009ba0:	4603      	mov	r3, r0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bbe:	089b      	lsrs	r3, r3, #2
 8009bc0:	f003 0301 	and.w	r3, r3, #1
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d05d      	beq.n	8009c86 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8009bca:	4b34      	ldr	r3, [pc, #208]	; (8009c9c <ethernetif_update_config+0xf4>)
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d03f      	beq.n	8009c52 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8009bd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	4830      	ldr	r0, [pc, #192]	; (8009c9c <ethernetif_update_config+0xf4>)
 8009bda:	f7f9 fa5a 	bl	8003092 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8009bde:	f7f8 f827 	bl	8001c30 <HAL_GetTick>
 8009be2:	4603      	mov	r3, r0
 8009be4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8009be6:	f107 0308 	add.w	r3, r7, #8
 8009bea:	461a      	mov	r2, r3
 8009bec:	2101      	movs	r1, #1
 8009bee:	482b      	ldr	r0, [pc, #172]	; (8009c9c <ethernetif_update_config+0xf4>)
 8009bf0:	f7f9 f9e7 	bl	8002fc2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8009bf4:	f7f8 f81c 	bl	8001c30 <HAL_GetTick>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c02:	d828      	bhi.n	8009c56 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	f003 0320 	and.w	r3, r3, #32
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0eb      	beq.n	8009be6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8009c0e:	f107 0308 	add.w	r3, r7, #8
 8009c12:	461a      	mov	r2, r3
 8009c14:	2110      	movs	r1, #16
 8009c16:	4821      	ldr	r0, [pc, #132]	; (8009c9c <ethernetif_update_config+0xf4>)
 8009c18:	f7f9 f9d3 	bl	8002fc2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f003 0304 	and.w	r3, r3, #4
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d004      	beq.n	8009c30 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8009c26:	4b1d      	ldr	r3, [pc, #116]	; (8009c9c <ethernetif_update_config+0xf4>)
 8009c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c2c:	60da      	str	r2, [r3, #12]
 8009c2e:	e002      	b.n	8009c36 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8009c30:	4b1a      	ldr	r3, [pc, #104]	; (8009c9c <ethernetif_update_config+0xf4>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	f003 0302 	and.w	r3, r3, #2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8009c40:	4b16      	ldr	r3, [pc, #88]	; (8009c9c <ethernetif_update_config+0xf4>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	609a      	str	r2, [r3, #8]
 8009c46:	e016      	b.n	8009c76 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8009c48:	4b14      	ldr	r3, [pc, #80]	; (8009c9c <ethernetif_update_config+0xf4>)
 8009c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c4e:	609a      	str	r2, [r3, #8]
 8009c50:	e011      	b.n	8009c76 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8009c52:	bf00      	nop
 8009c54:	e000      	b.n	8009c58 <ethernetif_update_config+0xb0>
          goto error;
 8009c56:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009c58:	4b10      	ldr	r3, [pc, #64]	; (8009c9c <ethernetif_update_config+0xf4>)
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	08db      	lsrs	r3, r3, #3
 8009c5e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8009c60:	4b0e      	ldr	r3, [pc, #56]	; (8009c9c <ethernetif_update_config+0xf4>)
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	085b      	lsrs	r3, r3, #1
 8009c66:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	2100      	movs	r1, #0
 8009c70:	480a      	ldr	r0, [pc, #40]	; (8009c9c <ethernetif_update_config+0xf4>)
 8009c72:	f7f9 fa0e 	bl	8003092 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8009c76:	2100      	movs	r1, #0
 8009c78:	4808      	ldr	r0, [pc, #32]	; (8009c9c <ethernetif_update_config+0xf4>)
 8009c7a:	f7f9 facf 	bl	800321c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8009c7e:	4807      	ldr	r0, [pc, #28]	; (8009c9c <ethernetif_update_config+0xf4>)
 8009c80:	f7f9 fa6d 	bl	800315e <HAL_ETH_Start>
 8009c84:	e002      	b.n	8009c8c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8009c86:	4805      	ldr	r0, [pc, #20]	; (8009c9c <ethernetif_update_config+0xf4>)
 8009c88:	f7f9 fa98 	bl	80031bc <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f807 	bl	8009ca0 <ethernetif_notify_conn_changed>
}
 8009c92:	bf00      	nop
 8009c94:	3710      	adds	r7, #16
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	200024bc 	.word	0x200024bc

08009ca0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009cbe:	88fb      	ldrh	r3, [r7, #6]
 8009cc0:	021b      	lsls	r3, r3, #8
 8009cc2:	b21a      	sxth	r2, r3
 8009cc4:	88fb      	ldrh	r3, [r7, #6]
 8009cc6:	0a1b      	lsrs	r3, r3, #8
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	b21b      	sxth	r3, r3
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	b21b      	sxth	r3, r3
 8009cd0:	b29b      	uxth	r3, r3
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	061a      	lsls	r2, r3, #24
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	021b      	lsls	r3, r3, #8
 8009cee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009cf2:	431a      	orrs	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	0a1b      	lsrs	r3, r3, #8
 8009cf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	0e1b      	lsrs	r3, r3, #24
 8009d02:	4313      	orrs	r3, r2
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009d1a:	f000 f8d9 	bl	8009ed0 <mem_init>
  memp_init();
 8009d1e:	f000 fbeb 	bl	800a4f8 <memp_init>
  pbuf_init();
  netif_init();
 8009d22:	f000 fca3 	bl	800a66c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009d26:	f006 ff67 	bl	8010bf8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009d2a:	f001 fd05 	bl	800b738 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009d2e:	f006 ff1b 	bl	8010b68 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009d32:	bf00      	nop
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
	...

08009d3c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	4603      	mov	r3, r0
 8009d44:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009d46:	4b05      	ldr	r3, [pc, #20]	; (8009d5c <ptr_to_mem+0x20>)
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	88fb      	ldrh	r3, [r7, #6]
 8009d4c:	4413      	add	r3, r2
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	200000a4 	.word	0x200000a4

08009d60 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009d68:	4b05      	ldr	r3, [pc, #20]	; (8009d80 <mem_to_ptr+0x20>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	b29b      	uxth	r3, r3
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	200000a4 	.word	0x200000a4

08009d84 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009d84:	b590      	push	{r4, r7, lr}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009d8c:	4b47      	ldr	r3, [pc, #284]	; (8009eac <plug_holes+0x128>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d206      	bcs.n	8009da4 <plug_holes+0x20>
 8009d96:	4b46      	ldr	r3, [pc, #280]	; (8009eb0 <plug_holes+0x12c>)
 8009d98:	f240 12df 	movw	r2, #479	; 0x1df
 8009d9c:	4945      	ldr	r1, [pc, #276]	; (8009eb4 <plug_holes+0x130>)
 8009d9e:	4846      	ldr	r0, [pc, #280]	; (8009eb8 <plug_holes+0x134>)
 8009da0:	f009 fe9a 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009da4:	4b45      	ldr	r3, [pc, #276]	; (8009ebc <plug_holes+0x138>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d306      	bcc.n	8009dbc <plug_holes+0x38>
 8009dae:	4b40      	ldr	r3, [pc, #256]	; (8009eb0 <plug_holes+0x12c>)
 8009db0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009db4:	4942      	ldr	r1, [pc, #264]	; (8009ec0 <plug_holes+0x13c>)
 8009db6:	4840      	ldr	r0, [pc, #256]	; (8009eb8 <plug_holes+0x134>)
 8009db8:	f009 fe8e 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	791b      	ldrb	r3, [r3, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d006      	beq.n	8009dd2 <plug_holes+0x4e>
 8009dc4:	4b3a      	ldr	r3, [pc, #232]	; (8009eb0 <plug_holes+0x12c>)
 8009dc6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009dca:	493e      	ldr	r1, [pc, #248]	; (8009ec4 <plug_holes+0x140>)
 8009dcc:	483a      	ldr	r0, [pc, #232]	; (8009eb8 <plug_holes+0x134>)
 8009dce:	f009 fe83 	bl	8013ad8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	881b      	ldrh	r3, [r3, #0]
 8009dd6:	f640 2228 	movw	r2, #2600	; 0xa28
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d906      	bls.n	8009dec <plug_holes+0x68>
 8009dde:	4b34      	ldr	r3, [pc, #208]	; (8009eb0 <plug_holes+0x12c>)
 8009de0:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009de4:	4938      	ldr	r1, [pc, #224]	; (8009ec8 <plug_holes+0x144>)
 8009de6:	4834      	ldr	r0, [pc, #208]	; (8009eb8 <plug_holes+0x134>)
 8009de8:	f009 fe76 	bl	8013ad8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	881b      	ldrh	r3, [r3, #0]
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff ffa3 	bl	8009d3c <ptr_to_mem>
 8009df6:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d025      	beq.n	8009e4c <plug_holes+0xc8>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	791b      	ldrb	r3, [r3, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d121      	bne.n	8009e4c <plug_holes+0xc8>
 8009e08:	4b2c      	ldr	r3, [pc, #176]	; (8009ebc <plug_holes+0x138>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d01c      	beq.n	8009e4c <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009e12:	4b2e      	ldr	r3, [pc, #184]	; (8009ecc <plug_holes+0x148>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d102      	bne.n	8009e22 <plug_holes+0x9e>
      lfree = mem;
 8009e1c:	4a2b      	ldr	r2, [pc, #172]	; (8009ecc <plug_holes+0x148>)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	881a      	ldrh	r2, [r3, #0]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	881b      	ldrh	r3, [r3, #0]
 8009e2e:	f640 2228 	movw	r2, #2600	; 0xa28
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d00a      	beq.n	8009e4c <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	881b      	ldrh	r3, [r3, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7ff ff7e 	bl	8009d3c <ptr_to_mem>
 8009e40:	4604      	mov	r4, r0
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7ff ff8c 	bl	8009d60 <mem_to_ptr>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	885b      	ldrh	r3, [r3, #2]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7ff ff73 	bl	8009d3c <ptr_to_mem>
 8009e56:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d020      	beq.n	8009ea2 <plug_holes+0x11e>
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	791b      	ldrb	r3, [r3, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d11c      	bne.n	8009ea2 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009e68:	4b18      	ldr	r3, [pc, #96]	; (8009ecc <plug_holes+0x148>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d102      	bne.n	8009e78 <plug_holes+0xf4>
      lfree = pmem;
 8009e72:	4a16      	ldr	r2, [pc, #88]	; (8009ecc <plug_holes+0x148>)
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	881a      	ldrh	r2, [r3, #0]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	881b      	ldrh	r3, [r3, #0]
 8009e84:	f640 2228 	movw	r2, #2600	; 0xa28
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d00a      	beq.n	8009ea2 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7ff ff53 	bl	8009d3c <ptr_to_mem>
 8009e96:	4604      	mov	r4, r0
 8009e98:	68b8      	ldr	r0, [r7, #8]
 8009e9a:	f7ff ff61 	bl	8009d60 <mem_to_ptr>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009ea2:	bf00      	nop
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd90      	pop	{r4, r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	200000a4 	.word	0x200000a4
 8009eb0:	08014e6c 	.word	0x08014e6c
 8009eb4:	08014e9c 	.word	0x08014e9c
 8009eb8:	08014eb4 	.word	0x08014eb4
 8009ebc:	200000a8 	.word	0x200000a8
 8009ec0:	08014edc 	.word	0x08014edc
 8009ec4:	08014ef8 	.word	0x08014ef8
 8009ec8:	08014f14 	.word	0x08014f14
 8009ecc:	200000ac 	.word	0x200000ac

08009ed0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009ed6:	4b18      	ldr	r3, [pc, #96]	; (8009f38 <mem_init+0x68>)
 8009ed8:	3303      	adds	r3, #3
 8009eda:	f023 0303 	bic.w	r3, r3, #3
 8009ede:	461a      	mov	r2, r3
 8009ee0:	4b16      	ldr	r3, [pc, #88]	; (8009f3c <mem_init+0x6c>)
 8009ee2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009ee4:	4b15      	ldr	r3, [pc, #84]	; (8009f3c <mem_init+0x6c>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f640 2228 	movw	r2, #2600	; 0xa28
 8009ef0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009efe:	f640 2028 	movw	r0, #2600	; 0xa28
 8009f02:	f7ff ff1b 	bl	8009d3c <ptr_to_mem>
 8009f06:	4603      	mov	r3, r0
 8009f08:	4a0d      	ldr	r2, [pc, #52]	; (8009f40 <mem_init+0x70>)
 8009f0a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009f0c:	4b0c      	ldr	r3, [pc, #48]	; (8009f40 <mem_init+0x70>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2201      	movs	r2, #1
 8009f12:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009f14:	4b0a      	ldr	r3, [pc, #40]	; (8009f40 <mem_init+0x70>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f640 2228 	movw	r2, #2600	; 0xa28
 8009f1c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009f1e:	4b08      	ldr	r3, [pc, #32]	; (8009f40 <mem_init+0x70>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f640 2228 	movw	r2, #2600	; 0xa28
 8009f26:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009f28:	4b04      	ldr	r3, [pc, #16]	; (8009f3c <mem_init+0x6c>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a05      	ldr	r2, [pc, #20]	; (8009f44 <mem_init+0x74>)
 8009f2e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009f30:	bf00      	nop
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	20003cec 	.word	0x20003cec
 8009f3c:	200000a4 	.word	0x200000a4
 8009f40:	200000a8 	.word	0x200000a8
 8009f44:	200000ac 	.word	0x200000ac

08009f48 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f7ff ff05 	bl	8009d60 <mem_to_ptr>
 8009f56:	4603      	mov	r3, r0
 8009f58:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	881b      	ldrh	r3, [r3, #0]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7ff feec 	bl	8009d3c <ptr_to_mem>
 8009f64:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	885b      	ldrh	r3, [r3, #2]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7ff fee6 	bl	8009d3c <ptr_to_mem>
 8009f70:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	881b      	ldrh	r3, [r3, #0]
 8009f76:	f640 2228 	movw	r2, #2600	; 0xa28
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d819      	bhi.n	8009fb2 <mem_link_valid+0x6a>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	885b      	ldrh	r3, [r3, #2]
 8009f82:	f640 2228 	movw	r2, #2600	; 0xa28
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d813      	bhi.n	8009fb2 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009f8e:	8afa      	ldrh	r2, [r7, #22]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d004      	beq.n	8009f9e <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	881b      	ldrh	r3, [r3, #0]
 8009f98:	8afa      	ldrh	r2, [r7, #22]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d109      	bne.n	8009fb2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009f9e:	4b08      	ldr	r3, [pc, #32]	; (8009fc0 <mem_link_valid+0x78>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d006      	beq.n	8009fb6 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	885b      	ldrh	r3, [r3, #2]
 8009fac:	8afa      	ldrh	r2, [r7, #22]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d001      	beq.n	8009fb6 <mem_link_valid+0x6e>
    return 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	e000      	b.n	8009fb8 <mem_link_valid+0x70>
  }
  return 1;
 8009fb6:	2301      	movs	r3, #1
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	200000a8 	.word	0x200000a8

08009fc4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d04c      	beq.n	800a06c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f003 0303 	and.w	r3, r3, #3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d007      	beq.n	8009fec <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009fdc:	4b25      	ldr	r3, [pc, #148]	; (800a074 <mem_free+0xb0>)
 8009fde:	f240 2273 	movw	r2, #627	; 0x273
 8009fe2:	4925      	ldr	r1, [pc, #148]	; (800a078 <mem_free+0xb4>)
 8009fe4:	4825      	ldr	r0, [pc, #148]	; (800a07c <mem_free+0xb8>)
 8009fe6:	f009 fd77 	bl	8013ad8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009fea:	e040      	b.n	800a06e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	3b08      	subs	r3, #8
 8009ff0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009ff2:	4b23      	ldr	r3, [pc, #140]	; (800a080 <mem_free+0xbc>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d306      	bcc.n	800a00a <mem_free+0x46>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f103 020c 	add.w	r2, r3, #12
 800a002:	4b20      	ldr	r3, [pc, #128]	; (800a084 <mem_free+0xc0>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	429a      	cmp	r2, r3
 800a008:	d907      	bls.n	800a01a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a00a:	4b1a      	ldr	r3, [pc, #104]	; (800a074 <mem_free+0xb0>)
 800a00c:	f240 227f 	movw	r2, #639	; 0x27f
 800a010:	491d      	ldr	r1, [pc, #116]	; (800a088 <mem_free+0xc4>)
 800a012:	481a      	ldr	r0, [pc, #104]	; (800a07c <mem_free+0xb8>)
 800a014:	f009 fd60 	bl	8013ad8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a018:	e029      	b.n	800a06e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	791b      	ldrb	r3, [r3, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d107      	bne.n	800a032 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a022:	4b14      	ldr	r3, [pc, #80]	; (800a074 <mem_free+0xb0>)
 800a024:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a028:	4918      	ldr	r1, [pc, #96]	; (800a08c <mem_free+0xc8>)
 800a02a:	4814      	ldr	r0, [pc, #80]	; (800a07c <mem_free+0xb8>)
 800a02c:	f009 fd54 	bl	8013ad8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a030:	e01d      	b.n	800a06e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f7ff ff88 	bl	8009f48 <mem_link_valid>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d107      	bne.n	800a04e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a03e:	4b0d      	ldr	r3, [pc, #52]	; (800a074 <mem_free+0xb0>)
 800a040:	f240 2295 	movw	r2, #661	; 0x295
 800a044:	4912      	ldr	r1, [pc, #72]	; (800a090 <mem_free+0xcc>)
 800a046:	480d      	ldr	r0, [pc, #52]	; (800a07c <mem_free+0xb8>)
 800a048:	f009 fd46 	bl	8013ad8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a04c:	e00f      	b.n	800a06e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a054:	4b0f      	ldr	r3, [pc, #60]	; (800a094 <mem_free+0xd0>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d202      	bcs.n	800a064 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a05e:	4a0d      	ldr	r2, [pc, #52]	; (800a094 <mem_free+0xd0>)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f7ff fe8d 	bl	8009d84 <plug_holes>
 800a06a:	e000      	b.n	800a06e <mem_free+0xaa>
    return;
 800a06c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	08014e6c 	.word	0x08014e6c
 800a078:	08014f40 	.word	0x08014f40
 800a07c:	08014eb4 	.word	0x08014eb4
 800a080:	200000a4 	.word	0x200000a4
 800a084:	200000a8 	.word	0x200000a8
 800a088:	08014f64 	.word	0x08014f64
 800a08c:	08014f80 	.word	0x08014f80
 800a090:	08014fa8 	.word	0x08014fa8
 800a094:	200000ac 	.word	0x200000ac

0800a098 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b088      	sub	sp, #32
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a0a4:	887b      	ldrh	r3, [r7, #2]
 800a0a6:	3303      	adds	r3, #3
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	f023 0303 	bic.w	r3, r3, #3
 800a0ae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a0b0:	8bfb      	ldrh	r3, [r7, #30]
 800a0b2:	2b0b      	cmp	r3, #11
 800a0b4:	d801      	bhi.n	800a0ba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a0b6:	230c      	movs	r3, #12
 800a0b8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a0ba:	8bfb      	ldrh	r3, [r7, #30]
 800a0bc:	f640 2228 	movw	r2, #2600	; 0xa28
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d803      	bhi.n	800a0cc <mem_trim+0x34>
 800a0c4:	8bfa      	ldrh	r2, [r7, #30]
 800a0c6:	887b      	ldrh	r3, [r7, #2]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d201      	bcs.n	800a0d0 <mem_trim+0x38>
    return NULL;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	e0d0      	b.n	800a272 <mem_trim+0x1da>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a0d0:	4b6a      	ldr	r3, [pc, #424]	; (800a27c <mem_trim+0x1e4>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d304      	bcc.n	800a0e4 <mem_trim+0x4c>
 800a0da:	4b69      	ldr	r3, [pc, #420]	; (800a280 <mem_trim+0x1e8>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d306      	bcc.n	800a0f2 <mem_trim+0x5a>
 800a0e4:	4b67      	ldr	r3, [pc, #412]	; (800a284 <mem_trim+0x1ec>)
 800a0e6:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a0ea:	4967      	ldr	r1, [pc, #412]	; (800a288 <mem_trim+0x1f0>)
 800a0ec:	4867      	ldr	r0, [pc, #412]	; (800a28c <mem_trim+0x1f4>)
 800a0ee:	f009 fcf3 	bl	8013ad8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a0f2:	4b62      	ldr	r3, [pc, #392]	; (800a27c <mem_trim+0x1e4>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d304      	bcc.n	800a106 <mem_trim+0x6e>
 800a0fc:	4b60      	ldr	r3, [pc, #384]	; (800a280 <mem_trim+0x1e8>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	429a      	cmp	r2, r3
 800a104:	d301      	bcc.n	800a10a <mem_trim+0x72>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	e0b3      	b.n	800a272 <mem_trim+0x1da>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	3b08      	subs	r3, #8
 800a10e:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a110:	69b8      	ldr	r0, [r7, #24]
 800a112:	f7ff fe25 	bl	8009d60 <mem_to_ptr>
 800a116:	4603      	mov	r3, r0
 800a118:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	881a      	ldrh	r2, [r3, #0]
 800a11e:	8afb      	ldrh	r3, [r7, #22]
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	b29b      	uxth	r3, r3
 800a124:	3b08      	subs	r3, #8
 800a126:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a128:	8bfa      	ldrh	r2, [r7, #30]
 800a12a:	8abb      	ldrh	r3, [r7, #20]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d906      	bls.n	800a13e <mem_trim+0xa6>
 800a130:	4b54      	ldr	r3, [pc, #336]	; (800a284 <mem_trim+0x1ec>)
 800a132:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a136:	4956      	ldr	r1, [pc, #344]	; (800a290 <mem_trim+0x1f8>)
 800a138:	4854      	ldr	r0, [pc, #336]	; (800a28c <mem_trim+0x1f4>)
 800a13a:	f009 fccd 	bl	8013ad8 <iprintf>
  if (newsize > size) {
 800a13e:	8bfa      	ldrh	r2, [r7, #30]
 800a140:	8abb      	ldrh	r3, [r7, #20]
 800a142:	429a      	cmp	r2, r3
 800a144:	d901      	bls.n	800a14a <mem_trim+0xb2>
    /* not supported */
    return NULL;
 800a146:	2300      	movs	r3, #0
 800a148:	e093      	b.n	800a272 <mem_trim+0x1da>
  }
  if (newsize == size) {
 800a14a:	8bfa      	ldrh	r2, [r7, #30]
 800a14c:	8abb      	ldrh	r3, [r7, #20]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d101      	bne.n	800a156 <mem_trim+0xbe>
    /* No change in size, simply return */
    return rmem;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	e08d      	b.n	800a272 <mem_trim+0x1da>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7ff fdee 	bl	8009d3c <ptr_to_mem>
 800a160:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	791b      	ldrb	r3, [r3, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d141      	bne.n	800a1ee <mem_trim+0x156>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	881b      	ldrh	r3, [r3, #0]
 800a16e:	f640 2228 	movw	r2, #2600	; 0xa28
 800a172:	4293      	cmp	r3, r2
 800a174:	d106      	bne.n	800a184 <mem_trim+0xec>
 800a176:	4b43      	ldr	r3, [pc, #268]	; (800a284 <mem_trim+0x1ec>)
 800a178:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a17c:	4945      	ldr	r1, [pc, #276]	; (800a294 <mem_trim+0x1fc>)
 800a17e:	4843      	ldr	r0, [pc, #268]	; (800a28c <mem_trim+0x1f4>)
 800a180:	f009 fcaa 	bl	8013ad8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a18a:	8afa      	ldrh	r2, [r7, #22]
 800a18c:	8bfb      	ldrh	r3, [r7, #30]
 800a18e:	4413      	add	r3, r2
 800a190:	b29b      	uxth	r3, r3
 800a192:	3308      	adds	r3, #8
 800a194:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a196:	4b40      	ldr	r3, [pc, #256]	; (800a298 <mem_trim+0x200>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d106      	bne.n	800a1ae <mem_trim+0x116>
      lfree = ptr_to_mem(ptr2);
 800a1a0:	89fb      	ldrh	r3, [r7, #14]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff fdca 	bl	8009d3c <ptr_to_mem>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	4a3b      	ldr	r2, [pc, #236]	; (800a298 <mem_trim+0x200>)
 800a1ac:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a1ae:	89fb      	ldrh	r3, [r7, #14]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f7ff fdc3 	bl	8009d3c <ptr_to_mem>
 800a1b6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	89ba      	ldrh	r2, [r7, #12]
 800a1c2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	8afa      	ldrh	r2, [r7, #22]
 800a1c8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	89fa      	ldrh	r2, [r7, #14]
 800a1ce:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	881b      	ldrh	r3, [r3, #0]
 800a1d4:	f640 2228 	movw	r2, #2600	; 0xa28
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d049      	beq.n	800a270 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7ff fdab 	bl	8009d3c <ptr_to_mem>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	89fb      	ldrh	r3, [r7, #14]
 800a1ea:	8053      	strh	r3, [r2, #2]
 800a1ec:	e040      	b.n	800a270 <mem_trim+0x1d8>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a1ee:	8bfb      	ldrh	r3, [r7, #30]
 800a1f0:	f103 0214 	add.w	r2, r3, #20
 800a1f4:	8abb      	ldrh	r3, [r7, #20]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d83a      	bhi.n	800a270 <mem_trim+0x1d8>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a1fa:	8afa      	ldrh	r2, [r7, #22]
 800a1fc:	8bfb      	ldrh	r3, [r7, #30]
 800a1fe:	4413      	add	r3, r2
 800a200:	b29b      	uxth	r3, r3
 800a202:	3308      	adds	r3, #8
 800a204:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	881b      	ldrh	r3, [r3, #0]
 800a20a:	f640 2228 	movw	r2, #2600	; 0xa28
 800a20e:	4293      	cmp	r3, r2
 800a210:	d106      	bne.n	800a220 <mem_trim+0x188>
 800a212:	4b1c      	ldr	r3, [pc, #112]	; (800a284 <mem_trim+0x1ec>)
 800a214:	f240 3216 	movw	r2, #790	; 0x316
 800a218:	491e      	ldr	r1, [pc, #120]	; (800a294 <mem_trim+0x1fc>)
 800a21a:	481c      	ldr	r0, [pc, #112]	; (800a28c <mem_trim+0x1f4>)
 800a21c:	f009 fc5c 	bl	8013ad8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a220:	89fb      	ldrh	r3, [r7, #14]
 800a222:	4618      	mov	r0, r3
 800a224:	f7ff fd8a 	bl	8009d3c <ptr_to_mem>
 800a228:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a22a:	4b1b      	ldr	r3, [pc, #108]	; (800a298 <mem_trim+0x200>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	693a      	ldr	r2, [r7, #16]
 800a230:	429a      	cmp	r2, r3
 800a232:	d202      	bcs.n	800a23a <mem_trim+0x1a2>
      lfree = mem2;
 800a234:	4a18      	ldr	r2, [pc, #96]	; (800a298 <mem_trim+0x200>)
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	2200      	movs	r2, #0
 800a23e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	881a      	ldrh	r2, [r3, #0]
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	8afa      	ldrh	r2, [r7, #22]
 800a24c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	89fa      	ldrh	r2, [r7, #14]
 800a252:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	881b      	ldrh	r3, [r3, #0]
 800a258:	f640 2228 	movw	r2, #2600	; 0xa28
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d007      	beq.n	800a270 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	881b      	ldrh	r3, [r3, #0]
 800a264:	4618      	mov	r0, r3
 800a266:	f7ff fd69 	bl	8009d3c <ptr_to_mem>
 800a26a:	4602      	mov	r2, r0
 800a26c:	89fb      	ldrh	r3, [r7, #14]
 800a26e:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a270:	687b      	ldr	r3, [r7, #4]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3720      	adds	r7, #32
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	200000a4 	.word	0x200000a4
 800a280:	200000a8 	.word	0x200000a8
 800a284:	08014e6c 	.word	0x08014e6c
 800a288:	08014fdc 	.word	0x08014fdc
 800a28c:	08014eb4 	.word	0x08014eb4
 800a290:	08014ff4 	.word	0x08014ff4
 800a294:	08015014 	.word	0x08015014
 800a298:	200000ac 	.word	0x200000ac

0800a29c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b088      	sub	sp, #32
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a2a6:	88fb      	ldrh	r3, [r7, #6]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d101      	bne.n	800a2b0 <mem_malloc+0x14>
    return NULL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	e0dd      	b.n	800a46c <mem_malloc+0x1d0>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a2b0:	88fb      	ldrh	r3, [r7, #6]
 800a2b2:	3303      	adds	r3, #3
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	f023 0303 	bic.w	r3, r3, #3
 800a2ba:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a2bc:	8bbb      	ldrh	r3, [r7, #28]
 800a2be:	2b0b      	cmp	r3, #11
 800a2c0:	d801      	bhi.n	800a2c6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a2c2:	230c      	movs	r3, #12
 800a2c4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a2c6:	8bbb      	ldrh	r3, [r7, #28]
 800a2c8:	f640 2228 	movw	r2, #2600	; 0xa28
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d803      	bhi.n	800a2d8 <mem_malloc+0x3c>
 800a2d0:	8bba      	ldrh	r2, [r7, #28]
 800a2d2:	88fb      	ldrh	r3, [r7, #6]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d201      	bcs.n	800a2dc <mem_malloc+0x40>
    return NULL;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	e0c7      	b.n	800a46c <mem_malloc+0x1d0>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a2dc:	4b65      	ldr	r3, [pc, #404]	; (800a474 <mem_malloc+0x1d8>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7ff fd3d 	bl	8009d60 <mem_to_ptr>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	83fb      	strh	r3, [r7, #30]
 800a2ea:	e0b6      	b.n	800a45a <mem_malloc+0x1be>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a2ec:	8bfb      	ldrh	r3, [r7, #30]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7ff fd24 	bl	8009d3c <ptr_to_mem>
 800a2f4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	791b      	ldrb	r3, [r3, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f040 80a6 	bne.w	800a44c <mem_malloc+0x1b0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	461a      	mov	r2, r3
 800a306:	8bfb      	ldrh	r3, [r7, #30]
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	f1a3 0208 	sub.w	r2, r3, #8
 800a30e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a310:	429a      	cmp	r2, r3
 800a312:	f0c0 809b 	bcc.w	800a44c <mem_malloc+0x1b0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	881b      	ldrh	r3, [r3, #0]
 800a31a:	461a      	mov	r2, r3
 800a31c:	8bfb      	ldrh	r3, [r7, #30]
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	f1a3 0208 	sub.w	r2, r3, #8
 800a324:	8bbb      	ldrh	r3, [r7, #28]
 800a326:	3314      	adds	r3, #20
 800a328:	429a      	cmp	r2, r3
 800a32a:	d335      	bcc.n	800a398 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a32c:	8bfa      	ldrh	r2, [r7, #30]
 800a32e:	8bbb      	ldrh	r3, [r7, #28]
 800a330:	4413      	add	r3, r2
 800a332:	b29b      	uxth	r3, r3
 800a334:	3308      	adds	r3, #8
 800a336:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a338:	8a7b      	ldrh	r3, [r7, #18]
 800a33a:	f640 2228 	movw	r2, #2600	; 0xa28
 800a33e:	4293      	cmp	r3, r2
 800a340:	d106      	bne.n	800a350 <mem_malloc+0xb4>
 800a342:	4b4d      	ldr	r3, [pc, #308]	; (800a478 <mem_malloc+0x1dc>)
 800a344:	f240 3287 	movw	r2, #903	; 0x387
 800a348:	494c      	ldr	r1, [pc, #304]	; (800a47c <mem_malloc+0x1e0>)
 800a34a:	484d      	ldr	r0, [pc, #308]	; (800a480 <mem_malloc+0x1e4>)
 800a34c:	f009 fbc4 	bl	8013ad8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a350:	8a7b      	ldrh	r3, [r7, #18]
 800a352:	4618      	mov	r0, r3
 800a354:	f7ff fcf2 	bl	8009d3c <ptr_to_mem>
 800a358:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	881a      	ldrh	r2, [r3, #0]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	8bfa      	ldrh	r2, [r7, #30]
 800a36c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	8a7a      	ldrh	r2, [r7, #18]
 800a372:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	2201      	movs	r2, #1
 800a378:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	881b      	ldrh	r3, [r3, #0]
 800a37e:	f640 2228 	movw	r2, #2600	; 0xa28
 800a382:	4293      	cmp	r3, r2
 800a384:	d00b      	beq.n	800a39e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	881b      	ldrh	r3, [r3, #0]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7ff fcd6 	bl	8009d3c <ptr_to_mem>
 800a390:	4602      	mov	r2, r0
 800a392:	8a7b      	ldrh	r3, [r7, #18]
 800a394:	8053      	strh	r3, [r2, #2]
 800a396:	e002      	b.n	800a39e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	2201      	movs	r2, #1
 800a39c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a39e:	4b35      	ldr	r3, [pc, #212]	; (800a474 <mem_malloc+0x1d8>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d127      	bne.n	800a3f8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a3a8:	4b32      	ldr	r3, [pc, #200]	; (800a474 <mem_malloc+0x1d8>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a3ae:	e005      	b.n	800a3bc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7ff fcc1 	bl	8009d3c <ptr_to_mem>
 800a3ba:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	791b      	ldrb	r3, [r3, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d004      	beq.n	800a3ce <mem_malloc+0x132>
 800a3c4:	4b2f      	ldr	r3, [pc, #188]	; (800a484 <mem_malloc+0x1e8>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	69ba      	ldr	r2, [r7, #24]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d1f0      	bne.n	800a3b0 <mem_malloc+0x114>
          }
          lfree = cur;
 800a3ce:	4a29      	ldr	r2, [pc, #164]	; (800a474 <mem_malloc+0x1d8>)
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a3d4:	4b27      	ldr	r3, [pc, #156]	; (800a474 <mem_malloc+0x1d8>)
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	4b2a      	ldr	r3, [pc, #168]	; (800a484 <mem_malloc+0x1e8>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d00b      	beq.n	800a3f8 <mem_malloc+0x15c>
 800a3e0:	4b24      	ldr	r3, [pc, #144]	; (800a474 <mem_malloc+0x1d8>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	791b      	ldrb	r3, [r3, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d006      	beq.n	800a3f8 <mem_malloc+0x15c>
 800a3ea:	4b23      	ldr	r3, [pc, #140]	; (800a478 <mem_malloc+0x1dc>)
 800a3ec:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a3f0:	4925      	ldr	r1, [pc, #148]	; (800a488 <mem_malloc+0x1ec>)
 800a3f2:	4823      	ldr	r0, [pc, #140]	; (800a480 <mem_malloc+0x1e4>)
 800a3f4:	f009 fb70 	bl	8013ad8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a3f8:	8bba      	ldrh	r2, [r7, #28]
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	3308      	adds	r3, #8
 800a400:	4a20      	ldr	r2, [pc, #128]	; (800a484 <mem_malloc+0x1e8>)
 800a402:	6812      	ldr	r2, [r2, #0]
 800a404:	4293      	cmp	r3, r2
 800a406:	d906      	bls.n	800a416 <mem_malloc+0x17a>
 800a408:	4b1b      	ldr	r3, [pc, #108]	; (800a478 <mem_malloc+0x1dc>)
 800a40a:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a40e:	491f      	ldr	r1, [pc, #124]	; (800a48c <mem_malloc+0x1f0>)
 800a410:	481b      	ldr	r0, [pc, #108]	; (800a480 <mem_malloc+0x1e4>)
 800a412:	f009 fb61 	bl	8013ad8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f003 0303 	and.w	r3, r3, #3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d006      	beq.n	800a42e <mem_malloc+0x192>
 800a420:	4b15      	ldr	r3, [pc, #84]	; (800a478 <mem_malloc+0x1dc>)
 800a422:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a426:	491a      	ldr	r1, [pc, #104]	; (800a490 <mem_malloc+0x1f4>)
 800a428:	4815      	ldr	r0, [pc, #84]	; (800a480 <mem_malloc+0x1e4>)
 800a42a:	f009 fb55 	bl	8013ad8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f003 0303 	and.w	r3, r3, #3
 800a434:	2b00      	cmp	r3, #0
 800a436:	d006      	beq.n	800a446 <mem_malloc+0x1aa>
 800a438:	4b0f      	ldr	r3, [pc, #60]	; (800a478 <mem_malloc+0x1dc>)
 800a43a:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a43e:	4915      	ldr	r1, [pc, #84]	; (800a494 <mem_malloc+0x1f8>)
 800a440:	480f      	ldr	r0, [pc, #60]	; (800a480 <mem_malloc+0x1e4>)
 800a442:	f009 fb49 	bl	8013ad8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	3308      	adds	r3, #8
 800a44a:	e00f      	b.n	800a46c <mem_malloc+0x1d0>
         ptr = ptr_to_mem(ptr)->next) {
 800a44c:	8bfb      	ldrh	r3, [r7, #30]
 800a44e:	4618      	mov	r0, r3
 800a450:	f7ff fc74 	bl	8009d3c <ptr_to_mem>
 800a454:	4603      	mov	r3, r0
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a45a:	8bfa      	ldrh	r2, [r7, #30]
 800a45c:	8bb9      	ldrh	r1, [r7, #28]
 800a45e:	f640 2328 	movw	r3, #2600	; 0xa28
 800a462:	1a5b      	subs	r3, r3, r1
 800a464:	429a      	cmp	r2, r3
 800a466:	f4ff af41 	bcc.w	800a2ec <mem_malloc+0x50>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3720      	adds	r7, #32
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	200000ac 	.word	0x200000ac
 800a478:	08014e6c 	.word	0x08014e6c
 800a47c:	08015014 	.word	0x08015014
 800a480:	08014eb4 	.word	0x08014eb4
 800a484:	200000a8 	.word	0x200000a8
 800a488:	08015028 	.word	0x08015028
 800a48c:	08015044 	.word	0x08015044
 800a490:	08015074 	.word	0x08015074
 800a494:	080150a4 	.word	0x080150a4

0800a498 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	3303      	adds	r3, #3
 800a4ae:	f023 0303 	bic.w	r3, r3, #3
 800a4b2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	e011      	b.n	800a4de <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	689b      	ldr	r3, [r3, #8]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	60fb      	str	r3, [r7, #12]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	885b      	ldrh	r3, [r3, #2]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	dbe7      	blt.n	800a4ba <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a4ea:	bf00      	nop
 800a4ec:	bf00      	nop
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a4fe:	2300      	movs	r3, #0
 800a500:	80fb      	strh	r3, [r7, #6]
 800a502:	e009      	b.n	800a518 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a504:	88fb      	ldrh	r3, [r7, #6]
 800a506:	4a08      	ldr	r2, [pc, #32]	; (800a528 <memp_init+0x30>)
 800a508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff ffc3 	bl	800a498 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a512:	88fb      	ldrh	r3, [r7, #6]
 800a514:	3301      	adds	r3, #1
 800a516:	80fb      	strh	r3, [r7, #6]
 800a518:	88fb      	ldrh	r3, [r7, #6]
 800a51a:	2b08      	cmp	r3, #8
 800a51c:	d9f2      	bls.n	800a504 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a51e:	bf00      	nop
 800a520:	bf00      	nop
 800a522:	3708      	adds	r7, #8
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	08017884 	.word	0x08017884

0800a52c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d012      	beq.n	800a568 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	6812      	ldr	r2, [r2, #0]
 800a54a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f003 0303 	and.w	r3, r3, #3
 800a552:	2b00      	cmp	r3, #0
 800a554:	d006      	beq.n	800a564 <do_memp_malloc_pool+0x38>
 800a556:	4b07      	ldr	r3, [pc, #28]	; (800a574 <do_memp_malloc_pool+0x48>)
 800a558:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a55c:	4906      	ldr	r1, [pc, #24]	; (800a578 <do_memp_malloc_pool+0x4c>)
 800a55e:	4807      	ldr	r0, [pc, #28]	; (800a57c <do_memp_malloc_pool+0x50>)
 800a560:	f009 faba 	bl	8013ad8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	e000      	b.n	800a56a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	080150c8 	.word	0x080150c8
 800a578:	080150f8 	.word	0x080150f8
 800a57c:	0801511c 	.word	0x0801511c

0800a580 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	4603      	mov	r3, r0
 800a588:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a58a:	79fb      	ldrb	r3, [r7, #7]
 800a58c:	2b08      	cmp	r3, #8
 800a58e:	d908      	bls.n	800a5a2 <memp_malloc+0x22>
 800a590:	4b0a      	ldr	r3, [pc, #40]	; (800a5bc <memp_malloc+0x3c>)
 800a592:	f240 1257 	movw	r2, #343	; 0x157
 800a596:	490a      	ldr	r1, [pc, #40]	; (800a5c0 <memp_malloc+0x40>)
 800a598:	480a      	ldr	r0, [pc, #40]	; (800a5c4 <memp_malloc+0x44>)
 800a59a:	f009 fa9d 	bl	8013ad8 <iprintf>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	e008      	b.n	800a5b4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a5a2:	79fb      	ldrb	r3, [r7, #7]
 800a5a4:	4a08      	ldr	r2, [pc, #32]	; (800a5c8 <memp_malloc+0x48>)
 800a5a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7ff ffbe 	bl	800a52c <do_memp_malloc_pool>
 800a5b0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	080150c8 	.word	0x080150c8
 800a5c0:	08015158 	.word	0x08015158
 800a5c4:	0801511c 	.word	0x0801511c
 800a5c8:	08017884 	.word	0x08017884

0800a5cc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	f003 0303 	and.w	r3, r3, #3
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d006      	beq.n	800a5ee <do_memp_free_pool+0x22>
 800a5e0:	4b0a      	ldr	r3, [pc, #40]	; (800a60c <do_memp_free_pool+0x40>)
 800a5e2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a5e6:	490a      	ldr	r1, [pc, #40]	; (800a610 <do_memp_free_pool+0x44>)
 800a5e8:	480a      	ldr	r0, [pc, #40]	; (800a614 <do_memp_free_pool+0x48>)
 800a5ea:	f009 fa75 	bl	8013ad8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	68fa      	ldr	r2, [r7, #12]
 800a602:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a604:	bf00      	nop
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	080150c8 	.word	0x080150c8
 800a610:	08015178 	.word	0x08015178
 800a614:	0801511c 	.word	0x0801511c

0800a618 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	4603      	mov	r3, r0
 800a620:	6039      	str	r1, [r7, #0]
 800a622:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a624:	79fb      	ldrb	r3, [r7, #7]
 800a626:	2b08      	cmp	r3, #8
 800a628:	d907      	bls.n	800a63a <memp_free+0x22>
 800a62a:	4b0c      	ldr	r3, [pc, #48]	; (800a65c <memp_free+0x44>)
 800a62c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a630:	490b      	ldr	r1, [pc, #44]	; (800a660 <memp_free+0x48>)
 800a632:	480c      	ldr	r0, [pc, #48]	; (800a664 <memp_free+0x4c>)
 800a634:	f009 fa50 	bl	8013ad8 <iprintf>
 800a638:	e00c      	b.n	800a654 <memp_free+0x3c>

  if (mem == NULL) {
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d008      	beq.n	800a652 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	4a09      	ldr	r2, [pc, #36]	; (800a668 <memp_free+0x50>)
 800a644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff ffbe 	bl	800a5cc <do_memp_free_pool>
 800a650:	e000      	b.n	800a654 <memp_free+0x3c>
    return;
 800a652:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	080150c8 	.word	0x080150c8
 800a660:	08015198 	.word	0x08015198
 800a664:	0801511c 	.word	0x0801511c
 800a668:	08017884 	.word	0x08017884

0800a66c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a66c:	b480      	push	{r7}
 800a66e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a670:	bf00      	nop
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr
	...

0800a67c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d108      	bne.n	800a6a2 <netif_add+0x26>
 800a690:	4b57      	ldr	r3, [pc, #348]	; (800a7f0 <netif_add+0x174>)
 800a692:	f240 1227 	movw	r2, #295	; 0x127
 800a696:	4957      	ldr	r1, [pc, #348]	; (800a7f4 <netif_add+0x178>)
 800a698:	4857      	ldr	r0, [pc, #348]	; (800a7f8 <netif_add+0x17c>)
 800a69a:	f009 fa1d 	bl	8013ad8 <iprintf>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e0a2      	b.n	800a7e8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d108      	bne.n	800a6ba <netif_add+0x3e>
 800a6a8:	4b51      	ldr	r3, [pc, #324]	; (800a7f0 <netif_add+0x174>)
 800a6aa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a6ae:	4953      	ldr	r1, [pc, #332]	; (800a7fc <netif_add+0x180>)
 800a6b0:	4851      	ldr	r0, [pc, #324]	; (800a7f8 <netif_add+0x17c>)
 800a6b2:	f009 fa11 	bl	8013ad8 <iprintf>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	e096      	b.n	800a7e8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d101      	bne.n	800a6c4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a6c0:	4b4f      	ldr	r3, [pc, #316]	; (800a800 <netif_add+0x184>)
 800a6c2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d101      	bne.n	800a6ce <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a6ca:	4b4d      	ldr	r3, [pc, #308]	; (800a800 <netif_add+0x184>)
 800a6cc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d101      	bne.n	800a6d8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a6d4:	4b4a      	ldr	r3, [pc, #296]	; (800a800 <netif_add+0x184>)
 800a6d6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4a45      	ldr	r2, [pc, #276]	; (800a804 <netif_add+0x188>)
 800a6ee:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6a3a      	ldr	r2, [r7, #32]
 800a708:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a70a:	4b3f      	ldr	r3, [pc, #252]	; (800a808 <netif_add+0x18c>)
 800a70c:	781a      	ldrb	r2, [r3, #0]
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a718:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	687a      	ldr	r2, [r7, #4]
 800a71e:	68b9      	ldr	r1, [r7, #8]
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f000 f913 	bl	800a94c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	4798      	blx	r3
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <netif_add+0xba>
    return NULL;
 800a732:	2300      	movs	r3, #0
 800a734:	e058      	b.n	800a7e8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a73c:	2bff      	cmp	r3, #255	; 0xff
 800a73e:	d103      	bne.n	800a748 <netif_add+0xcc>
        netif->num = 0;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2200      	movs	r2, #0
 800a744:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a74c:	4b2f      	ldr	r3, [pc, #188]	; (800a80c <netif_add+0x190>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	617b      	str	r3, [r7, #20]
 800a752:	e02b      	b.n	800a7ac <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a754:	697a      	ldr	r2, [r7, #20]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d106      	bne.n	800a76a <netif_add+0xee>
 800a75c:	4b24      	ldr	r3, [pc, #144]	; (800a7f0 <netif_add+0x174>)
 800a75e:	f240 128b 	movw	r2, #395	; 0x18b
 800a762:	492b      	ldr	r1, [pc, #172]	; (800a810 <netif_add+0x194>)
 800a764:	4824      	ldr	r0, [pc, #144]	; (800a7f8 <netif_add+0x17c>)
 800a766:	f009 f9b7 	bl	8013ad8 <iprintf>
        num_netifs++;
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	3301      	adds	r3, #1
 800a76e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	2bff      	cmp	r3, #255	; 0xff
 800a774:	dd06      	ble.n	800a784 <netif_add+0x108>
 800a776:	4b1e      	ldr	r3, [pc, #120]	; (800a7f0 <netif_add+0x174>)
 800a778:	f240 128d 	movw	r2, #397	; 0x18d
 800a77c:	4925      	ldr	r1, [pc, #148]	; (800a814 <netif_add+0x198>)
 800a77e:	481e      	ldr	r0, [pc, #120]	; (800a7f8 <netif_add+0x17c>)
 800a780:	f009 f9aa 	bl	8013ad8 <iprintf>
        if (netif2->num == netif->num) {
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a790:	429a      	cmp	r2, r3
 800a792:	d108      	bne.n	800a7a6 <netif_add+0x12a>
          netif->num++;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a79a:	3301      	adds	r3, #1
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800a7a4:	e005      	b.n	800a7b2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	617b      	str	r3, [r7, #20]
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1d0      	bne.n	800a754 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1be      	bne.n	800a736 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7be:	2bfe      	cmp	r3, #254	; 0xfe
 800a7c0:	d103      	bne.n	800a7ca <netif_add+0x14e>
    netif_num = 0;
 800a7c2:	4b11      	ldr	r3, [pc, #68]	; (800a808 <netif_add+0x18c>)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	701a      	strb	r2, [r3, #0]
 800a7c8:	e006      	b.n	800a7d8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	b2da      	uxtb	r2, r3
 800a7d4:	4b0c      	ldr	r3, [pc, #48]	; (800a808 <netif_add+0x18c>)
 800a7d6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a7d8:	4b0c      	ldr	r3, [pc, #48]	; (800a80c <netif_add+0x190>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a7e0:	4a0a      	ldr	r2, [pc, #40]	; (800a80c <netif_add+0x190>)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	080151b4 	.word	0x080151b4
 800a7f4:	08015248 	.word	0x08015248
 800a7f8:	08015204 	.word	0x08015204
 800a7fc:	08015264 	.word	0x08015264
 800a800:	080178e8 	.word	0x080178e8
 800a804:	0800ab5f 	.word	0x0800ab5f
 800a808:	200000d4 	.word	0x200000d4
 800a80c:	20008db0 	.word	0x20008db0
 800a810:	08015288 	.word	0x08015288
 800a814:	0801529c 	.word	0x0801529c

0800a818 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f002 facf 	bl	800cdc8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a82a:	6839      	ldr	r1, [r7, #0]
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f006 fe1b 	bl	8011468 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a832:	bf00      	nop
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}
	...

0800a83c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b086      	sub	sp, #24
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d106      	bne.n	800a85c <netif_do_set_ipaddr+0x20>
 800a84e:	4b1d      	ldr	r3, [pc, #116]	; (800a8c4 <netif_do_set_ipaddr+0x88>)
 800a850:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a854:	491c      	ldr	r1, [pc, #112]	; (800a8c8 <netif_do_set_ipaddr+0x8c>)
 800a856:	481d      	ldr	r0, [pc, #116]	; (800a8cc <netif_do_set_ipaddr+0x90>)
 800a858:	f009 f93e 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d106      	bne.n	800a870 <netif_do_set_ipaddr+0x34>
 800a862:	4b18      	ldr	r3, [pc, #96]	; (800a8c4 <netif_do_set_ipaddr+0x88>)
 800a864:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a868:	4917      	ldr	r1, [pc, #92]	; (800a8c8 <netif_do_set_ipaddr+0x8c>)
 800a86a:	4818      	ldr	r0, [pc, #96]	; (800a8cc <netif_do_set_ipaddr+0x90>)
 800a86c:	f009 f934 	bl	8013ad8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	3304      	adds	r3, #4
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d01c      	beq.n	800a8b8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	3304      	adds	r3, #4
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a88e:	f107 0314 	add.w	r3, r7, #20
 800a892:	4619      	mov	r1, r3
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f7ff ffbf 	bl	800a818 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <netif_do_set_ipaddr+0x6a>
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	e000      	b.n	800a8a8 <netif_do_set_ipaddr+0x6c>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f000 f8d2 	bl	800aa58 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e000      	b.n	800a8ba <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	080151b4 	.word	0x080151b4
 800a8c8:	080152cc 	.word	0x080152cc
 800a8cc:	08015204 	.word	0x08015204

0800a8d0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d00a      	beq.n	800a900 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d002      	beq.n	800a8f6 <netif_do_set_netmask+0x26>
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	e000      	b.n	800a8f8 <netif_do_set_netmask+0x28>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e000      	b.n	800a902 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3714      	adds	r7, #20
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a90e:	b480      	push	{r7}
 800a910:	b085      	sub	sp, #20
 800a912:	af00      	add	r7, sp, #0
 800a914:	60f8      	str	r0, [r7, #12]
 800a916:	60b9      	str	r1, [r7, #8]
 800a918:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	330c      	adds	r3, #12
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	429a      	cmp	r2, r3
 800a926:	d00a      	beq.n	800a93e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d002      	beq.n	800a934 <netif_do_set_gw+0x26>
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	e000      	b.n	800a936 <netif_do_set_gw+0x28>
 800a934:	2300      	movs	r3, #0
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a93a:	2301      	movs	r3, #1
 800a93c:	e000      	b.n	800a940 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b088      	sub	sp, #32
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
 800a958:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a95a:	2300      	movs	r3, #0
 800a95c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a95e:	2300      	movs	r3, #0
 800a960:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a968:	4b1c      	ldr	r3, [pc, #112]	; (800a9dc <netif_set_addr+0x90>)
 800a96a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a972:	4b1a      	ldr	r3, [pc, #104]	; (800a9dc <netif_set_addr+0x90>)
 800a974:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a97c:	4b17      	ldr	r3, [pc, #92]	; (800a9dc <netif_set_addr+0x90>)
 800a97e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d003      	beq.n	800a98e <netif_set_addr+0x42>
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d101      	bne.n	800a992 <netif_set_addr+0x46>
 800a98e:	2301      	movs	r3, #1
 800a990:	e000      	b.n	800a994 <netif_set_addr+0x48>
 800a992:	2300      	movs	r3, #0
 800a994:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d006      	beq.n	800a9aa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a99c:	f107 0310 	add.w	r3, r7, #16
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	68b9      	ldr	r1, [r7, #8]
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f7ff ff49 	bl	800a83c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a9aa:	69fa      	ldr	r2, [r7, #28]
 800a9ac:	6879      	ldr	r1, [r7, #4]
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f7ff ff8e 	bl	800a8d0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a9b4:	69ba      	ldr	r2, [r7, #24]
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7ff ffa8 	bl	800a90e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d106      	bne.n	800a9d2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a9c4:	f107 0310 	add.w	r3, r7, #16
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	68b9      	ldr	r1, [r7, #8]
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f7ff ff35 	bl	800a83c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a9d2:	bf00      	nop
 800a9d4:	3720      	adds	r7, #32
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	080178e8 	.word	0x080178e8

0800a9e0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a9e8:	4a04      	ldr	r2, [pc, #16]	; (800a9fc <netif_set_default+0x1c>)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a9ee:	bf00      	nop
 800a9f0:	370c      	adds	r7, #12
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	20008db4 	.word	0x20008db4

0800aa00 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d107      	bne.n	800aa1e <netif_set_up+0x1e>
 800aa0e:	4b0f      	ldr	r3, [pc, #60]	; (800aa4c <netif_set_up+0x4c>)
 800aa10:	f44f 7254 	mov.w	r2, #848	; 0x350
 800aa14:	490e      	ldr	r1, [pc, #56]	; (800aa50 <netif_set_up+0x50>)
 800aa16:	480f      	ldr	r0, [pc, #60]	; (800aa54 <netif_set_up+0x54>)
 800aa18:	f009 f85e 	bl	8013ad8 <iprintf>
 800aa1c:	e013      	b.n	800aa46 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aa24:	f003 0301 	and.w	r3, r3, #1
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d10c      	bne.n	800aa46 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aa32:	f043 0301 	orr.w	r3, r3, #1
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800aa3e:	2103      	movs	r1, #3
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 f809 	bl	800aa58 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	080151b4 	.word	0x080151b4
 800aa50:	0801533c 	.word	0x0801533c
 800aa54:	08015204 	.word	0x08015204

0800aa58 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d106      	bne.n	800aa78 <netif_issue_reports+0x20>
 800aa6a:	4b18      	ldr	r3, [pc, #96]	; (800aacc <netif_issue_reports+0x74>)
 800aa6c:	f240 326d 	movw	r2, #877	; 0x36d
 800aa70:	4917      	ldr	r1, [pc, #92]	; (800aad0 <netif_issue_reports+0x78>)
 800aa72:	4818      	ldr	r0, [pc, #96]	; (800aad4 <netif_issue_reports+0x7c>)
 800aa74:	f009 f830 	bl	8013ad8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aa7e:	f003 0304 	and.w	r3, r3, #4
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d01e      	beq.n	800aac4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aa8c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d017      	beq.n	800aac4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800aa94:	78fb      	ldrb	r3, [r7, #3]
 800aa96:	f003 0301 	and.w	r3, r3, #1
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d013      	beq.n	800aac6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00e      	beq.n	800aac6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aaae:	f003 0308 	and.w	r3, r3, #8
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d007      	beq.n	800aac6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	3304      	adds	r3, #4
 800aaba:	4619      	mov	r1, r3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f007 fc3d 	bl	801233c <etharp_request>
 800aac2:	e000      	b.n	800aac6 <netif_issue_reports+0x6e>
    return;
 800aac4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800aac6:	3708      	adds	r7, #8
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	080151b4 	.word	0x080151b4
 800aad0:	08015358 	.word	0x08015358
 800aad4:	08015204 	.word	0x08015204

0800aad8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d107      	bne.n	800aaf6 <netif_set_down+0x1e>
 800aae6:	4b12      	ldr	r3, [pc, #72]	; (800ab30 <netif_set_down+0x58>)
 800aae8:	f240 329b 	movw	r2, #923	; 0x39b
 800aaec:	4911      	ldr	r1, [pc, #68]	; (800ab34 <netif_set_down+0x5c>)
 800aaee:	4812      	ldr	r0, [pc, #72]	; (800ab38 <netif_set_down+0x60>)
 800aaf0:	f008 fff2 	bl	8013ad8 <iprintf>
 800aaf4:	e019      	b.n	800ab2a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aafc:	f003 0301 	and.w	r3, r3, #1
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d012      	beq.n	800ab2a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab0a:	f023 0301 	bic.w	r3, r3, #1
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab1c:	f003 0308 	and.w	r3, r3, #8
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d002      	beq.n	800ab2a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f006 ffc7 	bl	8011ab8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	080151b4 	.word	0x080151b4
 800ab34:	0801537c 	.word	0x0801537c
 800ab38:	08015204 	.word	0x08015204

0800ab3c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d002      	beq.n	800ab52 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	61da      	str	r2, [r3, #28]
  }
}
 800ab52:	bf00      	nop
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b085      	sub	sp, #20
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	60f8      	str	r0, [r7, #12]
 800ab66:	60b9      	str	r1, [r7, #8]
 800ab68:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ab6a:	f06f 030b 	mvn.w	r3, #11
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
	...

0800ab7c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d013      	beq.n	800abb4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <netif_get_by_index+0x48>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	60fb      	str	r3, [r7, #12]
 800ab92:	e00c      	b.n	800abae <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	79fa      	ldrb	r2, [r7, #7]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d101      	bne.n	800aba8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	e006      	b.n	800abb6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	60fb      	str	r3, [r7, #12]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1ef      	bne.n	800ab94 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	20008db0 	.word	0x20008db0

0800abc8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800abc8:	b480      	push	{r7}
 800abca:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800abcc:	4b03      	ldr	r3, [pc, #12]	; (800abdc <pbuf_pool_is_empty+0x14>)
 800abce:	2201      	movs	r2, #1
 800abd0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800abd2:	bf00      	nop
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr
 800abdc:	20008db8 	.word	0x20008db8

0800abe0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	4611      	mov	r1, r2
 800abec:	461a      	mov	r2, r3
 800abee:	460b      	mov	r3, r1
 800abf0:	80fb      	strh	r3, [r7, #6]
 800abf2:	4613      	mov	r3, r2
 800abf4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	88fa      	ldrh	r2, [r7, #6]
 800ac06:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	88ba      	ldrh	r2, [r7, #4]
 800ac0c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ac0e:	8b3b      	ldrh	r3, [r7, #24]
 800ac10:	b2da      	uxtb	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	7f3a      	ldrb	r2, [r7, #28]
 800ac1a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2200      	movs	r2, #0
 800ac26:	73da      	strb	r2, [r3, #15]
}
 800ac28:	bf00      	nop
 800ac2a:	3714      	adds	r7, #20
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b08c      	sub	sp, #48	; 0x30
 800ac38:	af02      	add	r7, sp, #8
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	71fb      	strb	r3, [r7, #7]
 800ac3e:	460b      	mov	r3, r1
 800ac40:	80bb      	strh	r3, [r7, #4]
 800ac42:	4613      	mov	r3, r2
 800ac44:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ac46:	79fb      	ldrb	r3, [r7, #7]
 800ac48:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ac4a:	887b      	ldrh	r3, [r7, #2]
 800ac4c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ac50:	d07f      	beq.n	800ad52 <pbuf_alloc+0x11e>
 800ac52:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ac56:	f300 80c8 	bgt.w	800adea <pbuf_alloc+0x1b6>
 800ac5a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ac5e:	d010      	beq.n	800ac82 <pbuf_alloc+0x4e>
 800ac60:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ac64:	f300 80c1 	bgt.w	800adea <pbuf_alloc+0x1b6>
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d002      	beq.n	800ac72 <pbuf_alloc+0x3e>
 800ac6c:	2b41      	cmp	r3, #65	; 0x41
 800ac6e:	f040 80bc 	bne.w	800adea <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ac72:	887a      	ldrh	r2, [r7, #2]
 800ac74:	88bb      	ldrh	r3, [r7, #4]
 800ac76:	4619      	mov	r1, r3
 800ac78:	2000      	movs	r0, #0
 800ac7a:	f000 f8d1 	bl	800ae20 <pbuf_alloc_reference>
 800ac7e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ac80:	e0bd      	b.n	800adfe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ac82:	2300      	movs	r3, #0
 800ac84:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ac86:	2300      	movs	r3, #0
 800ac88:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ac8a:	88bb      	ldrh	r3, [r7, #4]
 800ac8c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ac8e:	2008      	movs	r0, #8
 800ac90:	f7ff fc76 	bl	800a580 <memp_malloc>
 800ac94:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d109      	bne.n	800acb0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ac9c:	f7ff ff94 	bl	800abc8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800aca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d002      	beq.n	800acac <pbuf_alloc+0x78>
            pbuf_free(p);
 800aca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aca8:	f000 faa8 	bl	800b1fc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800acac:	2300      	movs	r3, #0
 800acae:	e0a7      	b.n	800ae00 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800acb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800acb2:	3303      	adds	r3, #3
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	f023 0303 	bic.w	r3, r3, #3
 800acba:	b29b      	uxth	r3, r3
 800acbc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	8b7a      	ldrh	r2, [r7, #26]
 800acc4:	4293      	cmp	r3, r2
 800acc6:	bf28      	it	cs
 800acc8:	4613      	movcs	r3, r2
 800acca:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800accc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800acce:	3310      	adds	r3, #16
 800acd0:	693a      	ldr	r2, [r7, #16]
 800acd2:	4413      	add	r3, r2
 800acd4:	3303      	adds	r3, #3
 800acd6:	f023 0303 	bic.w	r3, r3, #3
 800acda:	4618      	mov	r0, r3
 800acdc:	89f9      	ldrh	r1, [r7, #14]
 800acde:	8b7a      	ldrh	r2, [r7, #26]
 800ace0:	2300      	movs	r3, #0
 800ace2:	9301      	str	r3, [sp, #4]
 800ace4:	887b      	ldrh	r3, [r7, #2]
 800ace6:	9300      	str	r3, [sp, #0]
 800ace8:	460b      	mov	r3, r1
 800acea:	4601      	mov	r1, r0
 800acec:	6938      	ldr	r0, [r7, #16]
 800acee:	f7ff ff77 	bl	800abe0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	f003 0303 	and.w	r3, r3, #3
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d006      	beq.n	800ad0c <pbuf_alloc+0xd8>
 800acfe:	4b42      	ldr	r3, [pc, #264]	; (800ae08 <pbuf_alloc+0x1d4>)
 800ad00:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad04:	4941      	ldr	r1, [pc, #260]	; (800ae0c <pbuf_alloc+0x1d8>)
 800ad06:	4842      	ldr	r0, [pc, #264]	; (800ae10 <pbuf_alloc+0x1dc>)
 800ad08:	f008 fee6 	bl	8013ad8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ad0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad0e:	3303      	adds	r3, #3
 800ad10:	f023 0303 	bic.w	r3, r3, #3
 800ad14:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ad18:	d106      	bne.n	800ad28 <pbuf_alloc+0xf4>
 800ad1a:	4b3b      	ldr	r3, [pc, #236]	; (800ae08 <pbuf_alloc+0x1d4>)
 800ad1c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ad20:	493c      	ldr	r1, [pc, #240]	; (800ae14 <pbuf_alloc+0x1e0>)
 800ad22:	483b      	ldr	r0, [pc, #236]	; (800ae10 <pbuf_alloc+0x1dc>)
 800ad24:	f008 fed8 	bl	8013ad8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d102      	bne.n	800ad34 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	627b      	str	r3, [r7, #36]	; 0x24
 800ad32:	e002      	b.n	800ad3a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	693a      	ldr	r2, [r7, #16]
 800ad38:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ad3e:	8b7a      	ldrh	r2, [r7, #26]
 800ad40:	89fb      	ldrh	r3, [r7, #14]
 800ad42:	1ad3      	subs	r3, r2, r3
 800ad44:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ad46:	2300      	movs	r3, #0
 800ad48:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ad4a:	8b7b      	ldrh	r3, [r7, #26]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d19e      	bne.n	800ac8e <pbuf_alloc+0x5a>
      break;
 800ad50:	e055      	b.n	800adfe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ad52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad54:	3303      	adds	r3, #3
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	f023 0303 	bic.w	r3, r3, #3
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	88bb      	ldrh	r3, [r7, #4]
 800ad60:	3303      	adds	r3, #3
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	f023 0303 	bic.w	r3, r3, #3
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	4413      	add	r3, r2
 800ad6c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ad6e:	8b3b      	ldrh	r3, [r7, #24]
 800ad70:	3310      	adds	r3, #16
 800ad72:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ad74:	8b3a      	ldrh	r2, [r7, #24]
 800ad76:	88bb      	ldrh	r3, [r7, #4]
 800ad78:	3303      	adds	r3, #3
 800ad7a:	f023 0303 	bic.w	r3, r3, #3
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d306      	bcc.n	800ad90 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ad82:	8afa      	ldrh	r2, [r7, #22]
 800ad84:	88bb      	ldrh	r3, [r7, #4]
 800ad86:	3303      	adds	r3, #3
 800ad88:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d201      	bcs.n	800ad94 <pbuf_alloc+0x160>
        return NULL;
 800ad90:	2300      	movs	r3, #0
 800ad92:	e035      	b.n	800ae00 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ad94:	8afb      	ldrh	r3, [r7, #22]
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7ff fa80 	bl	800a29c <mem_malloc>
 800ad9c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <pbuf_alloc+0x174>
        return NULL;
 800ada4:	2300      	movs	r3, #0
 800ada6:	e02b      	b.n	800ae00 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ada8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800adaa:	3310      	adds	r3, #16
 800adac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adae:	4413      	add	r3, r2
 800adb0:	3303      	adds	r3, #3
 800adb2:	f023 0303 	bic.w	r3, r3, #3
 800adb6:	4618      	mov	r0, r3
 800adb8:	88b9      	ldrh	r1, [r7, #4]
 800adba:	88ba      	ldrh	r2, [r7, #4]
 800adbc:	2300      	movs	r3, #0
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	887b      	ldrh	r3, [r7, #2]
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	460b      	mov	r3, r1
 800adc6:	4601      	mov	r1, r0
 800adc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adca:	f7ff ff09 	bl	800abe0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800adce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	f003 0303 	and.w	r3, r3, #3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d010      	beq.n	800adfc <pbuf_alloc+0x1c8>
 800adda:	4b0b      	ldr	r3, [pc, #44]	; (800ae08 <pbuf_alloc+0x1d4>)
 800addc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ade0:	490d      	ldr	r1, [pc, #52]	; (800ae18 <pbuf_alloc+0x1e4>)
 800ade2:	480b      	ldr	r0, [pc, #44]	; (800ae10 <pbuf_alloc+0x1dc>)
 800ade4:	f008 fe78 	bl	8013ad8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ade8:	e008      	b.n	800adfc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800adea:	4b07      	ldr	r3, [pc, #28]	; (800ae08 <pbuf_alloc+0x1d4>)
 800adec:	f240 1227 	movw	r2, #295	; 0x127
 800adf0:	490a      	ldr	r1, [pc, #40]	; (800ae1c <pbuf_alloc+0x1e8>)
 800adf2:	4807      	ldr	r0, [pc, #28]	; (800ae10 <pbuf_alloc+0x1dc>)
 800adf4:	f008 fe70 	bl	8013ad8 <iprintf>
      return NULL;
 800adf8:	2300      	movs	r3, #0
 800adfa:	e001      	b.n	800ae00 <pbuf_alloc+0x1cc>
      break;
 800adfc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800adfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3728      	adds	r7, #40	; 0x28
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	080153e4 	.word	0x080153e4
 800ae0c:	08015414 	.word	0x08015414
 800ae10:	08015444 	.word	0x08015444
 800ae14:	0801546c 	.word	0x0801546c
 800ae18:	080154a0 	.word	0x080154a0
 800ae1c:	080154cc 	.word	0x080154cc

0800ae20 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af02      	add	r7, sp, #8
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	460b      	mov	r3, r1
 800ae2a:	807b      	strh	r3, [r7, #2]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ae30:	883b      	ldrh	r3, [r7, #0]
 800ae32:	2b41      	cmp	r3, #65	; 0x41
 800ae34:	d009      	beq.n	800ae4a <pbuf_alloc_reference+0x2a>
 800ae36:	883b      	ldrh	r3, [r7, #0]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d006      	beq.n	800ae4a <pbuf_alloc_reference+0x2a>
 800ae3c:	4b0f      	ldr	r3, [pc, #60]	; (800ae7c <pbuf_alloc_reference+0x5c>)
 800ae3e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ae42:	490f      	ldr	r1, [pc, #60]	; (800ae80 <pbuf_alloc_reference+0x60>)
 800ae44:	480f      	ldr	r0, [pc, #60]	; (800ae84 <pbuf_alloc_reference+0x64>)
 800ae46:	f008 fe47 	bl	8013ad8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ae4a:	2007      	movs	r0, #7
 800ae4c:	f7ff fb98 	bl	800a580 <memp_malloc>
 800ae50:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d101      	bne.n	800ae5c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	e00b      	b.n	800ae74 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ae5c:	8879      	ldrh	r1, [r7, #2]
 800ae5e:	887a      	ldrh	r2, [r7, #2]
 800ae60:	2300      	movs	r3, #0
 800ae62:	9301      	str	r3, [sp, #4]
 800ae64:	883b      	ldrh	r3, [r7, #0]
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	6879      	ldr	r1, [r7, #4]
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f7ff feb7 	bl	800abe0 <pbuf_init_alloced_pbuf>
  return p;
 800ae72:	68fb      	ldr	r3, [r7, #12]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	080153e4 	.word	0x080153e4
 800ae80:	080154e8 	.word	0x080154e8
 800ae84:	08015444 	.word	0x08015444

0800ae88 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b088      	sub	sp, #32
 800ae8c:	af02      	add	r7, sp, #8
 800ae8e:	607b      	str	r3, [r7, #4]
 800ae90:	4603      	mov	r3, r0
 800ae92:	73fb      	strb	r3, [r7, #15]
 800ae94:	460b      	mov	r3, r1
 800ae96:	81bb      	strh	r3, [r7, #12]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
 800ae9e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800aea0:	8a7b      	ldrh	r3, [r7, #18]
 800aea2:	3303      	adds	r3, #3
 800aea4:	f023 0203 	bic.w	r2, r3, #3
 800aea8:	89bb      	ldrh	r3, [r7, #12]
 800aeaa:	441a      	add	r2, r3
 800aeac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d901      	bls.n	800aeb6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	e018      	b.n	800aee8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d007      	beq.n	800aecc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800aebc:	8a7b      	ldrh	r3, [r7, #18]
 800aebe:	3303      	adds	r3, #3
 800aec0:	f023 0303 	bic.w	r3, r3, #3
 800aec4:	6a3a      	ldr	r2, [r7, #32]
 800aec6:	4413      	add	r3, r2
 800aec8:	617b      	str	r3, [r7, #20]
 800aeca:	e001      	b.n	800aed0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800aecc:	2300      	movs	r3, #0
 800aece:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	89b9      	ldrh	r1, [r7, #12]
 800aed4:	89ba      	ldrh	r2, [r7, #12]
 800aed6:	2302      	movs	r3, #2
 800aed8:	9301      	str	r3, [sp, #4]
 800aeda:	897b      	ldrh	r3, [r7, #10]
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	460b      	mov	r3, r1
 800aee0:	6979      	ldr	r1, [r7, #20]
 800aee2:	f7ff fe7d 	bl	800abe0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800aee6:	687b      	ldr	r3, [r7, #4]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3718      	adds	r7, #24
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	460b      	mov	r3, r1
 800aefa:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d106      	bne.n	800af10 <pbuf_realloc+0x20>
 800af02:	4b3a      	ldr	r3, [pc, #232]	; (800afec <pbuf_realloc+0xfc>)
 800af04:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800af08:	4939      	ldr	r1, [pc, #228]	; (800aff0 <pbuf_realloc+0x100>)
 800af0a:	483a      	ldr	r0, [pc, #232]	; (800aff4 <pbuf_realloc+0x104>)
 800af0c:	f008 fde4 	bl	8013ad8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	891b      	ldrh	r3, [r3, #8]
 800af14:	887a      	ldrh	r2, [r7, #2]
 800af16:	429a      	cmp	r2, r3
 800af18:	d263      	bcs.n	800afe2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	891a      	ldrh	r2, [r3, #8]
 800af1e:	887b      	ldrh	r3, [r7, #2]
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800af24:	887b      	ldrh	r3, [r7, #2]
 800af26:	817b      	strh	r3, [r7, #10]
  q = p;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800af2c:	e018      	b.n	800af60 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	895b      	ldrh	r3, [r3, #10]
 800af32:	897a      	ldrh	r2, [r7, #10]
 800af34:	1ad3      	subs	r3, r2, r3
 800af36:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	891a      	ldrh	r2, [r3, #8]
 800af3c:	893b      	ldrh	r3, [r7, #8]
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	b29a      	uxth	r2, r3
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d106      	bne.n	800af60 <pbuf_realloc+0x70>
 800af52:	4b26      	ldr	r3, [pc, #152]	; (800afec <pbuf_realloc+0xfc>)
 800af54:	f240 12af 	movw	r2, #431	; 0x1af
 800af58:	4927      	ldr	r1, [pc, #156]	; (800aff8 <pbuf_realloc+0x108>)
 800af5a:	4826      	ldr	r0, [pc, #152]	; (800aff4 <pbuf_realloc+0x104>)
 800af5c:	f008 fdbc 	bl	8013ad8 <iprintf>
  while (rem_len > q->len) {
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	895b      	ldrh	r3, [r3, #10]
 800af64:	897a      	ldrh	r2, [r7, #10]
 800af66:	429a      	cmp	r2, r3
 800af68:	d8e1      	bhi.n	800af2e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	7b1b      	ldrb	r3, [r3, #12]
 800af6e:	f003 030f 	and.w	r3, r3, #15
 800af72:	2b00      	cmp	r3, #0
 800af74:	d121      	bne.n	800afba <pbuf_realloc+0xca>
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	895b      	ldrh	r3, [r3, #10]
 800af7a:	897a      	ldrh	r2, [r7, #10]
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d01c      	beq.n	800afba <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	7b5b      	ldrb	r3, [r3, #13]
 800af84:	f003 0302 	and.w	r3, r3, #2
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d116      	bne.n	800afba <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	685a      	ldr	r2, [r3, #4]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	b29a      	uxth	r2, r3
 800af96:	897b      	ldrh	r3, [r7, #10]
 800af98:	4413      	add	r3, r2
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	4619      	mov	r1, r3
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f7ff f87a 	bl	800a098 <mem_trim>
 800afa4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d106      	bne.n	800afba <pbuf_realloc+0xca>
 800afac:	4b0f      	ldr	r3, [pc, #60]	; (800afec <pbuf_realloc+0xfc>)
 800afae:	f240 12bd 	movw	r2, #445	; 0x1bd
 800afb2:	4912      	ldr	r1, [pc, #72]	; (800affc <pbuf_realloc+0x10c>)
 800afb4:	480f      	ldr	r0, [pc, #60]	; (800aff4 <pbuf_realloc+0x104>)
 800afb6:	f008 fd8f 	bl	8013ad8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	897a      	ldrh	r2, [r7, #10]
 800afbe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	895a      	ldrh	r2, [r3, #10]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d004      	beq.n	800afda <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 f911 	bl	800b1fc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	e000      	b.n	800afe4 <pbuf_realloc+0xf4>
    return;
 800afe2:	bf00      	nop

}
 800afe4:	3710      	adds	r7, #16
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
 800afea:	bf00      	nop
 800afec:	080153e4 	.word	0x080153e4
 800aff0:	080154fc 	.word	0x080154fc
 800aff4:	08015444 	.word	0x08015444
 800aff8:	08015514 	.word	0x08015514
 800affc:	0801552c 	.word	0x0801552c

0800b000 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	4613      	mov	r3, r2
 800b00c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d106      	bne.n	800b022 <pbuf_add_header_impl+0x22>
 800b014:	4b2b      	ldr	r3, [pc, #172]	; (800b0c4 <pbuf_add_header_impl+0xc4>)
 800b016:	f240 12df 	movw	r2, #479	; 0x1df
 800b01a:	492b      	ldr	r1, [pc, #172]	; (800b0c8 <pbuf_add_header_impl+0xc8>)
 800b01c:	482b      	ldr	r0, [pc, #172]	; (800b0cc <pbuf_add_header_impl+0xcc>)
 800b01e:	f008 fd5b 	bl	8013ad8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d003      	beq.n	800b030 <pbuf_add_header_impl+0x30>
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b02e:	d301      	bcc.n	800b034 <pbuf_add_header_impl+0x34>
    return 1;
 800b030:	2301      	movs	r3, #1
 800b032:	e043      	b.n	800b0bc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d101      	bne.n	800b03e <pbuf_add_header_impl+0x3e>
    return 0;
 800b03a:	2300      	movs	r3, #0
 800b03c:	e03e      	b.n	800b0bc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	891a      	ldrh	r2, [r3, #8]
 800b046:	8a7b      	ldrh	r3, [r7, #18]
 800b048:	4413      	add	r3, r2
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	8a7a      	ldrh	r2, [r7, #18]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d901      	bls.n	800b056 <pbuf_add_header_impl+0x56>
    return 1;
 800b052:	2301      	movs	r3, #1
 800b054:	e032      	b.n	800b0bc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	7b1b      	ldrb	r3, [r3, #12]
 800b05a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b05c:	8a3b      	ldrh	r3, [r7, #16]
 800b05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00c      	beq.n	800b080 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	685a      	ldr	r2, [r3, #4]
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	425b      	negs	r3, r3
 800b06e:	4413      	add	r3, r2
 800b070:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3310      	adds	r3, #16
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d20d      	bcs.n	800b098 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b07c:	2301      	movs	r3, #1
 800b07e:	e01d      	b.n	800b0bc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b080:	79fb      	ldrb	r3, [r7, #7]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d006      	beq.n	800b094 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	685a      	ldr	r2, [r3, #4]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	425b      	negs	r3, r3
 800b08e:	4413      	add	r3, r2
 800b090:	617b      	str	r3, [r7, #20]
 800b092:	e001      	b.n	800b098 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b094:	2301      	movs	r3, #1
 800b096:	e011      	b.n	800b0bc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	895a      	ldrh	r2, [r3, #10]
 800b0a2:	8a7b      	ldrh	r3, [r7, #18]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	891a      	ldrh	r2, [r3, #8]
 800b0b0:	8a7b      	ldrh	r3, [r7, #18]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	811a      	strh	r2, [r3, #8]


  return 0;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3718      	adds	r7, #24
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	080153e4 	.word	0x080153e4
 800b0c8:	08015548 	.word	0x08015548
 800b0cc:	08015444 	.word	0x08015444

0800b0d0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b082      	sub	sp, #8
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b0da:	2200      	movs	r2, #0
 800b0dc:	6839      	ldr	r1, [r7, #0]
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7ff ff8e 	bl	800b000 <pbuf_add_header_impl>
 800b0e4:	4603      	mov	r3, r0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
	...

0800b0f0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d106      	bne.n	800b10e <pbuf_remove_header+0x1e>
 800b100:	4b20      	ldr	r3, [pc, #128]	; (800b184 <pbuf_remove_header+0x94>)
 800b102:	f240 224b 	movw	r2, #587	; 0x24b
 800b106:	4920      	ldr	r1, [pc, #128]	; (800b188 <pbuf_remove_header+0x98>)
 800b108:	4820      	ldr	r0, [pc, #128]	; (800b18c <pbuf_remove_header+0x9c>)
 800b10a:	f008 fce5 	bl	8013ad8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d003      	beq.n	800b11c <pbuf_remove_header+0x2c>
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b11a:	d301      	bcc.n	800b120 <pbuf_remove_header+0x30>
    return 1;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e02c      	b.n	800b17a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d101      	bne.n	800b12a <pbuf_remove_header+0x3a>
    return 0;
 800b126:	2300      	movs	r3, #0
 800b128:	e027      	b.n	800b17a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	895b      	ldrh	r3, [r3, #10]
 800b132:	89fa      	ldrh	r2, [r7, #14]
 800b134:	429a      	cmp	r2, r3
 800b136:	d908      	bls.n	800b14a <pbuf_remove_header+0x5a>
 800b138:	4b12      	ldr	r3, [pc, #72]	; (800b184 <pbuf_remove_header+0x94>)
 800b13a:	f240 2255 	movw	r2, #597	; 0x255
 800b13e:	4914      	ldr	r1, [pc, #80]	; (800b190 <pbuf_remove_header+0xa0>)
 800b140:	4812      	ldr	r0, [pc, #72]	; (800b18c <pbuf_remove_header+0x9c>)
 800b142:	f008 fcc9 	bl	8013ad8 <iprintf>
 800b146:	2301      	movs	r3, #1
 800b148:	e017      	b.n	800b17a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	685a      	ldr	r2, [r3, #4]
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	441a      	add	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	895a      	ldrh	r2, [r3, #10]
 800b160:	89fb      	ldrh	r3, [r7, #14]
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	b29a      	uxth	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	891a      	ldrh	r2, [r3, #8]
 800b16e:	89fb      	ldrh	r3, [r7, #14]
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	b29a      	uxth	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b178:	2300      	movs	r3, #0
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3710      	adds	r7, #16
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	080153e4 	.word	0x080153e4
 800b188:	08015548 	.word	0x08015548
 800b18c:	08015444 	.word	0x08015444
 800b190:	08015554 	.word	0x08015554

0800b194 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	460b      	mov	r3, r1
 800b19e:	807b      	strh	r3, [r7, #2]
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b1a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	da08      	bge.n	800b1be <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b1ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b1b0:	425b      	negs	r3, r3
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7ff ff9b 	bl	800b0f0 <pbuf_remove_header>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	e007      	b.n	800b1ce <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b1be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b1c2:	787a      	ldrb	r2, [r7, #1]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f7ff ff1a 	bl	800b000 <pbuf_add_header_impl>
 800b1cc:	4603      	mov	r3, r0
  }
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3708      	adds	r7, #8
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}

0800b1d6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b082      	sub	sp, #8
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	460b      	mov	r3, r1
 800b1e0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b1e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff ffd2 	bl	800b194 <pbuf_header_impl>
 800b1f0:	4603      	mov	r3, r0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
	...

0800b1fc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10b      	bne.n	800b222 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d106      	bne.n	800b21e <pbuf_free+0x22>
 800b210:	4b38      	ldr	r3, [pc, #224]	; (800b2f4 <pbuf_free+0xf8>)
 800b212:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b216:	4938      	ldr	r1, [pc, #224]	; (800b2f8 <pbuf_free+0xfc>)
 800b218:	4838      	ldr	r0, [pc, #224]	; (800b2fc <pbuf_free+0x100>)
 800b21a:	f008 fc5d 	bl	8013ad8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b21e:	2300      	movs	r3, #0
 800b220:	e063      	b.n	800b2ea <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b226:	e05c      	b.n	800b2e2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	7b9b      	ldrb	r3, [r3, #14]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d106      	bne.n	800b23e <pbuf_free+0x42>
 800b230:	4b30      	ldr	r3, [pc, #192]	; (800b2f4 <pbuf_free+0xf8>)
 800b232:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b236:	4932      	ldr	r1, [pc, #200]	; (800b300 <pbuf_free+0x104>)
 800b238:	4830      	ldr	r0, [pc, #192]	; (800b2fc <pbuf_free+0x100>)
 800b23a:	f008 fc4d 	bl	8013ad8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	7b9b      	ldrb	r3, [r3, #14]
 800b242:	3b01      	subs	r3, #1
 800b244:	b2da      	uxtb	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	739a      	strb	r2, [r3, #14]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	7b9b      	ldrb	r3, [r3, #14]
 800b24e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b250:	7dbb      	ldrb	r3, [r7, #22]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d143      	bne.n	800b2de <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	7b1b      	ldrb	r3, [r3, #12]
 800b260:	f003 030f 	and.w	r3, r3, #15
 800b264:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	7b5b      	ldrb	r3, [r3, #13]
 800b26a:	f003 0302 	and.w	r3, r3, #2
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d011      	beq.n	800b296 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d106      	bne.n	800b28c <pbuf_free+0x90>
 800b27e:	4b1d      	ldr	r3, [pc, #116]	; (800b2f4 <pbuf_free+0xf8>)
 800b280:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b284:	491f      	ldr	r1, [pc, #124]	; (800b304 <pbuf_free+0x108>)
 800b286:	481d      	ldr	r0, [pc, #116]	; (800b2fc <pbuf_free+0x100>)
 800b288:	f008 fc26 	bl	8013ad8 <iprintf>
        pc->custom_free_function(p);
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	4798      	blx	r3
 800b294:	e01d      	b.n	800b2d2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b296:	7bfb      	ldrb	r3, [r7, #15]
 800b298:	2b02      	cmp	r3, #2
 800b29a:	d104      	bne.n	800b2a6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b29c:	6879      	ldr	r1, [r7, #4]
 800b29e:	2008      	movs	r0, #8
 800b2a0:	f7ff f9ba 	bl	800a618 <memp_free>
 800b2a4:	e015      	b.n	800b2d2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b2a6:	7bfb      	ldrb	r3, [r7, #15]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d104      	bne.n	800b2b6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b2ac:	6879      	ldr	r1, [r7, #4]
 800b2ae:	2007      	movs	r0, #7
 800b2b0:	f7ff f9b2 	bl	800a618 <memp_free>
 800b2b4:	e00d      	b.n	800b2d2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b2b6:	7bfb      	ldrb	r3, [r7, #15]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d103      	bne.n	800b2c4 <pbuf_free+0xc8>
          mem_free(p);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7fe fe81 	bl	8009fc4 <mem_free>
 800b2c2:	e006      	b.n	800b2d2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b2c4:	4b0b      	ldr	r3, [pc, #44]	; (800b2f4 <pbuf_free+0xf8>)
 800b2c6:	f240 320f 	movw	r2, #783	; 0x30f
 800b2ca:	490f      	ldr	r1, [pc, #60]	; (800b308 <pbuf_free+0x10c>)
 800b2cc:	480b      	ldr	r0, [pc, #44]	; (800b2fc <pbuf_free+0x100>)
 800b2ce:	f008 fc03 	bl	8013ad8 <iprintf>
        }
      }
      count++;
 800b2d2:	7dfb      	ldrb	r3, [r7, #23]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	607b      	str	r3, [r7, #4]
 800b2dc:	e001      	b.n	800b2e2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d19f      	bne.n	800b228 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3718      	adds	r7, #24
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	080153e4 	.word	0x080153e4
 800b2f8:	08015548 	.word	0x08015548
 800b2fc:	08015444 	.word	0x08015444
 800b300:	08015574 	.word	0x08015574
 800b304:	0801558c 	.word	0x0801558c
 800b308:	080155b0 	.word	0x080155b0

0800b30c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b314:	2300      	movs	r3, #0
 800b316:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b318:	e005      	b.n	800b326 <pbuf_clen+0x1a>
    ++len;
 800b31a:	89fb      	ldrh	r3, [r7, #14]
 800b31c:	3301      	adds	r3, #1
 800b31e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d1f6      	bne.n	800b31a <pbuf_clen+0xe>
  }
  return len;
 800b32c:	89fb      	ldrh	r3, [r7, #14]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
	...

0800b33c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d010      	beq.n	800b36c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	7b9b      	ldrb	r3, [r3, #14]
 800b34e:	3301      	adds	r3, #1
 800b350:	b2da      	uxtb	r2, r3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	7b9b      	ldrb	r3, [r3, #14]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d106      	bne.n	800b36c <pbuf_ref+0x30>
 800b35e:	4b05      	ldr	r3, [pc, #20]	; (800b374 <pbuf_ref+0x38>)
 800b360:	f240 3242 	movw	r2, #834	; 0x342
 800b364:	4904      	ldr	r1, [pc, #16]	; (800b378 <pbuf_ref+0x3c>)
 800b366:	4805      	ldr	r0, [pc, #20]	; (800b37c <pbuf_ref+0x40>)
 800b368:	f008 fbb6 	bl	8013ad8 <iprintf>
  }
}
 800b36c:	bf00      	nop
 800b36e:	3708      	adds	r7, #8
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	080153e4 	.word	0x080153e4
 800b378:	080155c4 	.word	0x080155c4
 800b37c:	08015444 	.word	0x08015444

0800b380 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d002      	beq.n	800b396 <pbuf_cat+0x16>
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d107      	bne.n	800b3a6 <pbuf_cat+0x26>
 800b396:	4b20      	ldr	r3, [pc, #128]	; (800b418 <pbuf_cat+0x98>)
 800b398:	f240 3259 	movw	r2, #857	; 0x359
 800b39c:	491f      	ldr	r1, [pc, #124]	; (800b41c <pbuf_cat+0x9c>)
 800b39e:	4820      	ldr	r0, [pc, #128]	; (800b420 <pbuf_cat+0xa0>)
 800b3a0:	f008 fb9a 	bl	8013ad8 <iprintf>
 800b3a4:	e034      	b.n	800b410 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	60fb      	str	r3, [r7, #12]
 800b3aa:	e00a      	b.n	800b3c2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	891a      	ldrh	r2, [r3, #8]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	891b      	ldrh	r3, [r3, #8]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	60fb      	str	r3, [r7, #12]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1f0      	bne.n	800b3ac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	891a      	ldrh	r2, [r3, #8]
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	895b      	ldrh	r3, [r3, #10]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d006      	beq.n	800b3e4 <pbuf_cat+0x64>
 800b3d6:	4b10      	ldr	r3, [pc, #64]	; (800b418 <pbuf_cat+0x98>)
 800b3d8:	f240 3262 	movw	r2, #866	; 0x362
 800b3dc:	4911      	ldr	r1, [pc, #68]	; (800b424 <pbuf_cat+0xa4>)
 800b3de:	4810      	ldr	r0, [pc, #64]	; (800b420 <pbuf_cat+0xa0>)
 800b3e0:	f008 fb7a 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d006      	beq.n	800b3fa <pbuf_cat+0x7a>
 800b3ec:	4b0a      	ldr	r3, [pc, #40]	; (800b418 <pbuf_cat+0x98>)
 800b3ee:	f240 3263 	movw	r2, #867	; 0x363
 800b3f2:	490d      	ldr	r1, [pc, #52]	; (800b428 <pbuf_cat+0xa8>)
 800b3f4:	480a      	ldr	r0, [pc, #40]	; (800b420 <pbuf_cat+0xa0>)
 800b3f6:	f008 fb6f 	bl	8013ad8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	891a      	ldrh	r2, [r3, #8]
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	891b      	ldrh	r3, [r3, #8]
 800b402:	4413      	add	r3, r2
 800b404:	b29a      	uxth	r2, r3
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	683a      	ldr	r2, [r7, #0]
 800b40e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	080153e4 	.word	0x080153e4
 800b41c:	080155d8 	.word	0x080155d8
 800b420:	08015444 	.word	0x08015444
 800b424:	08015610 	.word	0x08015610
 800b428:	08015640 	.word	0x08015640

0800b42c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f7ff ffa1 	bl	800b380 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b43e:	6838      	ldr	r0, [r7, #0]
 800b440:	f7ff ff7c 	bl	800b33c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b444:	bf00      	nop
 800b446:	3708      	adds	r7, #8
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b086      	sub	sp, #24
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b456:	2300      	movs	r3, #0
 800b458:	617b      	str	r3, [r7, #20]
 800b45a:	2300      	movs	r3, #0
 800b45c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d008      	beq.n	800b476 <pbuf_copy+0x2a>
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d005      	beq.n	800b476 <pbuf_copy+0x2a>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	891a      	ldrh	r2, [r3, #8]
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	891b      	ldrh	r3, [r3, #8]
 800b472:	429a      	cmp	r2, r3
 800b474:	d209      	bcs.n	800b48a <pbuf_copy+0x3e>
 800b476:	4b57      	ldr	r3, [pc, #348]	; (800b5d4 <pbuf_copy+0x188>)
 800b478:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b47c:	4956      	ldr	r1, [pc, #344]	; (800b5d8 <pbuf_copy+0x18c>)
 800b47e:	4857      	ldr	r0, [pc, #348]	; (800b5dc <pbuf_copy+0x190>)
 800b480:	f008 fb2a 	bl	8013ad8 <iprintf>
 800b484:	f06f 030f 	mvn.w	r3, #15
 800b488:	e09f      	b.n	800b5ca <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	895b      	ldrh	r3, [r3, #10]
 800b48e:	461a      	mov	r2, r3
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	1ad2      	subs	r2, r2, r3
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	895b      	ldrh	r3, [r3, #10]
 800b498:	4619      	mov	r1, r3
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	1acb      	subs	r3, r1, r3
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d306      	bcc.n	800b4b0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	895b      	ldrh	r3, [r3, #10]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	60fb      	str	r3, [r7, #12]
 800b4ae:	e005      	b.n	800b4bc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	895b      	ldrh	r3, [r3, #10]
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685a      	ldr	r2, [r3, #4]
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	18d0      	adds	r0, r2, r3
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	685a      	ldr	r2, [r3, #4]
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	68fa      	ldr	r2, [r7, #12]
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	f008 faec 	bl	8013aac <memcpy>
    offset_to += len;
 800b4d4:	697a      	ldr	r2, [r7, #20]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	4413      	add	r3, r2
 800b4da:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b4dc:	693a      	ldr	r2, [r7, #16]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	895b      	ldrh	r3, [r3, #10]
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d906      	bls.n	800b4fe <pbuf_copy+0xb2>
 800b4f0:	4b38      	ldr	r3, [pc, #224]	; (800b5d4 <pbuf_copy+0x188>)
 800b4f2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b4f6:	493a      	ldr	r1, [pc, #232]	; (800b5e0 <pbuf_copy+0x194>)
 800b4f8:	4838      	ldr	r0, [pc, #224]	; (800b5dc <pbuf_copy+0x190>)
 800b4fa:	f008 faed 	bl	8013ad8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	895b      	ldrh	r3, [r3, #10]
 800b502:	461a      	mov	r2, r3
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	4293      	cmp	r3, r2
 800b508:	d906      	bls.n	800b518 <pbuf_copy+0xcc>
 800b50a:	4b32      	ldr	r3, [pc, #200]	; (800b5d4 <pbuf_copy+0x188>)
 800b50c:	f240 32da 	movw	r2, #986	; 0x3da
 800b510:	4934      	ldr	r1, [pc, #208]	; (800b5e4 <pbuf_copy+0x198>)
 800b512:	4832      	ldr	r0, [pc, #200]	; (800b5dc <pbuf_copy+0x190>)
 800b514:	f008 fae0 	bl	8013ad8 <iprintf>
    if (offset_from >= p_from->len) {
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	895b      	ldrh	r3, [r3, #10]
 800b51c:	461a      	mov	r2, r3
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	4293      	cmp	r3, r2
 800b522:	d304      	bcc.n	800b52e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b524:	2300      	movs	r3, #0
 800b526:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	895b      	ldrh	r3, [r3, #10]
 800b532:	461a      	mov	r2, r3
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	4293      	cmp	r3, r2
 800b538:	d114      	bne.n	800b564 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b53a:	2300      	movs	r3, #0
 800b53c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10c      	bne.n	800b564 <pbuf_copy+0x118>
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d009      	beq.n	800b564 <pbuf_copy+0x118>
 800b550:	4b20      	ldr	r3, [pc, #128]	; (800b5d4 <pbuf_copy+0x188>)
 800b552:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b556:	4924      	ldr	r1, [pc, #144]	; (800b5e8 <pbuf_copy+0x19c>)
 800b558:	4820      	ldr	r0, [pc, #128]	; (800b5dc <pbuf_copy+0x190>)
 800b55a:	f008 fabd 	bl	8013ad8 <iprintf>
 800b55e:	f06f 030f 	mvn.w	r3, #15
 800b562:	e032      	b.n	800b5ca <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d013      	beq.n	800b592 <pbuf_copy+0x146>
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	895a      	ldrh	r2, [r3, #10]
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	891b      	ldrh	r3, [r3, #8]
 800b572:	429a      	cmp	r2, r3
 800b574:	d10d      	bne.n	800b592 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d009      	beq.n	800b592 <pbuf_copy+0x146>
 800b57e:	4b15      	ldr	r3, [pc, #84]	; (800b5d4 <pbuf_copy+0x188>)
 800b580:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b584:	4919      	ldr	r1, [pc, #100]	; (800b5ec <pbuf_copy+0x1a0>)
 800b586:	4815      	ldr	r0, [pc, #84]	; (800b5dc <pbuf_copy+0x190>)
 800b588:	f008 faa6 	bl	8013ad8 <iprintf>
 800b58c:	f06f 0305 	mvn.w	r3, #5
 800b590:	e01b      	b.n	800b5ca <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d013      	beq.n	800b5c0 <pbuf_copy+0x174>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	895a      	ldrh	r2, [r3, #10]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	891b      	ldrh	r3, [r3, #8]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d10d      	bne.n	800b5c0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d009      	beq.n	800b5c0 <pbuf_copy+0x174>
 800b5ac:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <pbuf_copy+0x188>)
 800b5ae:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b5b2:	490e      	ldr	r1, [pc, #56]	; (800b5ec <pbuf_copy+0x1a0>)
 800b5b4:	4809      	ldr	r0, [pc, #36]	; (800b5dc <pbuf_copy+0x190>)
 800b5b6:	f008 fa8f 	bl	8013ad8 <iprintf>
 800b5ba:	f06f 0305 	mvn.w	r3, #5
 800b5be:	e004      	b.n	800b5ca <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f47f af61 	bne.w	800b48a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3718      	adds	r7, #24
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	080153e4 	.word	0x080153e4
 800b5d8:	0801568c 	.word	0x0801568c
 800b5dc:	08015444 	.word	0x08015444
 800b5e0:	080156bc 	.word	0x080156bc
 800b5e4:	080156d4 	.word	0x080156d4
 800b5e8:	080156f0 	.word	0x080156f0
 800b5ec:	08015700 	.word	0x08015700

0800b5f0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b088      	sub	sp, #32
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	4611      	mov	r1, r2
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	460b      	mov	r3, r1
 800b600:	80fb      	strh	r3, [r7, #6]
 800b602:	4613      	mov	r3, r2
 800b604:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b60a:	2300      	movs	r3, #0
 800b60c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d108      	bne.n	800b626 <pbuf_copy_partial+0x36>
 800b614:	4b2b      	ldr	r3, [pc, #172]	; (800b6c4 <pbuf_copy_partial+0xd4>)
 800b616:	f240 420a 	movw	r2, #1034	; 0x40a
 800b61a:	492b      	ldr	r1, [pc, #172]	; (800b6c8 <pbuf_copy_partial+0xd8>)
 800b61c:	482b      	ldr	r0, [pc, #172]	; (800b6cc <pbuf_copy_partial+0xdc>)
 800b61e:	f008 fa5b 	bl	8013ad8 <iprintf>
 800b622:	2300      	movs	r3, #0
 800b624:	e04a      	b.n	800b6bc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d108      	bne.n	800b63e <pbuf_copy_partial+0x4e>
 800b62c:	4b25      	ldr	r3, [pc, #148]	; (800b6c4 <pbuf_copy_partial+0xd4>)
 800b62e:	f240 420b 	movw	r2, #1035	; 0x40b
 800b632:	4927      	ldr	r1, [pc, #156]	; (800b6d0 <pbuf_copy_partial+0xe0>)
 800b634:	4825      	ldr	r0, [pc, #148]	; (800b6cc <pbuf_copy_partial+0xdc>)
 800b636:	f008 fa4f 	bl	8013ad8 <iprintf>
 800b63a:	2300      	movs	r3, #0
 800b63c:	e03e      	b.n	800b6bc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	61fb      	str	r3, [r7, #28]
 800b642:	e034      	b.n	800b6ae <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b644:	88bb      	ldrh	r3, [r7, #4]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00a      	beq.n	800b660 <pbuf_copy_partial+0x70>
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	895b      	ldrh	r3, [r3, #10]
 800b64e:	88ba      	ldrh	r2, [r7, #4]
 800b650:	429a      	cmp	r2, r3
 800b652:	d305      	bcc.n	800b660 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	895b      	ldrh	r3, [r3, #10]
 800b658:	88ba      	ldrh	r2, [r7, #4]
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	80bb      	strh	r3, [r7, #4]
 800b65e:	e023      	b.n	800b6a8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	895a      	ldrh	r2, [r3, #10]
 800b664:	88bb      	ldrh	r3, [r7, #4]
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b66a:	8b3a      	ldrh	r2, [r7, #24]
 800b66c:	88fb      	ldrh	r3, [r7, #6]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d901      	bls.n	800b676 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b672:	88fb      	ldrh	r3, [r7, #6]
 800b674:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b676:	8b7b      	ldrh	r3, [r7, #26]
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	18d0      	adds	r0, r2, r3
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	685a      	ldr	r2, [r3, #4]
 800b680:	88bb      	ldrh	r3, [r7, #4]
 800b682:	4413      	add	r3, r2
 800b684:	8b3a      	ldrh	r2, [r7, #24]
 800b686:	4619      	mov	r1, r3
 800b688:	f008 fa10 	bl	8013aac <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b68c:	8afa      	ldrh	r2, [r7, #22]
 800b68e:	8b3b      	ldrh	r3, [r7, #24]
 800b690:	4413      	add	r3, r2
 800b692:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b694:	8b7a      	ldrh	r2, [r7, #26]
 800b696:	8b3b      	ldrh	r3, [r7, #24]
 800b698:	4413      	add	r3, r2
 800b69a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b69c:	88fa      	ldrh	r2, [r7, #6]
 800b69e:	8b3b      	ldrh	r3, [r7, #24]
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	61fb      	str	r3, [r7, #28]
 800b6ae:	88fb      	ldrh	r3, [r7, #6]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <pbuf_copy_partial+0xca>
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1c4      	bne.n	800b644 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b6ba:	8afb      	ldrh	r3, [r7, #22]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3720      	adds	r7, #32
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	080153e4 	.word	0x080153e4
 800b6c8:	0801572c 	.word	0x0801572c
 800b6cc:	08015444 	.word	0x08015444
 800b6d0:	0801574c 	.word	0x0801574c

0800b6d4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	4603      	mov	r3, r0
 800b6dc:	603a      	str	r2, [r7, #0]
 800b6de:	71fb      	strb	r3, [r7, #7]
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	8919      	ldrh	r1, [r3, #8]
 800b6e8:	88ba      	ldrh	r2, [r7, #4]
 800b6ea:	79fb      	ldrb	r3, [r7, #7]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7ff faa1 	bl	800ac34 <pbuf_alloc>
 800b6f2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d101      	bne.n	800b6fe <pbuf_clone+0x2a>
    return NULL;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	e011      	b.n	800b722 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f7ff fea3 	bl	800b44c <pbuf_copy>
 800b706:	4603      	mov	r3, r0
 800b708:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b70a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d006      	beq.n	800b720 <pbuf_clone+0x4c>
 800b712:	4b06      	ldr	r3, [pc, #24]	; (800b72c <pbuf_clone+0x58>)
 800b714:	f240 5224 	movw	r2, #1316	; 0x524
 800b718:	4905      	ldr	r1, [pc, #20]	; (800b730 <pbuf_clone+0x5c>)
 800b71a:	4806      	ldr	r0, [pc, #24]	; (800b734 <pbuf_clone+0x60>)
 800b71c:	f008 f9dc 	bl	8013ad8 <iprintf>
  return q;
 800b720:	68fb      	ldr	r3, [r7, #12]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	080153e4 	.word	0x080153e4
 800b730:	08015858 	.word	0x08015858
 800b734:	08015444 	.word	0x08015444

0800b738 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b73c:	f008 fa5a 	bl	8013bf4 <rand>
 800b740:	4603      	mov	r3, r0
 800b742:	b29b      	uxth	r3, r3
 800b744:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b748:	b29b      	uxth	r3, r3
 800b74a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b74e:	b29a      	uxth	r2, r3
 800b750:	4b01      	ldr	r3, [pc, #4]	; (800b758 <tcp_init+0x20>)
 800b752:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b754:	bf00      	nop
 800b756:	bd80      	pop	{r7, pc}
 800b758:	2000000e 	.word	0x2000000e

0800b75c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	7d1b      	ldrb	r3, [r3, #20]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d105      	bne.n	800b778 <tcp_free+0x1c>
 800b76c:	4b06      	ldr	r3, [pc, #24]	; (800b788 <tcp_free+0x2c>)
 800b76e:	22d4      	movs	r2, #212	; 0xd4
 800b770:	4906      	ldr	r1, [pc, #24]	; (800b78c <tcp_free+0x30>)
 800b772:	4807      	ldr	r0, [pc, #28]	; (800b790 <tcp_free+0x34>)
 800b774:	f008 f9b0 	bl	8013ad8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b778:	6879      	ldr	r1, [r7, #4]
 800b77a:	2001      	movs	r0, #1
 800b77c:	f7fe ff4c 	bl	800a618 <memp_free>
}
 800b780:	bf00      	nop
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	080158e4 	.word	0x080158e4
 800b78c:	08015914 	.word	0x08015914
 800b790:	08015928 	.word	0x08015928

0800b794 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	7d1b      	ldrb	r3, [r3, #20]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d105      	bne.n	800b7b0 <tcp_free_listen+0x1c>
 800b7a4:	4b06      	ldr	r3, [pc, #24]	; (800b7c0 <tcp_free_listen+0x2c>)
 800b7a6:	22df      	movs	r2, #223	; 0xdf
 800b7a8:	4906      	ldr	r1, [pc, #24]	; (800b7c4 <tcp_free_listen+0x30>)
 800b7aa:	4807      	ldr	r0, [pc, #28]	; (800b7c8 <tcp_free_listen+0x34>)
 800b7ac:	f008 f994 	bl	8013ad8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b7b0:	6879      	ldr	r1, [r7, #4]
 800b7b2:	2002      	movs	r0, #2
 800b7b4:	f7fe ff30 	bl	800a618 <memp_free>
}
 800b7b8:	bf00      	nop
 800b7ba:	3708      	adds	r7, #8
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	080158e4 	.word	0x080158e4
 800b7c4:	08015950 	.word	0x08015950
 800b7c8:	08015928 	.word	0x08015928

0800b7cc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b7d0:	f000 fea2 	bl	800c518 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b7d4:	4b07      	ldr	r3, [pc, #28]	; (800b7f4 <tcp_tmr+0x28>)
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	4b05      	ldr	r3, [pc, #20]	; (800b7f4 <tcp_tmr+0x28>)
 800b7de:	701a      	strb	r2, [r3, #0]
 800b7e0:	4b04      	ldr	r3, [pc, #16]	; (800b7f4 <tcp_tmr+0x28>)
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	f003 0301 	and.w	r3, r3, #1
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b7ec:	f000 fb54 	bl	800be98 <tcp_slowtmr>
  }
}
 800b7f0:	bf00      	nop
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	200000d5 	.word	0x200000d5

0800b7f8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d105      	bne.n	800b814 <tcp_remove_listener+0x1c>
 800b808:	4b0d      	ldr	r3, [pc, #52]	; (800b840 <tcp_remove_listener+0x48>)
 800b80a:	22ff      	movs	r2, #255	; 0xff
 800b80c:	490d      	ldr	r1, [pc, #52]	; (800b844 <tcp_remove_listener+0x4c>)
 800b80e:	480e      	ldr	r0, [pc, #56]	; (800b848 <tcp_remove_listener+0x50>)
 800b810:	f008 f962 	bl	8013ad8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	60fb      	str	r3, [r7, #12]
 800b818:	e00a      	b.n	800b830 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	429a      	cmp	r2, r3
 800b822:	d102      	bne.n	800b82a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	60fb      	str	r3, [r7, #12]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1f1      	bne.n	800b81a <tcp_remove_listener+0x22>
    }
  }
}
 800b836:	bf00      	nop
 800b838:	bf00      	nop
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	080158e4 	.word	0x080158e4
 800b844:	0801596c 	.word	0x0801596c
 800b848:	08015928 	.word	0x08015928

0800b84c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d106      	bne.n	800b868 <tcp_listen_closed+0x1c>
 800b85a:	4b14      	ldr	r3, [pc, #80]	; (800b8ac <tcp_listen_closed+0x60>)
 800b85c:	f240 1211 	movw	r2, #273	; 0x111
 800b860:	4913      	ldr	r1, [pc, #76]	; (800b8b0 <tcp_listen_closed+0x64>)
 800b862:	4814      	ldr	r0, [pc, #80]	; (800b8b4 <tcp_listen_closed+0x68>)
 800b864:	f008 f938 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	7d1b      	ldrb	r3, [r3, #20]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d006      	beq.n	800b87e <tcp_listen_closed+0x32>
 800b870:	4b0e      	ldr	r3, [pc, #56]	; (800b8ac <tcp_listen_closed+0x60>)
 800b872:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b876:	4910      	ldr	r1, [pc, #64]	; (800b8b8 <tcp_listen_closed+0x6c>)
 800b878:	480e      	ldr	r0, [pc, #56]	; (800b8b4 <tcp_listen_closed+0x68>)
 800b87a:	f008 f92d 	bl	8013ad8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b87e:	2301      	movs	r3, #1
 800b880:	60fb      	str	r3, [r7, #12]
 800b882:	e00b      	b.n	800b89c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b884:	4a0d      	ldr	r2, [pc, #52]	; (800b8bc <tcp_listen_closed+0x70>)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6879      	ldr	r1, [r7, #4]
 800b890:	4618      	mov	r0, r3
 800b892:	f7ff ffb1 	bl	800b7f8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	3301      	adds	r3, #1
 800b89a:	60fb      	str	r3, [r7, #12]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d9f0      	bls.n	800b884 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b8a2:	bf00      	nop
 800b8a4:	bf00      	nop
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	080158e4 	.word	0x080158e4
 800b8b0:	08015994 	.word	0x08015994
 800b8b4:	08015928 	.word	0x08015928
 800b8b8:	080159a0 	.word	0x080159a0
 800b8bc:	080178c0 	.word	0x080178c0

0800b8c0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b8c0:	b5b0      	push	{r4, r5, r7, lr}
 800b8c2:	b088      	sub	sp, #32
 800b8c4:	af04      	add	r7, sp, #16
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d106      	bne.n	800b8e0 <tcp_close_shutdown+0x20>
 800b8d2:	4b63      	ldr	r3, [pc, #396]	; (800ba60 <tcp_close_shutdown+0x1a0>)
 800b8d4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b8d8:	4962      	ldr	r1, [pc, #392]	; (800ba64 <tcp_close_shutdown+0x1a4>)
 800b8da:	4863      	ldr	r0, [pc, #396]	; (800ba68 <tcp_close_shutdown+0x1a8>)
 800b8dc:	f008 f8fc 	bl	8013ad8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b8e0:	78fb      	ldrb	r3, [r7, #3]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d066      	beq.n	800b9b4 <tcp_close_shutdown+0xf4>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	7d1b      	ldrb	r3, [r3, #20]
 800b8ea:	2b04      	cmp	r3, #4
 800b8ec:	d003      	beq.n	800b8f6 <tcp_close_shutdown+0x36>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	7d1b      	ldrb	r3, [r3, #20]
 800b8f2:	2b07      	cmp	r3, #7
 800b8f4:	d15e      	bne.n	800b9b4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d104      	bne.n	800b908 <tcp_close_shutdown+0x48>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b902:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b906:	d055      	beq.n	800b9b4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	8b5b      	ldrh	r3, [r3, #26]
 800b90c:	f003 0310 	and.w	r3, r3, #16
 800b910:	2b00      	cmp	r3, #0
 800b912:	d106      	bne.n	800b922 <tcp_close_shutdown+0x62>
 800b914:	4b52      	ldr	r3, [pc, #328]	; (800ba60 <tcp_close_shutdown+0x1a0>)
 800b916:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b91a:	4954      	ldr	r1, [pc, #336]	; (800ba6c <tcp_close_shutdown+0x1ac>)
 800b91c:	4852      	ldr	r0, [pc, #328]	; (800ba68 <tcp_close_shutdown+0x1a8>)
 800b91e:	f008 f8db 	bl	8013ad8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b92a:	687d      	ldr	r5, [r7, #4]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	3304      	adds	r3, #4
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	8ad2      	ldrh	r2, [r2, #22]
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	8b09      	ldrh	r1, [r1, #24]
 800b938:	9102      	str	r1, [sp, #8]
 800b93a:	9201      	str	r2, [sp, #4]
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	462b      	mov	r3, r5
 800b940:	4622      	mov	r2, r4
 800b942:	4601      	mov	r1, r0
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f004 fe8d 	bl	8010664 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f001 f8c6 	bl	800cadc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b950:	4b47      	ldr	r3, [pc, #284]	; (800ba70 <tcp_close_shutdown+0x1b0>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	429a      	cmp	r2, r3
 800b958:	d105      	bne.n	800b966 <tcp_close_shutdown+0xa6>
 800b95a:	4b45      	ldr	r3, [pc, #276]	; (800ba70 <tcp_close_shutdown+0x1b0>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68db      	ldr	r3, [r3, #12]
 800b960:	4a43      	ldr	r2, [pc, #268]	; (800ba70 <tcp_close_shutdown+0x1b0>)
 800b962:	6013      	str	r3, [r2, #0]
 800b964:	e013      	b.n	800b98e <tcp_close_shutdown+0xce>
 800b966:	4b42      	ldr	r3, [pc, #264]	; (800ba70 <tcp_close_shutdown+0x1b0>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	60fb      	str	r3, [r7, #12]
 800b96c:	e00c      	b.n	800b988 <tcp_close_shutdown+0xc8>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	429a      	cmp	r2, r3
 800b976:	d104      	bne.n	800b982 <tcp_close_shutdown+0xc2>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	68da      	ldr	r2, [r3, #12]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	60da      	str	r2, [r3, #12]
 800b980:	e005      	b.n	800b98e <tcp_close_shutdown+0xce>
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	60fb      	str	r3, [r7, #12]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1ef      	bne.n	800b96e <tcp_close_shutdown+0xae>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2200      	movs	r2, #0
 800b992:	60da      	str	r2, [r3, #12]
 800b994:	4b37      	ldr	r3, [pc, #220]	; (800ba74 <tcp_close_shutdown+0x1b4>)
 800b996:	2201      	movs	r2, #1
 800b998:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b99a:	4b37      	ldr	r3, [pc, #220]	; (800ba78 <tcp_close_shutdown+0x1b8>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d102      	bne.n	800b9aa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b9a4:	f003 fd5a 	bl	800f45c <tcp_trigger_input_pcb_close>
 800b9a8:	e002      	b.n	800b9b0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7ff fed6 	bl	800b75c <tcp_free>
      }
      return ERR_OK;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	e050      	b.n	800ba56 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	7d1b      	ldrb	r3, [r3, #20]
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	d03b      	beq.n	800ba34 <tcp_close_shutdown+0x174>
 800b9bc:	2b02      	cmp	r3, #2
 800b9be:	dc44      	bgt.n	800ba4a <tcp_close_shutdown+0x18a>
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d002      	beq.n	800b9ca <tcp_close_shutdown+0x10a>
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d02a      	beq.n	800ba1e <tcp_close_shutdown+0x15e>
 800b9c8:	e03f      	b.n	800ba4a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	8adb      	ldrh	r3, [r3, #22]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d021      	beq.n	800ba16 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b9d2:	4b2a      	ldr	r3, [pc, #168]	; (800ba7c <tcp_close_shutdown+0x1bc>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d105      	bne.n	800b9e8 <tcp_close_shutdown+0x128>
 800b9dc:	4b27      	ldr	r3, [pc, #156]	; (800ba7c <tcp_close_shutdown+0x1bc>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	4a26      	ldr	r2, [pc, #152]	; (800ba7c <tcp_close_shutdown+0x1bc>)
 800b9e4:	6013      	str	r3, [r2, #0]
 800b9e6:	e013      	b.n	800ba10 <tcp_close_shutdown+0x150>
 800b9e8:	4b24      	ldr	r3, [pc, #144]	; (800ba7c <tcp_close_shutdown+0x1bc>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	60bb      	str	r3, [r7, #8]
 800b9ee:	e00c      	b.n	800ba0a <tcp_close_shutdown+0x14a>
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d104      	bne.n	800ba04 <tcp_close_shutdown+0x144>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	68da      	ldr	r2, [r3, #12]
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	60da      	str	r2, [r3, #12]
 800ba02:	e005      	b.n	800ba10 <tcp_close_shutdown+0x150>
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	60bb      	str	r3, [r7, #8]
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1ef      	bne.n	800b9f0 <tcp_close_shutdown+0x130>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f7ff fea0 	bl	800b75c <tcp_free>
      break;
 800ba1c:	e01a      	b.n	800ba54 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f7ff ff14 	bl	800b84c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ba24:	6879      	ldr	r1, [r7, #4]
 800ba26:	4816      	ldr	r0, [pc, #88]	; (800ba80 <tcp_close_shutdown+0x1c0>)
 800ba28:	f001 f8a8 	bl	800cb7c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7ff feb1 	bl	800b794 <tcp_free_listen>
      break;
 800ba32:	e00f      	b.n	800ba54 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ba34:	6879      	ldr	r1, [r7, #4]
 800ba36:	480e      	ldr	r0, [pc, #56]	; (800ba70 <tcp_close_shutdown+0x1b0>)
 800ba38:	f001 f8a0 	bl	800cb7c <tcp_pcb_remove>
 800ba3c:	4b0d      	ldr	r3, [pc, #52]	; (800ba74 <tcp_close_shutdown+0x1b4>)
 800ba3e:	2201      	movs	r2, #1
 800ba40:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7ff fe8a 	bl	800b75c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ba48:	e004      	b.n	800ba54 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f81a 	bl	800ba84 <tcp_close_shutdown_fin>
 800ba50:	4603      	mov	r3, r0
 800ba52:	e000      	b.n	800ba56 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bdb0      	pop	{r4, r5, r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	080158e4 	.word	0x080158e4
 800ba64:	080159b8 	.word	0x080159b8
 800ba68:	08015928 	.word	0x08015928
 800ba6c:	080159d8 	.word	0x080159d8
 800ba70:	20008dc0 	.word	0x20008dc0
 800ba74:	20008dbc 	.word	0x20008dbc
 800ba78:	20008dd4 	.word	0x20008dd4
 800ba7c:	20008dcc 	.word	0x20008dcc
 800ba80:	20008dc8 	.word	0x20008dc8

0800ba84 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d106      	bne.n	800baa0 <tcp_close_shutdown_fin+0x1c>
 800ba92:	4b2e      	ldr	r3, [pc, #184]	; (800bb4c <tcp_close_shutdown_fin+0xc8>)
 800ba94:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ba98:	492d      	ldr	r1, [pc, #180]	; (800bb50 <tcp_close_shutdown_fin+0xcc>)
 800ba9a:	482e      	ldr	r0, [pc, #184]	; (800bb54 <tcp_close_shutdown_fin+0xd0>)
 800ba9c:	f008 f81c 	bl	8013ad8 <iprintf>

  switch (pcb->state) {
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	7d1b      	ldrb	r3, [r3, #20]
 800baa4:	2b07      	cmp	r3, #7
 800baa6:	d020      	beq.n	800baea <tcp_close_shutdown_fin+0x66>
 800baa8:	2b07      	cmp	r3, #7
 800baaa:	dc2b      	bgt.n	800bb04 <tcp_close_shutdown_fin+0x80>
 800baac:	2b03      	cmp	r3, #3
 800baae:	d002      	beq.n	800bab6 <tcp_close_shutdown_fin+0x32>
 800bab0:	2b04      	cmp	r3, #4
 800bab2:	d00d      	beq.n	800bad0 <tcp_close_shutdown_fin+0x4c>
 800bab4:	e026      	b.n	800bb04 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f003 fee2 	bl	800f880 <tcp_send_fin>
 800babc:	4603      	mov	r3, r0
 800babe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d11f      	bne.n	800bb08 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2205      	movs	r2, #5
 800bacc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bace:	e01b      	b.n	800bb08 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f003 fed5 	bl	800f880 <tcp_send_fin>
 800bad6:	4603      	mov	r3, r0
 800bad8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d114      	bne.n	800bb0c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2205      	movs	r2, #5
 800bae6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bae8:	e010      	b.n	800bb0c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f003 fec8 	bl	800f880 <tcp_send_fin>
 800baf0:	4603      	mov	r3, r0
 800baf2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800baf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d109      	bne.n	800bb10 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2209      	movs	r2, #9
 800bb00:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bb02:	e005      	b.n	800bb10 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bb04:	2300      	movs	r3, #0
 800bb06:	e01c      	b.n	800bb42 <tcp_close_shutdown_fin+0xbe>
      break;
 800bb08:	bf00      	nop
 800bb0a:	e002      	b.n	800bb12 <tcp_close_shutdown_fin+0x8e>
      break;
 800bb0c:	bf00      	nop
 800bb0e:	e000      	b.n	800bb12 <tcp_close_shutdown_fin+0x8e>
      break;
 800bb10:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bb12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d103      	bne.n	800bb22 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f003 ffee 	bl	800fafc <tcp_output>
 800bb20:	e00d      	b.n	800bb3e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bb22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2a:	d108      	bne.n	800bb3e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	8b5b      	ldrh	r3, [r3, #26]
 800bb30:	f043 0308 	orr.w	r3, r3, #8
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e001      	b.n	800bb42 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bb3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	080158e4 	.word	0x080158e4
 800bb50:	08015994 	.word	0x08015994
 800bb54:	08015928 	.word	0x08015928

0800bb58 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d109      	bne.n	800bb7a <tcp_close+0x22>
 800bb66:	4b0f      	ldr	r3, [pc, #60]	; (800bba4 <tcp_close+0x4c>)
 800bb68:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bb6c:	490e      	ldr	r1, [pc, #56]	; (800bba8 <tcp_close+0x50>)
 800bb6e:	480f      	ldr	r0, [pc, #60]	; (800bbac <tcp_close+0x54>)
 800bb70:	f007 ffb2 	bl	8013ad8 <iprintf>
 800bb74:	f06f 030f 	mvn.w	r3, #15
 800bb78:	e00f      	b.n	800bb9a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	7d1b      	ldrb	r3, [r3, #20]
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d006      	beq.n	800bb90 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	8b5b      	ldrh	r3, [r3, #26]
 800bb86:	f043 0310 	orr.w	r3, r3, #16
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bb90:	2101      	movs	r1, #1
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7ff fe94 	bl	800b8c0 <tcp_close_shutdown>
 800bb98:	4603      	mov	r3, r0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3708      	adds	r7, #8
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	080158e4 	.word	0x080158e4
 800bba8:	080159f4 	.word	0x080159f4
 800bbac:	08015928 	.word	0x08015928

0800bbb0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b08e      	sub	sp, #56	; 0x38
 800bbb4:	af04      	add	r7, sp, #16
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d107      	bne.n	800bbd0 <tcp_abandon+0x20>
 800bbc0:	4b52      	ldr	r3, [pc, #328]	; (800bd0c <tcp_abandon+0x15c>)
 800bbc2:	f240 223d 	movw	r2, #573	; 0x23d
 800bbc6:	4952      	ldr	r1, [pc, #328]	; (800bd10 <tcp_abandon+0x160>)
 800bbc8:	4852      	ldr	r0, [pc, #328]	; (800bd14 <tcp_abandon+0x164>)
 800bbca:	f007 ff85 	bl	8013ad8 <iprintf>
 800bbce:	e099      	b.n	800bd04 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	7d1b      	ldrb	r3, [r3, #20]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d106      	bne.n	800bbe6 <tcp_abandon+0x36>
 800bbd8:	4b4c      	ldr	r3, [pc, #304]	; (800bd0c <tcp_abandon+0x15c>)
 800bbda:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bbde:	494e      	ldr	r1, [pc, #312]	; (800bd18 <tcp_abandon+0x168>)
 800bbe0:	484c      	ldr	r0, [pc, #304]	; (800bd14 <tcp_abandon+0x164>)
 800bbe2:	f007 ff79 	bl	8013ad8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	7d1b      	ldrb	r3, [r3, #20]
 800bbea:	2b0a      	cmp	r3, #10
 800bbec:	d107      	bne.n	800bbfe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bbee:	6879      	ldr	r1, [r7, #4]
 800bbf0:	484a      	ldr	r0, [pc, #296]	; (800bd1c <tcp_abandon+0x16c>)
 800bbf2:	f000 ffc3 	bl	800cb7c <tcp_pcb_remove>
    tcp_free(pcb);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f7ff fdb0 	bl	800b75c <tcp_free>
 800bbfc:	e082      	b.n	800bd04 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bc02:	2300      	movs	r3, #0
 800bc04:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc0a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc10:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc18:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	7d1b      	ldrb	r3, [r3, #20]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d126      	bne.n	800bc76 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	8adb      	ldrh	r3, [r3, #22]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d02e      	beq.n	800bc8e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bc30:	4b3b      	ldr	r3, [pc, #236]	; (800bd20 <tcp_abandon+0x170>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d105      	bne.n	800bc46 <tcp_abandon+0x96>
 800bc3a:	4b39      	ldr	r3, [pc, #228]	; (800bd20 <tcp_abandon+0x170>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68db      	ldr	r3, [r3, #12]
 800bc40:	4a37      	ldr	r2, [pc, #220]	; (800bd20 <tcp_abandon+0x170>)
 800bc42:	6013      	str	r3, [r2, #0]
 800bc44:	e013      	b.n	800bc6e <tcp_abandon+0xbe>
 800bc46:	4b36      	ldr	r3, [pc, #216]	; (800bd20 <tcp_abandon+0x170>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	61fb      	str	r3, [r7, #28]
 800bc4c:	e00c      	b.n	800bc68 <tcp_abandon+0xb8>
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d104      	bne.n	800bc62 <tcp_abandon+0xb2>
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	68da      	ldr	r2, [r3, #12]
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	60da      	str	r2, [r3, #12]
 800bc60:	e005      	b.n	800bc6e <tcp_abandon+0xbe>
 800bc62:	69fb      	ldr	r3, [r7, #28]
 800bc64:	68db      	ldr	r3, [r3, #12]
 800bc66:	61fb      	str	r3, [r7, #28]
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1ef      	bne.n	800bc4e <tcp_abandon+0x9e>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	60da      	str	r2, [r3, #12]
 800bc74:	e00b      	b.n	800bc8e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	8adb      	ldrh	r3, [r3, #22]
 800bc7e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bc80:	6879      	ldr	r1, [r7, #4]
 800bc82:	4828      	ldr	r0, [pc, #160]	; (800bd24 <tcp_abandon+0x174>)
 800bc84:	f000 ff7a 	bl	800cb7c <tcp_pcb_remove>
 800bc88:	4b27      	ldr	r3, [pc, #156]	; (800bd28 <tcp_abandon+0x178>)
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d004      	beq.n	800bca0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f000 fd1c 	bl	800c6d8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d004      	beq.n	800bcb2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcac:	4618      	mov	r0, r3
 800bcae:	f000 fd13 	bl	800c6d8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d004      	beq.n	800bcc4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f000 fd0a 	bl	800c6d8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00e      	beq.n	800bce8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bcca:	6879      	ldr	r1, [r7, #4]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	3304      	adds	r3, #4
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	8b12      	ldrh	r2, [r2, #24]
 800bcd4:	9202      	str	r2, [sp, #8]
 800bcd6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bcd8:	9201      	str	r2, [sp, #4]
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	69b9      	ldr	r1, [r7, #24]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f004 fcbe 	bl	8010664 <tcp_rst>
    }
    last_state = pcb->state;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	7d1b      	ldrb	r3, [r3, #20]
 800bcec:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f7ff fd34 	bl	800b75c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d004      	beq.n	800bd04 <tcp_abandon+0x154>
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	f06f 010c 	mvn.w	r1, #12
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	4798      	blx	r3
  }
}
 800bd04:	3728      	adds	r7, #40	; 0x28
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	080158e4 	.word	0x080158e4
 800bd10:	08015a28 	.word	0x08015a28
 800bd14:	08015928 	.word	0x08015928
 800bd18:	08015a44 	.word	0x08015a44
 800bd1c:	20008dd0 	.word	0x20008dd0
 800bd20:	20008dcc 	.word	0x20008dcc
 800bd24:	20008dc0 	.word	0x20008dc0
 800bd28:	20008dbc 	.word	0x20008dbc

0800bd2c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800bd34:	2101      	movs	r1, #1
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7ff ff3a 	bl	800bbb0 <tcp_abandon>
}
 800bd3c:	bf00      	nop
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d106      	bne.n	800bd60 <tcp_update_rcv_ann_wnd+0x1c>
 800bd52:	4b25      	ldr	r3, [pc, #148]	; (800bde8 <tcp_update_rcv_ann_wnd+0xa4>)
 800bd54:	f240 32a6 	movw	r2, #934	; 0x3a6
 800bd58:	4924      	ldr	r1, [pc, #144]	; (800bdec <tcp_update_rcv_ann_wnd+0xa8>)
 800bd5a:	4825      	ldr	r0, [pc, #148]	; (800bdf0 <tcp_update_rcv_ann_wnd+0xac>)
 800bd5c:	f007 febc 	bl	8013ad8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800bd68:	4413      	add	r3, r2
 800bd6a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800bd74:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800bd78:	bf28      	it	cs
 800bd7a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800bd7e:	b292      	uxth	r2, r2
 800bd80:	4413      	add	r3, r2
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	1ad3      	subs	r3, r2, r3
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	db08      	blt.n	800bd9c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd96:	68fa      	ldr	r2, [r7, #12]
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	e020      	b.n	800bdde <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda4:	1ad3      	subs	r3, r2, r3
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	dd03      	ble.n	800bdb2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bdb0:	e014      	b.n	800bddc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdba:	1ad3      	subs	r3, r2, r3
 800bdbc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdc4:	d306      	bcc.n	800bdd4 <tcp_update_rcv_ann_wnd+0x90>
 800bdc6:	4b08      	ldr	r3, [pc, #32]	; (800bde8 <tcp_update_rcv_ann_wnd+0xa4>)
 800bdc8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800bdcc:	4909      	ldr	r1, [pc, #36]	; (800bdf4 <tcp_update_rcv_ann_wnd+0xb0>)
 800bdce:	4808      	ldr	r0, [pc, #32]	; (800bdf0 <tcp_update_rcv_ann_wnd+0xac>)
 800bdd0:	f007 fe82 	bl	8013ad8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	b29a      	uxth	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800bddc:	2300      	movs	r3, #0
  }
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	080158e4 	.word	0x080158e4
 800bdec:	08015b40 	.word	0x08015b40
 800bdf0:	08015928 	.word	0x08015928
 800bdf4:	08015b64 	.word	0x08015b64

0800bdf8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	460b      	mov	r3, r1
 800be02:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d107      	bne.n	800be1a <tcp_recved+0x22>
 800be0a:	4b1f      	ldr	r3, [pc, #124]	; (800be88 <tcp_recved+0x90>)
 800be0c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800be10:	491e      	ldr	r1, [pc, #120]	; (800be8c <tcp_recved+0x94>)
 800be12:	481f      	ldr	r0, [pc, #124]	; (800be90 <tcp_recved+0x98>)
 800be14:	f007 fe60 	bl	8013ad8 <iprintf>
 800be18:	e032      	b.n	800be80 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	7d1b      	ldrb	r3, [r3, #20]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d106      	bne.n	800be30 <tcp_recved+0x38>
 800be22:	4b19      	ldr	r3, [pc, #100]	; (800be88 <tcp_recved+0x90>)
 800be24:	f240 32d2 	movw	r2, #978	; 0x3d2
 800be28:	491a      	ldr	r1, [pc, #104]	; (800be94 <tcp_recved+0x9c>)
 800be2a:	4819      	ldr	r0, [pc, #100]	; (800be90 <tcp_recved+0x98>)
 800be2c:	f007 fe54 	bl	8013ad8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800be34:	887b      	ldrh	r3, [r7, #2]
 800be36:	4413      	add	r3, r2
 800be38:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800be3a:	89fb      	ldrh	r3, [r7, #14]
 800be3c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800be40:	d804      	bhi.n	800be4c <tcp_recved+0x54>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be46:	89fa      	ldrh	r2, [r7, #14]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d204      	bcs.n	800be56 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800be52:	851a      	strh	r2, [r3, #40]	; 0x28
 800be54:	e002      	b.n	800be5c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	89fa      	ldrh	r2, [r7, #14]
 800be5a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f7ff ff71 	bl	800bd44 <tcp_update_rcv_ann_wnd>
 800be62:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800be6a:	d309      	bcc.n	800be80 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	8b5b      	ldrh	r3, [r3, #26]
 800be70:	f043 0302 	orr.w	r3, r3, #2
 800be74:	b29a      	uxth	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f003 fe3e 	bl	800fafc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	080158e4 	.word	0x080158e4
 800be8c:	08015b80 	.word	0x08015b80
 800be90:	08015928 	.word	0x08015928
 800be94:	08015b98 	.word	0x08015b98

0800be98 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800be98:	b5b0      	push	{r4, r5, r7, lr}
 800be9a:	b090      	sub	sp, #64	; 0x40
 800be9c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800be9e:	2300      	movs	r3, #0
 800bea0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800bea4:	4b94      	ldr	r3, [pc, #592]	; (800c0f8 <tcp_slowtmr+0x260>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	3301      	adds	r3, #1
 800beaa:	4a93      	ldr	r2, [pc, #588]	; (800c0f8 <tcp_slowtmr+0x260>)
 800beac:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800beae:	4b93      	ldr	r3, [pc, #588]	; (800c0fc <tcp_slowtmr+0x264>)
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	3301      	adds	r3, #1
 800beb4:	b2da      	uxtb	r2, r3
 800beb6:	4b91      	ldr	r3, [pc, #580]	; (800c0fc <tcp_slowtmr+0x264>)
 800beb8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800beba:	2300      	movs	r3, #0
 800bebc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800bebe:	4b90      	ldr	r3, [pc, #576]	; (800c100 <tcp_slowtmr+0x268>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800bec4:	e29d      	b.n	800c402 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec8:	7d1b      	ldrb	r3, [r3, #20]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d106      	bne.n	800bedc <tcp_slowtmr+0x44>
 800bece:	4b8d      	ldr	r3, [pc, #564]	; (800c104 <tcp_slowtmr+0x26c>)
 800bed0:	f240 42be 	movw	r2, #1214	; 0x4be
 800bed4:	498c      	ldr	r1, [pc, #560]	; (800c108 <tcp_slowtmr+0x270>)
 800bed6:	488d      	ldr	r0, [pc, #564]	; (800c10c <tcp_slowtmr+0x274>)
 800bed8:	f007 fdfe 	bl	8013ad8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bede:	7d1b      	ldrb	r3, [r3, #20]
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d106      	bne.n	800bef2 <tcp_slowtmr+0x5a>
 800bee4:	4b87      	ldr	r3, [pc, #540]	; (800c104 <tcp_slowtmr+0x26c>)
 800bee6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800beea:	4989      	ldr	r1, [pc, #548]	; (800c110 <tcp_slowtmr+0x278>)
 800beec:	4887      	ldr	r0, [pc, #540]	; (800c10c <tcp_slowtmr+0x274>)
 800beee:	f007 fdf3 	bl	8013ad8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800bef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef4:	7d1b      	ldrb	r3, [r3, #20]
 800bef6:	2b0a      	cmp	r3, #10
 800bef8:	d106      	bne.n	800bf08 <tcp_slowtmr+0x70>
 800befa:	4b82      	ldr	r3, [pc, #520]	; (800c104 <tcp_slowtmr+0x26c>)
 800befc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800bf00:	4984      	ldr	r1, [pc, #528]	; (800c114 <tcp_slowtmr+0x27c>)
 800bf02:	4882      	ldr	r0, [pc, #520]	; (800c10c <tcp_slowtmr+0x274>)
 800bf04:	f007 fde8 	bl	8013ad8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0a:	7f9a      	ldrb	r2, [r3, #30]
 800bf0c:	4b7b      	ldr	r3, [pc, #492]	; (800c0fc <tcp_slowtmr+0x264>)
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d105      	bne.n	800bf20 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf16:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1a:	68db      	ldr	r3, [r3, #12]
 800bf1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800bf1e:	e270      	b.n	800c402 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800bf20:	4b76      	ldr	r3, [pc, #472]	; (800c0fc <tcp_slowtmr+0x264>)
 800bf22:	781a      	ldrb	r2, [r3, #0]
 800bf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf26:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf36:	7d1b      	ldrb	r3, [r3, #20]
 800bf38:	2b02      	cmp	r3, #2
 800bf3a:	d10a      	bne.n	800bf52 <tcp_slowtmr+0xba>
 800bf3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf42:	2b05      	cmp	r3, #5
 800bf44:	d905      	bls.n	800bf52 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800bf46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf50:	e11e      	b.n	800c190 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800bf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf58:	2b0b      	cmp	r3, #11
 800bf5a:	d905      	bls.n	800bf68 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800bf5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf60:	3301      	adds	r3, #1
 800bf62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bf66:	e113      	b.n	800c190 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800bf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d075      	beq.n	800c05e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d006      	beq.n	800bf88 <tcp_slowtmr+0xf0>
 800bf7a:	4b62      	ldr	r3, [pc, #392]	; (800c104 <tcp_slowtmr+0x26c>)
 800bf7c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800bf80:	4965      	ldr	r1, [pc, #404]	; (800c118 <tcp_slowtmr+0x280>)
 800bf82:	4862      	ldr	r0, [pc, #392]	; (800c10c <tcp_slowtmr+0x274>)
 800bf84:	f007 fda8 	bl	8013ad8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d106      	bne.n	800bf9e <tcp_slowtmr+0x106>
 800bf90:	4b5c      	ldr	r3, [pc, #368]	; (800c104 <tcp_slowtmr+0x26c>)
 800bf92:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800bf96:	4961      	ldr	r1, [pc, #388]	; (800c11c <tcp_slowtmr+0x284>)
 800bf98:	485c      	ldr	r0, [pc, #368]	; (800c10c <tcp_slowtmr+0x274>)
 800bf9a:	f007 fd9d 	bl	8013ad8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bfa4:	2b0b      	cmp	r3, #11
 800bfa6:	d905      	bls.n	800bfb4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800bfa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfac:	3301      	adds	r3, #1
 800bfae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bfb2:	e0ed      	b.n	800c190 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	4a58      	ldr	r2, [pc, #352]	; (800c120 <tcp_slowtmr+0x288>)
 800bfbe:	5cd3      	ldrb	r3, [r2, r3]
 800bfc0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bfc8:	7c7a      	ldrb	r2, [r7, #17]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d907      	bls.n	800bfde <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800bfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfd0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfda:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800bfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800bfe4:	7c7a      	ldrb	r2, [r7, #17]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	f200 80d2 	bhi.w	800c190 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800bfec:	2301      	movs	r3, #1
 800bfee:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800bff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d108      	bne.n	800c00c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bffa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bffc:	f004 fc26 	bl	801084c <tcp_zero_window_probe>
 800c000:	4603      	mov	r3, r0
 800c002:	2b00      	cmp	r3, #0
 800c004:	d014      	beq.n	800c030 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c006:	2300      	movs	r3, #0
 800c008:	623b      	str	r3, [r7, #32]
 800c00a:	e011      	b.n	800c030 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c012:	4619      	mov	r1, r3
 800c014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c016:	f003 faeb 	bl	800f5f0 <tcp_split_unsent_seg>
 800c01a:	4603      	mov	r3, r0
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d107      	bne.n	800c030 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c020:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c022:	f003 fd6b 	bl	800fafc <tcp_output>
 800c026:	4603      	mov	r3, r0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d101      	bne.n	800c030 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c02c:	2300      	movs	r3, #0
 800c02e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c030:	6a3b      	ldr	r3, [r7, #32]
 800c032:	2b00      	cmp	r3, #0
 800c034:	f000 80ac 	beq.w	800c190 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03a:	2200      	movs	r2, #0
 800c03c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c042:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c046:	2b06      	cmp	r3, #6
 800c048:	f200 80a2 	bhi.w	800c190 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c052:	3301      	adds	r3, #1
 800c054:	b2da      	uxtb	r2, r3
 800c056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c058:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c05c:	e098      	b.n	800c190 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c060:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c064:	2b00      	cmp	r3, #0
 800c066:	db0f      	blt.n	800c088 <tcp_slowtmr+0x1f0>
 800c068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c06e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c072:	4293      	cmp	r3, r2
 800c074:	d008      	beq.n	800c088 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c078:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	3301      	adds	r3, #1
 800c080:	b29b      	uxth	r3, r3
 800c082:	b21a      	sxth	r2, r3
 800c084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c086:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c090:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c094:	429a      	cmp	r2, r3
 800c096:	db7b      	blt.n	800c190 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c098:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c09a:	f004 f821 	bl	80100e0 <tcp_rexmit_rto_prepare>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d007      	beq.n	800c0b4 <tcp_slowtmr+0x21c>
 800c0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d171      	bne.n	800c190 <tcp_slowtmr+0x2f8>
 800c0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d06d      	beq.n	800c190 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b6:	7d1b      	ldrb	r3, [r3, #20]
 800c0b8:	2b02      	cmp	r3, #2
 800c0ba:	d03a      	beq.n	800c132 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0c2:	2b0c      	cmp	r3, #12
 800c0c4:	bf28      	it	cs
 800c0c6:	230c      	movcs	r3, #12
 800c0c8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c0d0:	10db      	asrs	r3, r3, #3
 800c0d2:	b21b      	sxth	r3, r3
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c0dc:	4413      	add	r3, r2
 800c0de:	7efa      	ldrb	r2, [r7, #27]
 800c0e0:	4910      	ldr	r1, [pc, #64]	; (800c124 <tcp_slowtmr+0x28c>)
 800c0e2:	5c8a      	ldrb	r2, [r1, r2]
 800c0e4:	4093      	lsls	r3, r2
 800c0e6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	dc1a      	bgt.n	800c128 <tcp_slowtmr+0x290>
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	b21a      	sxth	r2, r3
 800c0f6:	e019      	b.n	800c12c <tcp_slowtmr+0x294>
 800c0f8:	20008dc4 	.word	0x20008dc4
 800c0fc:	200000d6 	.word	0x200000d6
 800c100:	20008dc0 	.word	0x20008dc0
 800c104:	080158e4 	.word	0x080158e4
 800c108:	08015c28 	.word	0x08015c28
 800c10c:	08015928 	.word	0x08015928
 800c110:	08015c54 	.word	0x08015c54
 800c114:	08015c80 	.word	0x08015c80
 800c118:	08015cb0 	.word	0x08015cb0
 800c11c:	08015ce4 	.word	0x08015ce4
 800c120:	080178b8 	.word	0x080178b8
 800c124:	080178a8 	.word	0x080178a8
 800c128:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c134:	2200      	movs	r2, #0
 800c136:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c140:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c144:	4293      	cmp	r3, r2
 800c146:	bf28      	it	cs
 800c148:	4613      	movcs	r3, r2
 800c14a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c14c:	8a7b      	ldrh	r3, [r7, #18]
 800c14e:	085b      	lsrs	r3, r3, #1
 800c150:	b29a      	uxth	r2, r3
 800c152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c154:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c162:	005b      	lsls	r3, r3, #1
 800c164:	b29b      	uxth	r3, r3
 800c166:	429a      	cmp	r2, r3
 800c168:	d206      	bcs.n	800c178 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c16e:	005b      	lsls	r3, r3, #1
 800c170:	b29a      	uxth	r2, r3
 800c172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c174:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c184:	2200      	movs	r2, #0
 800c186:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c18a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c18c:	f004 f818 	bl	80101c0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c192:	7d1b      	ldrb	r3, [r3, #20]
 800c194:	2b06      	cmp	r3, #6
 800c196:	d111      	bne.n	800c1bc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19a:	8b5b      	ldrh	r3, [r3, #26]
 800c19c:	f003 0310 	and.w	r3, r3, #16
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00b      	beq.n	800c1bc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c1a4:	4b9c      	ldr	r3, [pc, #624]	; (800c418 <tcp_slowtmr+0x580>)
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1aa:	6a1b      	ldr	r3, [r3, #32]
 800c1ac:	1ad3      	subs	r3, r2, r3
 800c1ae:	2b28      	cmp	r3, #40	; 0x28
 800c1b0:	d904      	bls.n	800c1bc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c1b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1be:	7a5b      	ldrb	r3, [r3, #9]
 800c1c0:	f003 0308 	and.w	r3, r3, #8
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d04a      	beq.n	800c25e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c1cc:	2b04      	cmp	r3, #4
 800c1ce:	d003      	beq.n	800c1d8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c1d4:	2b07      	cmp	r3, #7
 800c1d6:	d142      	bne.n	800c25e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c1d8:	4b8f      	ldr	r3, [pc, #572]	; (800c418 <tcp_slowtmr+0x580>)
 800c1da:	681a      	ldr	r2, [r3, #0]
 800c1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1de:	6a1b      	ldr	r3, [r3, #32]
 800c1e0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c1e8:	4b8c      	ldr	r3, [pc, #560]	; (800c41c <tcp_slowtmr+0x584>)
 800c1ea:	440b      	add	r3, r1
 800c1ec:	498c      	ldr	r1, [pc, #560]	; (800c420 <tcp_slowtmr+0x588>)
 800c1ee:	fba1 1303 	umull	r1, r3, r1, r3
 800c1f2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d90a      	bls.n	800c20e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c1f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c202:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c206:	3301      	adds	r3, #1
 800c208:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c20c:	e027      	b.n	800c25e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c20e:	4b82      	ldr	r3, [pc, #520]	; (800c418 <tcp_slowtmr+0x580>)
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c214:	6a1b      	ldr	r3, [r3, #32]
 800c216:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c220:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c224:	4618      	mov	r0, r3
 800c226:	4b7f      	ldr	r3, [pc, #508]	; (800c424 <tcp_slowtmr+0x58c>)
 800c228:	fb03 f300 	mul.w	r3, r3, r0
 800c22c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c22e:	497c      	ldr	r1, [pc, #496]	; (800c420 <tcp_slowtmr+0x588>)
 800c230:	fba1 1303 	umull	r1, r3, r1, r3
 800c234:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c236:	429a      	cmp	r2, r3
 800c238:	d911      	bls.n	800c25e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800c23a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c23c:	f004 fac6 	bl	80107cc <tcp_keepalive>
 800c240:	4603      	mov	r3, r0
 800c242:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c246:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d107      	bne.n	800c25e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800c24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c250:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c254:	3301      	adds	r3, #1
 800c256:	b2da      	uxtb	r2, r3
 800c258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c262:	2b00      	cmp	r3, #0
 800c264:	d011      	beq.n	800c28a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c266:	4b6c      	ldr	r3, [pc, #432]	; (800c418 <tcp_slowtmr+0x580>)
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	1ad2      	subs	r2, r2, r3
 800c270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c272:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c276:	4619      	mov	r1, r3
 800c278:	460b      	mov	r3, r1
 800c27a:	005b      	lsls	r3, r3, #1
 800c27c:	440b      	add	r3, r1
 800c27e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c280:	429a      	cmp	r2, r3
 800c282:	d302      	bcc.n	800c28a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c284:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c286:	f000 fddd 	bl	800ce44 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28c:	7d1b      	ldrb	r3, [r3, #20]
 800c28e:	2b03      	cmp	r3, #3
 800c290:	d10b      	bne.n	800c2aa <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c292:	4b61      	ldr	r3, [pc, #388]	; (800c418 <tcp_slowtmr+0x580>)
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c298:	6a1b      	ldr	r3, [r3, #32]
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	2b28      	cmp	r3, #40	; 0x28
 800c29e:	d904      	bls.n	800c2aa <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ac:	7d1b      	ldrb	r3, [r3, #20]
 800c2ae:	2b09      	cmp	r3, #9
 800c2b0:	d10b      	bne.n	800c2ca <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c2b2:	4b59      	ldr	r3, [pc, #356]	; (800c418 <tcp_slowtmr+0x580>)
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b8:	6a1b      	ldr	r3, [r3, #32]
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	2bf0      	cmp	r3, #240	; 0xf0
 800c2be:	d904      	bls.n	800c2ca <tcp_slowtmr+0x432>
        ++pcb_remove;
 800c2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2c4:	3301      	adds	r3, #1
 800c2c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c2ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d060      	beq.n	800c394 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2d8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c2da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2dc:	f000 fbfe 	bl	800cadc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d010      	beq.n	800c308 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c2e6:	4b50      	ldr	r3, [pc, #320]	; (800c428 <tcp_slowtmr+0x590>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d106      	bne.n	800c2fe <tcp_slowtmr+0x466>
 800c2f0:	4b4e      	ldr	r3, [pc, #312]	; (800c42c <tcp_slowtmr+0x594>)
 800c2f2:	f240 526d 	movw	r2, #1389	; 0x56d
 800c2f6:	494e      	ldr	r1, [pc, #312]	; (800c430 <tcp_slowtmr+0x598>)
 800c2f8:	484e      	ldr	r0, [pc, #312]	; (800c434 <tcp_slowtmr+0x59c>)
 800c2fa:	f007 fbed 	bl	8013ad8 <iprintf>
        prev->next = pcb->next;
 800c2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c300:	68da      	ldr	r2, [r3, #12]
 800c302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c304:	60da      	str	r2, [r3, #12]
 800c306:	e00f      	b.n	800c328 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c308:	4b47      	ldr	r3, [pc, #284]	; (800c428 <tcp_slowtmr+0x590>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c30e:	429a      	cmp	r2, r3
 800c310:	d006      	beq.n	800c320 <tcp_slowtmr+0x488>
 800c312:	4b46      	ldr	r3, [pc, #280]	; (800c42c <tcp_slowtmr+0x594>)
 800c314:	f240 5271 	movw	r2, #1393	; 0x571
 800c318:	4947      	ldr	r1, [pc, #284]	; (800c438 <tcp_slowtmr+0x5a0>)
 800c31a:	4846      	ldr	r0, [pc, #280]	; (800c434 <tcp_slowtmr+0x59c>)
 800c31c:	f007 fbdc 	bl	8013ad8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	4a40      	ldr	r2, [pc, #256]	; (800c428 <tcp_slowtmr+0x590>)
 800c326:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c328:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d013      	beq.n	800c358 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c332:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c336:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c338:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33c:	3304      	adds	r3, #4
 800c33e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c340:	8ad2      	ldrh	r2, [r2, #22]
 800c342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c344:	8b09      	ldrh	r1, [r1, #24]
 800c346:	9102      	str	r1, [sp, #8]
 800c348:	9201      	str	r2, [sp, #4]
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	462b      	mov	r3, r5
 800c34e:	4622      	mov	r2, r4
 800c350:	4601      	mov	r1, r0
 800c352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c354:	f004 f986 	bl	8010664 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c360:	7d1b      	ldrb	r3, [r3, #20]
 800c362:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c366:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36a:	68db      	ldr	r3, [r3, #12]
 800c36c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c36e:	6838      	ldr	r0, [r7, #0]
 800c370:	f7ff f9f4 	bl	800b75c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c374:	4b31      	ldr	r3, [pc, #196]	; (800c43c <tcp_slowtmr+0x5a4>)
 800c376:	2200      	movs	r2, #0
 800c378:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d004      	beq.n	800c38a <tcp_slowtmr+0x4f2>
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f06f 010c 	mvn.w	r1, #12
 800c386:	68b8      	ldr	r0, [r7, #8]
 800c388:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c38a:	4b2c      	ldr	r3, [pc, #176]	; (800c43c <tcp_slowtmr+0x5a4>)
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d037      	beq.n	800c402 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800c392:	e592      	b.n	800beba <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c396:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	7f1b      	ldrb	r3, [r3, #28]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	b2da      	uxtb	r2, r3
 800c3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ac:	7f1a      	ldrb	r2, [r3, #28]
 800c3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b0:	7f5b      	ldrb	r3, [r3, #29]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d325      	bcc.n	800c402 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800c3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c3bc:	4b1f      	ldr	r3, [pc, #124]	; (800c43c <tcp_slowtmr+0x5a4>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00b      	beq.n	800c3e4 <tcp_slowtmr+0x54c>
 800c3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3d4:	6912      	ldr	r2, [r2, #16]
 800c3d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3d8:	4610      	mov	r0, r2
 800c3da:	4798      	blx	r3
 800c3dc:	4603      	mov	r3, r0
 800c3de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c3e2:	e002      	b.n	800c3ea <tcp_slowtmr+0x552>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c3ea:	4b14      	ldr	r3, [pc, #80]	; (800c43c <tcp_slowtmr+0x5a4>)
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d000      	beq.n	800c3f4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800c3f2:	e562      	b.n	800beba <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c3f4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d102      	bne.n	800c402 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800c3fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c3fe:	f003 fb7d 	bl	800fafc <tcp_output>
  while (pcb != NULL) {
 800c402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c404:	2b00      	cmp	r3, #0
 800c406:	f47f ad5e 	bne.w	800bec6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c40a:	2300      	movs	r3, #0
 800c40c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c40e:	4b0c      	ldr	r3, [pc, #48]	; (800c440 <tcp_slowtmr+0x5a8>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c414:	e069      	b.n	800c4ea <tcp_slowtmr+0x652>
 800c416:	bf00      	nop
 800c418:	20008dc4 	.word	0x20008dc4
 800c41c:	000a4cb8 	.word	0x000a4cb8
 800c420:	10624dd3 	.word	0x10624dd3
 800c424:	000124f8 	.word	0x000124f8
 800c428:	20008dc0 	.word	0x20008dc0
 800c42c:	080158e4 	.word	0x080158e4
 800c430:	08015d1c 	.word	0x08015d1c
 800c434:	08015928 	.word	0x08015928
 800c438:	08015d48 	.word	0x08015d48
 800c43c:	20008dbc 	.word	0x20008dbc
 800c440:	20008dd0 	.word	0x20008dd0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c446:	7d1b      	ldrb	r3, [r3, #20]
 800c448:	2b0a      	cmp	r3, #10
 800c44a:	d006      	beq.n	800c45a <tcp_slowtmr+0x5c2>
 800c44c:	4b2b      	ldr	r3, [pc, #172]	; (800c4fc <tcp_slowtmr+0x664>)
 800c44e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c452:	492b      	ldr	r1, [pc, #172]	; (800c500 <tcp_slowtmr+0x668>)
 800c454:	482b      	ldr	r0, [pc, #172]	; (800c504 <tcp_slowtmr+0x66c>)
 800c456:	f007 fb3f 	bl	8013ad8 <iprintf>
    pcb_remove = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c460:	4b29      	ldr	r3, [pc, #164]	; (800c508 <tcp_slowtmr+0x670>)
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c466:	6a1b      	ldr	r3, [r3, #32]
 800c468:	1ad3      	subs	r3, r2, r3
 800c46a:	2bf0      	cmp	r3, #240	; 0xf0
 800c46c:	d904      	bls.n	800c478 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c46e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c472:	3301      	adds	r3, #1
 800c474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d02f      	beq.n	800c4e0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c480:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c482:	f000 fb2b 	bl	800cadc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d010      	beq.n	800c4ae <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c48c:	4b1f      	ldr	r3, [pc, #124]	; (800c50c <tcp_slowtmr+0x674>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c492:	429a      	cmp	r2, r3
 800c494:	d106      	bne.n	800c4a4 <tcp_slowtmr+0x60c>
 800c496:	4b19      	ldr	r3, [pc, #100]	; (800c4fc <tcp_slowtmr+0x664>)
 800c498:	f240 52af 	movw	r2, #1455	; 0x5af
 800c49c:	491c      	ldr	r1, [pc, #112]	; (800c510 <tcp_slowtmr+0x678>)
 800c49e:	4819      	ldr	r0, [pc, #100]	; (800c504 <tcp_slowtmr+0x66c>)
 800c4a0:	f007 fb1a 	bl	8013ad8 <iprintf>
        prev->next = pcb->next;
 800c4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a6:	68da      	ldr	r2, [r3, #12]
 800c4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4aa:	60da      	str	r2, [r3, #12]
 800c4ac:	e00f      	b.n	800c4ce <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c4ae:	4b17      	ldr	r3, [pc, #92]	; (800c50c <tcp_slowtmr+0x674>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d006      	beq.n	800c4c6 <tcp_slowtmr+0x62e>
 800c4b8:	4b10      	ldr	r3, [pc, #64]	; (800c4fc <tcp_slowtmr+0x664>)
 800c4ba:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c4be:	4915      	ldr	r1, [pc, #84]	; (800c514 <tcp_slowtmr+0x67c>)
 800c4c0:	4810      	ldr	r0, [pc, #64]	; (800c504 <tcp_slowtmr+0x66c>)
 800c4c2:	f007 fb09 	bl	8013ad8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	4a10      	ldr	r2, [pc, #64]	; (800c50c <tcp_slowtmr+0x674>)
 800c4cc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c4d8:	69f8      	ldr	r0, [r7, #28]
 800c4da:	f7ff f93f 	bl	800b75c <tcp_free>
 800c4de:	e004      	b.n	800c4ea <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1a9      	bne.n	800c444 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c4f0:	bf00      	nop
 800c4f2:	bf00      	nop
 800c4f4:	3730      	adds	r7, #48	; 0x30
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bdb0      	pop	{r4, r5, r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	080158e4 	.word	0x080158e4
 800c500:	08015d74 	.word	0x08015d74
 800c504:	08015928 	.word	0x08015928
 800c508:	20008dc4 	.word	0x20008dc4
 800c50c:	20008dd0 	.word	0x20008dd0
 800c510:	08015da4 	.word	0x08015da4
 800c514:	08015dcc 	.word	0x08015dcc

0800c518 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c51e:	4b2d      	ldr	r3, [pc, #180]	; (800c5d4 <tcp_fasttmr+0xbc>)
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	3301      	adds	r3, #1
 800c524:	b2da      	uxtb	r2, r3
 800c526:	4b2b      	ldr	r3, [pc, #172]	; (800c5d4 <tcp_fasttmr+0xbc>)
 800c528:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c52a:	4b2b      	ldr	r3, [pc, #172]	; (800c5d8 <tcp_fasttmr+0xc0>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c530:	e048      	b.n	800c5c4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	7f9a      	ldrb	r2, [r3, #30]
 800c536:	4b27      	ldr	r3, [pc, #156]	; (800c5d4 <tcp_fasttmr+0xbc>)
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d03f      	beq.n	800c5be <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c53e:	4b25      	ldr	r3, [pc, #148]	; (800c5d4 <tcp_fasttmr+0xbc>)
 800c540:	781a      	ldrb	r2, [r3, #0]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	8b5b      	ldrh	r3, [r3, #26]
 800c54a:	f003 0301 	and.w	r3, r3, #1
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d010      	beq.n	800c574 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	8b5b      	ldrh	r3, [r3, #26]
 800c556:	f043 0302 	orr.w	r3, r3, #2
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f003 facb 	bl	800fafc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	8b5b      	ldrh	r3, [r3, #26]
 800c56a:	f023 0303 	bic.w	r3, r3, #3
 800c56e:	b29a      	uxth	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	8b5b      	ldrh	r3, [r3, #26]
 800c578:	f003 0308 	and.w	r3, r3, #8
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d009      	beq.n	800c594 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	8b5b      	ldrh	r3, [r3, #26]
 800c584:	f023 0308 	bic.w	r3, r3, #8
 800c588:	b29a      	uxth	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7ff fa78 	bl	800ba84 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00a      	beq.n	800c5b8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c5a2:	4b0e      	ldr	r3, [pc, #56]	; (800c5dc <tcp_fasttmr+0xc4>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 f819 	bl	800c5e0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c5ae:	4b0b      	ldr	r3, [pc, #44]	; (800c5dc <tcp_fasttmr+0xc4>)
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d000      	beq.n	800c5b8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c5b6:	e7b8      	b.n	800c52a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	607b      	str	r3, [r7, #4]
 800c5bc:	e002      	b.n	800c5c4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d1b3      	bne.n	800c532 <tcp_fasttmr+0x1a>
    }
  }
}
 800c5ca:	bf00      	nop
 800c5cc:	bf00      	nop
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	200000d6 	.word	0x200000d6
 800c5d8:	20008dc0 	.word	0x20008dc0
 800c5dc:	20008dbc 	.word	0x20008dbc

0800c5e0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c5e0:	b590      	push	{r4, r7, lr}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d109      	bne.n	800c602 <tcp_process_refused_data+0x22>
 800c5ee:	4b37      	ldr	r3, [pc, #220]	; (800c6cc <tcp_process_refused_data+0xec>)
 800c5f0:	f240 6209 	movw	r2, #1545	; 0x609
 800c5f4:	4936      	ldr	r1, [pc, #216]	; (800c6d0 <tcp_process_refused_data+0xf0>)
 800c5f6:	4837      	ldr	r0, [pc, #220]	; (800c6d4 <tcp_process_refused_data+0xf4>)
 800c5f8:	f007 fa6e 	bl	8013ad8 <iprintf>
 800c5fc:	f06f 030f 	mvn.w	r3, #15
 800c600:	e060      	b.n	800c6c4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c606:	7b5b      	ldrb	r3, [r3, #13]
 800c608:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c60e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2200      	movs	r2, #0
 800c614:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00b      	beq.n	800c638 <tcp_process_refused_data+0x58>
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6918      	ldr	r0, [r3, #16]
 800c62a:	2300      	movs	r3, #0
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	6879      	ldr	r1, [r7, #4]
 800c630:	47a0      	blx	r4
 800c632:	4603      	mov	r3, r0
 800c634:	73fb      	strb	r3, [r7, #15]
 800c636:	e007      	b.n	800c648 <tcp_process_refused_data+0x68>
 800c638:	2300      	movs	r3, #0
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	6879      	ldr	r1, [r7, #4]
 800c63e:	2000      	movs	r0, #0
 800c640:	f000 f8a4 	bl	800c78c <tcp_recv_null>
 800c644:	4603      	mov	r3, r0
 800c646:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d12a      	bne.n	800c6a6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c650:	7bbb      	ldrb	r3, [r7, #14]
 800c652:	f003 0320 	and.w	r3, r3, #32
 800c656:	2b00      	cmp	r3, #0
 800c658:	d033      	beq.n	800c6c2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c65e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c662:	d005      	beq.n	800c670 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c668:	3301      	adds	r3, #1
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00b      	beq.n	800c692 <tcp_process_refused_data+0xb2>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6918      	ldr	r0, [r3, #16]
 800c684:	2300      	movs	r3, #0
 800c686:	2200      	movs	r2, #0
 800c688:	6879      	ldr	r1, [r7, #4]
 800c68a:	47a0      	blx	r4
 800c68c:	4603      	mov	r3, r0
 800c68e:	73fb      	strb	r3, [r7, #15]
 800c690:	e001      	b.n	800c696 <tcp_process_refused_data+0xb6>
 800c692:	2300      	movs	r3, #0
 800c694:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c69a:	f113 0f0d 	cmn.w	r3, #13
 800c69e:	d110      	bne.n	800c6c2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c6a0:	f06f 030c 	mvn.w	r3, #12
 800c6a4:	e00e      	b.n	800c6c4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6aa:	f113 0f0d 	cmn.w	r3, #13
 800c6ae:	d102      	bne.n	800c6b6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c6b0:	f06f 030c 	mvn.w	r3, #12
 800c6b4:	e006      	b.n	800c6c4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	68ba      	ldr	r2, [r7, #8]
 800c6ba:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c6bc:	f06f 0304 	mvn.w	r3, #4
 800c6c0:	e000      	b.n	800c6c4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3714      	adds	r7, #20
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd90      	pop	{r4, r7, pc}
 800c6cc:	080158e4 	.word	0x080158e4
 800c6d0:	08015df4 	.word	0x08015df4
 800c6d4:	08015928 	.word	0x08015928

0800c6d8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c6e0:	e007      	b.n	800c6f2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f000 f80a 	bl	800c702 <tcp_seg_free>
    seg = next;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1f4      	bne.n	800c6e2 <tcp_segs_free+0xa>
  }
}
 800c6f8:	bf00      	nop
 800c6fa:	bf00      	nop
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b082      	sub	sp, #8
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00c      	beq.n	800c72a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d004      	beq.n	800c722 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fe fd6d 	bl	800b1fc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c722:	6879      	ldr	r1, [r7, #4]
 800c724:	2003      	movs	r0, #3
 800c726:	f7fd ff77 	bl	800a618 <memp_free>
  }
}
 800c72a:	bf00      	nop
 800c72c:	3708      	adds	r7, #8
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
	...

0800c734 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d106      	bne.n	800c750 <tcp_seg_copy+0x1c>
 800c742:	4b0f      	ldr	r3, [pc, #60]	; (800c780 <tcp_seg_copy+0x4c>)
 800c744:	f240 6282 	movw	r2, #1666	; 0x682
 800c748:	490e      	ldr	r1, [pc, #56]	; (800c784 <tcp_seg_copy+0x50>)
 800c74a:	480f      	ldr	r0, [pc, #60]	; (800c788 <tcp_seg_copy+0x54>)
 800c74c:	f007 f9c4 	bl	8013ad8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c750:	2003      	movs	r0, #3
 800c752:	f7fd ff15 	bl	800a580 <memp_malloc>
 800c756:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d101      	bne.n	800c762 <tcp_seg_copy+0x2e>
    return NULL;
 800c75e:	2300      	movs	r3, #0
 800c760:	e00a      	b.n	800c778 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c762:	2210      	movs	r2, #16
 800c764:	6879      	ldr	r1, [r7, #4]
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f007 f9a0 	bl	8013aac <memcpy>
  pbuf_ref(cseg->p);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	4618      	mov	r0, r3
 800c772:	f7fe fde3 	bl	800b33c <pbuf_ref>
  return cseg;
 800c776:	68fb      	ldr	r3, [r7, #12]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3710      	adds	r7, #16
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	080158e4 	.word	0x080158e4
 800c784:	08015e38 	.word	0x08015e38
 800c788:	08015928 	.word	0x08015928

0800c78c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
 800c798:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d109      	bne.n	800c7b4 <tcp_recv_null+0x28>
 800c7a0:	4b12      	ldr	r3, [pc, #72]	; (800c7ec <tcp_recv_null+0x60>)
 800c7a2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c7a6:	4912      	ldr	r1, [pc, #72]	; (800c7f0 <tcp_recv_null+0x64>)
 800c7a8:	4812      	ldr	r0, [pc, #72]	; (800c7f4 <tcp_recv_null+0x68>)
 800c7aa:	f007 f995 	bl	8013ad8 <iprintf>
 800c7ae:	f06f 030f 	mvn.w	r3, #15
 800c7b2:	e016      	b.n	800c7e2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d009      	beq.n	800c7ce <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	891b      	ldrh	r3, [r3, #8]
 800c7be:	4619      	mov	r1, r3
 800c7c0:	68b8      	ldr	r0, [r7, #8]
 800c7c2:	f7ff fb19 	bl	800bdf8 <tcp_recved>
    pbuf_free(p);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f7fe fd18 	bl	800b1fc <pbuf_free>
 800c7cc:	e008      	b.n	800c7e0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c7ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d104      	bne.n	800c7e0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c7d6:	68b8      	ldr	r0, [r7, #8]
 800c7d8:	f7ff f9be 	bl	800bb58 <tcp_close>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	e000      	b.n	800c7e2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	080158e4 	.word	0x080158e4
 800c7f0:	08015e54 	.word	0x08015e54
 800c7f4:	08015928 	.word	0x08015928

0800c7f8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	4603      	mov	r3, r0
 800c800:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c806:	2b00      	cmp	r3, #0
 800c808:	db01      	blt.n	800c80e <tcp_kill_prio+0x16>
 800c80a:	79fb      	ldrb	r3, [r7, #7]
 800c80c:	e000      	b.n	800c810 <tcp_kill_prio+0x18>
 800c80e:	237f      	movs	r3, #127	; 0x7f
 800c810:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c812:	7afb      	ldrb	r3, [r7, #11]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d034      	beq.n	800c882 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c818:	7afb      	ldrb	r3, [r7, #11]
 800c81a:	3b01      	subs	r3, #1
 800c81c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c81e:	2300      	movs	r3, #0
 800c820:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c822:	2300      	movs	r3, #0
 800c824:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c826:	4b19      	ldr	r3, [pc, #100]	; (800c88c <tcp_kill_prio+0x94>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	617b      	str	r3, [r7, #20]
 800c82c:	e01f      	b.n	800c86e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	7d5b      	ldrb	r3, [r3, #21]
 800c832:	7afa      	ldrb	r2, [r7, #11]
 800c834:	429a      	cmp	r2, r3
 800c836:	d80c      	bhi.n	800c852 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c83c:	7afa      	ldrb	r2, [r7, #11]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d112      	bne.n	800c868 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c842:	4b13      	ldr	r3, [pc, #76]	; (800c890 <tcp_kill_prio+0x98>)
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	6a1b      	ldr	r3, [r3, #32]
 800c84a:	1ad3      	subs	r3, r2, r3
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d80a      	bhi.n	800c868 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c852:	4b0f      	ldr	r3, [pc, #60]	; (800c890 <tcp_kill_prio+0x98>)
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	6a1b      	ldr	r3, [r3, #32]
 800c85a:	1ad3      	subs	r3, r2, r3
 800c85c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	7d5b      	ldrb	r3, [r3, #21]
 800c866:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	617b      	str	r3, [r7, #20]
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d1dc      	bne.n	800c82e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d004      	beq.n	800c884 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c87a:	6938      	ldr	r0, [r7, #16]
 800c87c:	f7ff fa56 	bl	800bd2c <tcp_abort>
 800c880:	e000      	b.n	800c884 <tcp_kill_prio+0x8c>
    return;
 800c882:	bf00      	nop
  }
}
 800c884:	3718      	adds	r7, #24
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	20008dc0 	.word	0x20008dc0
 800c890:	20008dc4 	.word	0x20008dc4

0800c894 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
 800c89a:	4603      	mov	r3, r0
 800c89c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c89e:	79fb      	ldrb	r3, [r7, #7]
 800c8a0:	2b08      	cmp	r3, #8
 800c8a2:	d009      	beq.n	800c8b8 <tcp_kill_state+0x24>
 800c8a4:	79fb      	ldrb	r3, [r7, #7]
 800c8a6:	2b09      	cmp	r3, #9
 800c8a8:	d006      	beq.n	800c8b8 <tcp_kill_state+0x24>
 800c8aa:	4b1a      	ldr	r3, [pc, #104]	; (800c914 <tcp_kill_state+0x80>)
 800c8ac:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c8b0:	4919      	ldr	r1, [pc, #100]	; (800c918 <tcp_kill_state+0x84>)
 800c8b2:	481a      	ldr	r0, [pc, #104]	; (800c91c <tcp_kill_state+0x88>)
 800c8b4:	f007 f910 	bl	8013ad8 <iprintf>

  inactivity = 0;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c8c0:	4b17      	ldr	r3, [pc, #92]	; (800c920 <tcp_kill_state+0x8c>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	617b      	str	r3, [r7, #20]
 800c8c6:	e017      	b.n	800c8f8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	7d1b      	ldrb	r3, [r3, #20]
 800c8cc:	79fa      	ldrb	r2, [r7, #7]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d10f      	bne.n	800c8f2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c8d2:	4b14      	ldr	r3, [pc, #80]	; (800c924 <tcp_kill_state+0x90>)
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	6a1b      	ldr	r3, [r3, #32]
 800c8da:	1ad3      	subs	r3, r2, r3
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d807      	bhi.n	800c8f2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c8e2:	4b10      	ldr	r3, [pc, #64]	; (800c924 <tcp_kill_state+0x90>)
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	6a1b      	ldr	r3, [r3, #32]
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	617b      	str	r3, [r7, #20]
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1e4      	bne.n	800c8c8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d003      	beq.n	800c90c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c904:	2100      	movs	r1, #0
 800c906:	6938      	ldr	r0, [r7, #16]
 800c908:	f7ff f952 	bl	800bbb0 <tcp_abandon>
  }
}
 800c90c:	bf00      	nop
 800c90e:	3718      	adds	r7, #24
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	080158e4 	.word	0x080158e4
 800c918:	08015e70 	.word	0x08015e70
 800c91c:	08015928 	.word	0x08015928
 800c920:	20008dc0 	.word	0x20008dc0
 800c924:	20008dc4 	.word	0x20008dc4

0800c928 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c932:	2300      	movs	r3, #0
 800c934:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c936:	4b12      	ldr	r3, [pc, #72]	; (800c980 <tcp_kill_timewait+0x58>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	60fb      	str	r3, [r7, #12]
 800c93c:	e012      	b.n	800c964 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c93e:	4b11      	ldr	r3, [pc, #68]	; (800c984 <tcp_kill_timewait+0x5c>)
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6a1b      	ldr	r3, [r3, #32]
 800c946:	1ad3      	subs	r3, r2, r3
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d807      	bhi.n	800c95e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c94e:	4b0d      	ldr	r3, [pc, #52]	; (800c984 <tcp_kill_timewait+0x5c>)
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	6a1b      	ldr	r3, [r3, #32]
 800c956:	1ad3      	subs	r3, r2, r3
 800c958:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	60fb      	str	r3, [r7, #12]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d1e9      	bne.n	800c93e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d002      	beq.n	800c976 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c970:	68b8      	ldr	r0, [r7, #8]
 800c972:	f7ff f9db 	bl	800bd2c <tcp_abort>
  }
}
 800c976:	bf00      	nop
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	20008dd0 	.word	0x20008dd0
 800c984:	20008dc4 	.word	0x20008dc4

0800c988 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c98e:	4b10      	ldr	r3, [pc, #64]	; (800c9d0 <tcp_handle_closepend+0x48>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c994:	e014      	b.n	800c9c0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	8b5b      	ldrh	r3, [r3, #26]
 800c9a0:	f003 0308 	and.w	r3, r3, #8
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d009      	beq.n	800c9bc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	8b5b      	ldrh	r3, [r3, #26]
 800c9ac:	f023 0308 	bic.w	r3, r3, #8
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f7ff f864 	bl	800ba84 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d1e7      	bne.n	800c996 <tcp_handle_closepend+0xe>
  }
}
 800c9c6:	bf00      	nop
 800c9c8:	bf00      	nop
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	20008dc0 	.word	0x20008dc0

0800c9d4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	4603      	mov	r3, r0
 800c9dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c9de:	2001      	movs	r0, #1
 800c9e0:	f7fd fdce 	bl	800a580 <memp_malloc>
 800c9e4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d126      	bne.n	800ca3a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c9ec:	f7ff ffcc 	bl	800c988 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c9f0:	f7ff ff9a 	bl	800c928 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c9f4:	2001      	movs	r0, #1
 800c9f6:	f7fd fdc3 	bl	800a580 <memp_malloc>
 800c9fa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d11b      	bne.n	800ca3a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ca02:	2009      	movs	r0, #9
 800ca04:	f7ff ff46 	bl	800c894 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ca08:	2001      	movs	r0, #1
 800ca0a:	f7fd fdb9 	bl	800a580 <memp_malloc>
 800ca0e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d111      	bne.n	800ca3a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ca16:	2008      	movs	r0, #8
 800ca18:	f7ff ff3c 	bl	800c894 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ca1c:	2001      	movs	r0, #1
 800ca1e:	f7fd fdaf 	bl	800a580 <memp_malloc>
 800ca22:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d107      	bne.n	800ca3a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ca2a:	79fb      	ldrb	r3, [r7, #7]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7ff fee3 	bl	800c7f8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ca32:	2001      	movs	r0, #1
 800ca34:	f7fd fda4 	bl	800a580 <memp_malloc>
 800ca38:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d03f      	beq.n	800cac0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ca40:	229c      	movs	r2, #156	; 0x9c
 800ca42:	2100      	movs	r1, #0
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f007 f83f 	bl	8013ac8 <memset>
    pcb->prio = prio;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	79fa      	ldrb	r2, [r7, #7]
 800ca4e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ca56:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ca60:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	22ff      	movs	r2, #255	; 0xff
 800ca6e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ca76:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2206      	movs	r2, #6
 800ca7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2206      	movs	r2, #6
 800ca84:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca8c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2201      	movs	r2, #1
 800ca92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ca96:	4b0d      	ldr	r3, [pc, #52]	; (800cacc <tcp_alloc+0xf8>)
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ca9e:	4b0c      	ldr	r3, [pc, #48]	; (800cad0 <tcp_alloc+0xfc>)
 800caa0:	781a      	ldrb	r2, [r3, #0]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800caac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	4a08      	ldr	r2, [pc, #32]	; (800cad4 <tcp_alloc+0x100>)
 800cab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	4a07      	ldr	r2, [pc, #28]	; (800cad8 <tcp_alloc+0x104>)
 800cabc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800cac0:	68fb      	ldr	r3, [r7, #12]
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	20008dc4 	.word	0x20008dc4
 800cad0:	200000d6 	.word	0x200000d6
 800cad4:	0800c78d 	.word	0x0800c78d
 800cad8:	006ddd00 	.word	0x006ddd00

0800cadc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d107      	bne.n	800cafa <tcp_pcb_purge+0x1e>
 800caea:	4b21      	ldr	r3, [pc, #132]	; (800cb70 <tcp_pcb_purge+0x94>)
 800caec:	f640 0251 	movw	r2, #2129	; 0x851
 800caf0:	4920      	ldr	r1, [pc, #128]	; (800cb74 <tcp_pcb_purge+0x98>)
 800caf2:	4821      	ldr	r0, [pc, #132]	; (800cb78 <tcp_pcb_purge+0x9c>)
 800caf4:	f006 fff0 	bl	8013ad8 <iprintf>
 800caf8:	e037      	b.n	800cb6a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	7d1b      	ldrb	r3, [r3, #20]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d033      	beq.n	800cb6a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cb06:	2b0a      	cmp	r3, #10
 800cb08:	d02f      	beq.n	800cb6a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d02b      	beq.n	800cb6a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d007      	beq.n	800cb2a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7fe fb6c 	bl	800b1fc <pbuf_free>
      pcb->refused_data = NULL;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d002      	beq.n	800cb38 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 f986 	bl	800ce44 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cb3e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7ff fdc7 	bl	800c6d8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7ff fdc2 	bl	800c6d8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	66da      	str	r2, [r3, #108]	; 0x6c
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	080158e4 	.word	0x080158e4
 800cb74:	08015f30 	.word	0x08015f30
 800cb78:	08015928 	.word	0x08015928

0800cb7c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d106      	bne.n	800cb9a <tcp_pcb_remove+0x1e>
 800cb8c:	4b3e      	ldr	r3, [pc, #248]	; (800cc88 <tcp_pcb_remove+0x10c>)
 800cb8e:	f640 0283 	movw	r2, #2179	; 0x883
 800cb92:	493e      	ldr	r1, [pc, #248]	; (800cc8c <tcp_pcb_remove+0x110>)
 800cb94:	483e      	ldr	r0, [pc, #248]	; (800cc90 <tcp_pcb_remove+0x114>)
 800cb96:	f006 ff9f 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d106      	bne.n	800cbae <tcp_pcb_remove+0x32>
 800cba0:	4b39      	ldr	r3, [pc, #228]	; (800cc88 <tcp_pcb_remove+0x10c>)
 800cba2:	f640 0284 	movw	r2, #2180	; 0x884
 800cba6:	493b      	ldr	r1, [pc, #236]	; (800cc94 <tcp_pcb_remove+0x118>)
 800cba8:	4839      	ldr	r0, [pc, #228]	; (800cc90 <tcp_pcb_remove+0x114>)
 800cbaa:	f006 ff95 	bl	8013ad8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	683a      	ldr	r2, [r7, #0]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d105      	bne.n	800cbc4 <tcp_pcb_remove+0x48>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	68da      	ldr	r2, [r3, #12]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	601a      	str	r2, [r3, #0]
 800cbc2:	e013      	b.n	800cbec <tcp_pcb_remove+0x70>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	60fb      	str	r3, [r7, #12]
 800cbca:	e00c      	b.n	800cbe6 <tcp_pcb_remove+0x6a>
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	683a      	ldr	r2, [r7, #0]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d104      	bne.n	800cbe0 <tcp_pcb_remove+0x64>
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	68da      	ldr	r2, [r3, #12]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	60da      	str	r2, [r3, #12]
 800cbde:	e005      	b.n	800cbec <tcp_pcb_remove+0x70>
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	60fb      	str	r3, [r7, #12]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1ef      	bne.n	800cbcc <tcp_pcb_remove+0x50>
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cbf2:	6838      	ldr	r0, [r7, #0]
 800cbf4:	f7ff ff72 	bl	800cadc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	7d1b      	ldrb	r3, [r3, #20]
 800cbfc:	2b0a      	cmp	r3, #10
 800cbfe:	d013      	beq.n	800cc28 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d00f      	beq.n	800cc28 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	8b5b      	ldrh	r3, [r3, #26]
 800cc0c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d009      	beq.n	800cc28 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	8b5b      	ldrh	r3, [r3, #26]
 800cc18:	f043 0302 	orr.w	r3, r3, #2
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cc22:	6838      	ldr	r0, [r7, #0]
 800cc24:	f002 ff6a 	bl	800fafc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	7d1b      	ldrb	r3, [r3, #20]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d020      	beq.n	800cc72 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d006      	beq.n	800cc46 <tcp_pcb_remove+0xca>
 800cc38:	4b13      	ldr	r3, [pc, #76]	; (800cc88 <tcp_pcb_remove+0x10c>)
 800cc3a:	f640 0293 	movw	r2, #2195	; 0x893
 800cc3e:	4916      	ldr	r1, [pc, #88]	; (800cc98 <tcp_pcb_remove+0x11c>)
 800cc40:	4813      	ldr	r0, [pc, #76]	; (800cc90 <tcp_pcb_remove+0x114>)
 800cc42:	f006 ff49 	bl	8013ad8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d006      	beq.n	800cc5c <tcp_pcb_remove+0xe0>
 800cc4e:	4b0e      	ldr	r3, [pc, #56]	; (800cc88 <tcp_pcb_remove+0x10c>)
 800cc50:	f640 0294 	movw	r2, #2196	; 0x894
 800cc54:	4911      	ldr	r1, [pc, #68]	; (800cc9c <tcp_pcb_remove+0x120>)
 800cc56:	480e      	ldr	r0, [pc, #56]	; (800cc90 <tcp_pcb_remove+0x114>)
 800cc58:	f006 ff3e 	bl	8013ad8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d006      	beq.n	800cc72 <tcp_pcb_remove+0xf6>
 800cc64:	4b08      	ldr	r3, [pc, #32]	; (800cc88 <tcp_pcb_remove+0x10c>)
 800cc66:	f640 0296 	movw	r2, #2198	; 0x896
 800cc6a:	490d      	ldr	r1, [pc, #52]	; (800cca0 <tcp_pcb_remove+0x124>)
 800cc6c:	4808      	ldr	r0, [pc, #32]	; (800cc90 <tcp_pcb_remove+0x114>)
 800cc6e:	f006 ff33 	bl	8013ad8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	2200      	movs	r2, #0
 800cc76:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800cc7e:	bf00      	nop
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	080158e4 	.word	0x080158e4
 800cc8c:	08015f4c 	.word	0x08015f4c
 800cc90:	08015928 	.word	0x08015928
 800cc94:	08015f68 	.word	0x08015f68
 800cc98:	08015f88 	.word	0x08015f88
 800cc9c:	08015fa0 	.word	0x08015fa0
 800cca0:	08015fbc 	.word	0x08015fbc

0800cca4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d106      	bne.n	800ccc0 <tcp_next_iss+0x1c>
 800ccb2:	4b0a      	ldr	r3, [pc, #40]	; (800ccdc <tcp_next_iss+0x38>)
 800ccb4:	f640 02af 	movw	r2, #2223	; 0x8af
 800ccb8:	4909      	ldr	r1, [pc, #36]	; (800cce0 <tcp_next_iss+0x3c>)
 800ccba:	480a      	ldr	r0, [pc, #40]	; (800cce4 <tcp_next_iss+0x40>)
 800ccbc:	f006 ff0c 	bl	8013ad8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ccc0:	4b09      	ldr	r3, [pc, #36]	; (800cce8 <tcp_next_iss+0x44>)
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	4b09      	ldr	r3, [pc, #36]	; (800ccec <tcp_next_iss+0x48>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4413      	add	r3, r2
 800ccca:	4a07      	ldr	r2, [pc, #28]	; (800cce8 <tcp_next_iss+0x44>)
 800cccc:	6013      	str	r3, [r2, #0]
  return iss;
 800ccce:	4b06      	ldr	r3, [pc, #24]	; (800cce8 <tcp_next_iss+0x44>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3708      	adds	r7, #8
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	080158e4 	.word	0x080158e4
 800cce0:	08015fd4 	.word	0x08015fd4
 800cce4:	08015928 	.word	0x08015928
 800cce8:	20000010 	.word	0x20000010
 800ccec:	20008dc4 	.word	0x20008dc4

0800ccf0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b086      	sub	sp, #24
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]
 800ccfc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d106      	bne.n	800cd12 <tcp_eff_send_mss_netif+0x22>
 800cd04:	4b14      	ldr	r3, [pc, #80]	; (800cd58 <tcp_eff_send_mss_netif+0x68>)
 800cd06:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800cd0a:	4914      	ldr	r1, [pc, #80]	; (800cd5c <tcp_eff_send_mss_netif+0x6c>)
 800cd0c:	4814      	ldr	r0, [pc, #80]	; (800cd60 <tcp_eff_send_mss_netif+0x70>)
 800cd0e:	f006 fee3 	bl	8013ad8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d101      	bne.n	800cd1c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800cd18:	89fb      	ldrh	r3, [r7, #14]
 800cd1a:	e019      	b.n	800cd50 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cd20:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800cd22:	8afb      	ldrh	r3, [r7, #22]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d012      	beq.n	800cd4e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800cd28:	2328      	movs	r3, #40	; 0x28
 800cd2a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800cd2c:	8afa      	ldrh	r2, [r7, #22]
 800cd2e:	8abb      	ldrh	r3, [r7, #20]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d904      	bls.n	800cd3e <tcp_eff_send_mss_netif+0x4e>
 800cd34:	8afa      	ldrh	r2, [r7, #22]
 800cd36:	8abb      	ldrh	r3, [r7, #20]
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	e000      	b.n	800cd40 <tcp_eff_send_mss_netif+0x50>
 800cd3e:	2300      	movs	r3, #0
 800cd40:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800cd42:	8a7a      	ldrh	r2, [r7, #18]
 800cd44:	89fb      	ldrh	r3, [r7, #14]
 800cd46:	4293      	cmp	r3, r2
 800cd48:	bf28      	it	cs
 800cd4a:	4613      	movcs	r3, r2
 800cd4c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800cd4e:	89fb      	ldrh	r3, [r7, #14]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3718      	adds	r7, #24
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	080158e4 	.word	0x080158e4
 800cd5c:	08015ff0 	.word	0x08015ff0
 800cd60:	08015928 	.word	0x08015928

0800cd64 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d119      	bne.n	800cdac <tcp_netif_ip_addr_changed_pcblist+0x48>
 800cd78:	4b10      	ldr	r3, [pc, #64]	; (800cdbc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800cd7a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800cd7e:	4910      	ldr	r1, [pc, #64]	; (800cdc0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800cd80:	4810      	ldr	r0, [pc, #64]	; (800cdc4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800cd82:	f006 fea9 	bl	8013ad8 <iprintf>

  while (pcb != NULL) {
 800cd86:	e011      	b.n	800cdac <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d108      	bne.n	800cda6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f7fe ffc6 	bl	800bd2c <tcp_abort>
      pcb = next;
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	60fb      	str	r3, [r7, #12]
 800cda4:	e002      	b.n	800cdac <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1ea      	bne.n	800cd88 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800cdb2:	bf00      	nop
 800cdb4:	bf00      	nop
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	080158e4 	.word	0x080158e4
 800cdc0:	08016018 	.word	0x08016018
 800cdc4:	08015928 	.word	0x08015928

0800cdc8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d02a      	beq.n	800ce2e <tcp_netif_ip_addr_changed+0x66>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d026      	beq.n	800ce2e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cde0:	4b15      	ldr	r3, [pc, #84]	; (800ce38 <tcp_netif_ip_addr_changed+0x70>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4619      	mov	r1, r3
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f7ff ffbc 	bl	800cd64 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cdec:	4b13      	ldr	r3, [pc, #76]	; (800ce3c <tcp_netif_ip_addr_changed+0x74>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f7ff ffb6 	bl	800cd64 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d017      	beq.n	800ce2e <tcp_netif_ip_addr_changed+0x66>
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d013      	beq.n	800ce2e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ce06:	4b0e      	ldr	r3, [pc, #56]	; (800ce40 <tcp_netif_ip_addr_changed+0x78>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	60fb      	str	r3, [r7, #12]
 800ce0c:	e00c      	b.n	800ce28 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d103      	bne.n	800ce22 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	60fb      	str	r3, [r7, #12]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d1ef      	bne.n	800ce0e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ce2e:	bf00      	nop
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	20008dc0 	.word	0x20008dc0
 800ce3c:	20008dcc 	.word	0x20008dcc
 800ce40:	20008dc8 	.word	0x20008dc8

0800ce44 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b082      	sub	sp, #8
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d007      	beq.n	800ce64 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7ff fc3d 	bl	800c6d8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2200      	movs	r2, #0
 800ce62:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ce64:	bf00      	nop
 800ce66:	3708      	adds	r7, #8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ce6c:	b590      	push	{r4, r7, lr}
 800ce6e:	b08d      	sub	sp, #52	; 0x34
 800ce70:	af04      	add	r7, sp, #16
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d105      	bne.n	800ce88 <tcp_input+0x1c>
 800ce7c:	4b9b      	ldr	r3, [pc, #620]	; (800d0ec <tcp_input+0x280>)
 800ce7e:	2283      	movs	r2, #131	; 0x83
 800ce80:	499b      	ldr	r1, [pc, #620]	; (800d0f0 <tcp_input+0x284>)
 800ce82:	489c      	ldr	r0, [pc, #624]	; (800d0f4 <tcp_input+0x288>)
 800ce84:	f006 fe28 	bl	8013ad8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	4a9a      	ldr	r2, [pc, #616]	; (800d0f8 <tcp_input+0x28c>)
 800ce8e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	895b      	ldrh	r3, [r3, #10]
 800ce94:	2b13      	cmp	r3, #19
 800ce96:	f240 83c4 	bls.w	800d622 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ce9a:	4b98      	ldr	r3, [pc, #608]	; (800d0fc <tcp_input+0x290>)
 800ce9c:	695b      	ldr	r3, [r3, #20]
 800ce9e:	4a97      	ldr	r2, [pc, #604]	; (800d0fc <tcp_input+0x290>)
 800cea0:	6812      	ldr	r2, [r2, #0]
 800cea2:	4611      	mov	r1, r2
 800cea4:	4618      	mov	r0, r3
 800cea6:	f005 fe7f 	bl	8012ba8 <ip4_addr_isbroadcast_u32>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f040 83ba 	bne.w	800d626 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ceb2:	4b92      	ldr	r3, [pc, #584]	; (800d0fc <tcp_input+0x290>)
 800ceb4:	695b      	ldr	r3, [r3, #20]
 800ceb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ceba:	2be0      	cmp	r3, #224	; 0xe0
 800cebc:	f000 83b3 	beq.w	800d626 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cec0:	4b8d      	ldr	r3, [pc, #564]	; (800d0f8 <tcp_input+0x28c>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	899b      	ldrh	r3, [r3, #12]
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	4618      	mov	r0, r3
 800ceca:	f7fc fef3 	bl	8009cb4 <lwip_htons>
 800cece:	4603      	mov	r3, r0
 800ced0:	0b1b      	lsrs	r3, r3, #12
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ceda:	7cbb      	ldrb	r3, [r7, #18]
 800cedc:	2b13      	cmp	r3, #19
 800cede:	f240 83a4 	bls.w	800d62a <tcp_input+0x7be>
 800cee2:	7cbb      	ldrb	r3, [r7, #18]
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	891b      	ldrh	r3, [r3, #8]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	f200 839d 	bhi.w	800d62a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cef0:	7cbb      	ldrb	r3, [r7, #18]
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	3b14      	subs	r3, #20
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	4b81      	ldr	r3, [pc, #516]	; (800d100 <tcp_input+0x294>)
 800cefa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800cefc:	4b81      	ldr	r3, [pc, #516]	; (800d104 <tcp_input+0x298>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	895a      	ldrh	r2, [r3, #10]
 800cf06:	7cbb      	ldrb	r3, [r7, #18]
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d309      	bcc.n	800cf22 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800cf0e:	4b7c      	ldr	r3, [pc, #496]	; (800d100 <tcp_input+0x294>)
 800cf10:	881a      	ldrh	r2, [r3, #0]
 800cf12:	4b7d      	ldr	r3, [pc, #500]	; (800d108 <tcp_input+0x29c>)
 800cf14:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cf16:	7cbb      	ldrb	r3, [r7, #18]
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7fe f8e8 	bl	800b0f0 <pbuf_remove_header>
 800cf20:	e04e      	b.n	800cfc0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d105      	bne.n	800cf36 <tcp_input+0xca>
 800cf2a:	4b70      	ldr	r3, [pc, #448]	; (800d0ec <tcp_input+0x280>)
 800cf2c:	22c2      	movs	r2, #194	; 0xc2
 800cf2e:	4977      	ldr	r1, [pc, #476]	; (800d10c <tcp_input+0x2a0>)
 800cf30:	4870      	ldr	r0, [pc, #448]	; (800d0f4 <tcp_input+0x288>)
 800cf32:	f006 fdd1 	bl	8013ad8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800cf36:	2114      	movs	r1, #20
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7fe f8d9 	bl	800b0f0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	895a      	ldrh	r2, [r3, #10]
 800cf42:	4b71      	ldr	r3, [pc, #452]	; (800d108 <tcp_input+0x29c>)
 800cf44:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cf46:	4b6e      	ldr	r3, [pc, #440]	; (800d100 <tcp_input+0x294>)
 800cf48:	881a      	ldrh	r2, [r3, #0]
 800cf4a:	4b6f      	ldr	r3, [pc, #444]	; (800d108 <tcp_input+0x29c>)
 800cf4c:	881b      	ldrh	r3, [r3, #0]
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800cf52:	4b6d      	ldr	r3, [pc, #436]	; (800d108 <tcp_input+0x29c>)
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	4619      	mov	r1, r3
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7fe f8c9 	bl	800b0f0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	895b      	ldrh	r3, [r3, #10]
 800cf64:	8a3a      	ldrh	r2, [r7, #16]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	f200 8361 	bhi.w	800d62e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	4a64      	ldr	r2, [pc, #400]	; (800d104 <tcp_input+0x298>)
 800cf74:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	8a3a      	ldrh	r2, [r7, #16]
 800cf7c:	4611      	mov	r1, r2
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7fe f8b6 	bl	800b0f0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	891a      	ldrh	r2, [r3, #8]
 800cf88:	8a3b      	ldrh	r3, [r7, #16]
 800cf8a:	1ad3      	subs	r3, r2, r3
 800cf8c:	b29a      	uxth	r2, r3
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	895b      	ldrh	r3, [r3, #10]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d005      	beq.n	800cfa6 <tcp_input+0x13a>
 800cf9a:	4b54      	ldr	r3, [pc, #336]	; (800d0ec <tcp_input+0x280>)
 800cf9c:	22df      	movs	r2, #223	; 0xdf
 800cf9e:	495c      	ldr	r1, [pc, #368]	; (800d110 <tcp_input+0x2a4>)
 800cfa0:	4854      	ldr	r0, [pc, #336]	; (800d0f4 <tcp_input+0x288>)
 800cfa2:	f006 fd99 	bl	8013ad8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	891a      	ldrh	r2, [r3, #8]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	891b      	ldrh	r3, [r3, #8]
 800cfb0:	429a      	cmp	r2, r3
 800cfb2:	d005      	beq.n	800cfc0 <tcp_input+0x154>
 800cfb4:	4b4d      	ldr	r3, [pc, #308]	; (800d0ec <tcp_input+0x280>)
 800cfb6:	22e0      	movs	r2, #224	; 0xe0
 800cfb8:	4956      	ldr	r1, [pc, #344]	; (800d114 <tcp_input+0x2a8>)
 800cfba:	484e      	ldr	r0, [pc, #312]	; (800d0f4 <tcp_input+0x288>)
 800cfbc:	f006 fd8c 	bl	8013ad8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cfc0:	4b4d      	ldr	r3, [pc, #308]	; (800d0f8 <tcp_input+0x28c>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	881b      	ldrh	r3, [r3, #0]
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	4a4b      	ldr	r2, [pc, #300]	; (800d0f8 <tcp_input+0x28c>)
 800cfca:	6814      	ldr	r4, [r2, #0]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7fc fe71 	bl	8009cb4 <lwip_htons>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cfd6:	4b48      	ldr	r3, [pc, #288]	; (800d0f8 <tcp_input+0x28c>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	885b      	ldrh	r3, [r3, #2]
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	4a46      	ldr	r2, [pc, #280]	; (800d0f8 <tcp_input+0x28c>)
 800cfe0:	6814      	ldr	r4, [r2, #0]
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fc fe66 	bl	8009cb4 <lwip_htons>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cfec:	4b42      	ldr	r3, [pc, #264]	; (800d0f8 <tcp_input+0x28c>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	4a41      	ldr	r2, [pc, #260]	; (800d0f8 <tcp_input+0x28c>)
 800cff4:	6814      	ldr	r4, [r2, #0]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fc fe71 	bl	8009cde <lwip_htonl>
 800cffc:	4603      	mov	r3, r0
 800cffe:	6063      	str	r3, [r4, #4]
 800d000:	6863      	ldr	r3, [r4, #4]
 800d002:	4a45      	ldr	r2, [pc, #276]	; (800d118 <tcp_input+0x2ac>)
 800d004:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d006:	4b3c      	ldr	r3, [pc, #240]	; (800d0f8 <tcp_input+0x28c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	4a3a      	ldr	r2, [pc, #232]	; (800d0f8 <tcp_input+0x28c>)
 800d00e:	6814      	ldr	r4, [r2, #0]
 800d010:	4618      	mov	r0, r3
 800d012:	f7fc fe64 	bl	8009cde <lwip_htonl>
 800d016:	4603      	mov	r3, r0
 800d018:	60a3      	str	r3, [r4, #8]
 800d01a:	68a3      	ldr	r3, [r4, #8]
 800d01c:	4a3f      	ldr	r2, [pc, #252]	; (800d11c <tcp_input+0x2b0>)
 800d01e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d020:	4b35      	ldr	r3, [pc, #212]	; (800d0f8 <tcp_input+0x28c>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	89db      	ldrh	r3, [r3, #14]
 800d026:	b29b      	uxth	r3, r3
 800d028:	4a33      	ldr	r2, [pc, #204]	; (800d0f8 <tcp_input+0x28c>)
 800d02a:	6814      	ldr	r4, [r2, #0]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7fc fe41 	bl	8009cb4 <lwip_htons>
 800d032:	4603      	mov	r3, r0
 800d034:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d036:	4b30      	ldr	r3, [pc, #192]	; (800d0f8 <tcp_input+0x28c>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	899b      	ldrh	r3, [r3, #12]
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fc fe38 	bl	8009cb4 <lwip_htons>
 800d044:	4603      	mov	r3, r0
 800d046:	b2db      	uxtb	r3, r3
 800d048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d04c:	b2da      	uxtb	r2, r3
 800d04e:	4b34      	ldr	r3, [pc, #208]	; (800d120 <tcp_input+0x2b4>)
 800d050:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	891a      	ldrh	r2, [r3, #8]
 800d056:	4b33      	ldr	r3, [pc, #204]	; (800d124 <tcp_input+0x2b8>)
 800d058:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d05a:	4b31      	ldr	r3, [pc, #196]	; (800d120 <tcp_input+0x2b4>)
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	f003 0303 	and.w	r3, r3, #3
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00c      	beq.n	800d080 <tcp_input+0x214>
    tcplen++;
 800d066:	4b2f      	ldr	r3, [pc, #188]	; (800d124 <tcp_input+0x2b8>)
 800d068:	881b      	ldrh	r3, [r3, #0]
 800d06a:	3301      	adds	r3, #1
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	4b2d      	ldr	r3, [pc, #180]	; (800d124 <tcp_input+0x2b8>)
 800d070:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	891a      	ldrh	r2, [r3, #8]
 800d076:	4b2b      	ldr	r3, [pc, #172]	; (800d124 <tcp_input+0x2b8>)
 800d078:	881b      	ldrh	r3, [r3, #0]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	f200 82d9 	bhi.w	800d632 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d080:	2300      	movs	r3, #0
 800d082:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d084:	4b28      	ldr	r3, [pc, #160]	; (800d128 <tcp_input+0x2bc>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	61fb      	str	r3, [r7, #28]
 800d08a:	e09d      	b.n	800d1c8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d08c:	69fb      	ldr	r3, [r7, #28]
 800d08e:	7d1b      	ldrb	r3, [r3, #20]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d105      	bne.n	800d0a0 <tcp_input+0x234>
 800d094:	4b15      	ldr	r3, [pc, #84]	; (800d0ec <tcp_input+0x280>)
 800d096:	22fb      	movs	r2, #251	; 0xfb
 800d098:	4924      	ldr	r1, [pc, #144]	; (800d12c <tcp_input+0x2c0>)
 800d09a:	4816      	ldr	r0, [pc, #88]	; (800d0f4 <tcp_input+0x288>)
 800d09c:	f006 fd1c 	bl	8013ad8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	7d1b      	ldrb	r3, [r3, #20]
 800d0a4:	2b0a      	cmp	r3, #10
 800d0a6:	d105      	bne.n	800d0b4 <tcp_input+0x248>
 800d0a8:	4b10      	ldr	r3, [pc, #64]	; (800d0ec <tcp_input+0x280>)
 800d0aa:	22fc      	movs	r2, #252	; 0xfc
 800d0ac:	4920      	ldr	r1, [pc, #128]	; (800d130 <tcp_input+0x2c4>)
 800d0ae:	4811      	ldr	r0, [pc, #68]	; (800d0f4 <tcp_input+0x288>)
 800d0b0:	f006 fd12 	bl	8013ad8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	7d1b      	ldrb	r3, [r3, #20]
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d105      	bne.n	800d0c8 <tcp_input+0x25c>
 800d0bc:	4b0b      	ldr	r3, [pc, #44]	; (800d0ec <tcp_input+0x280>)
 800d0be:	22fd      	movs	r2, #253	; 0xfd
 800d0c0:	491c      	ldr	r1, [pc, #112]	; (800d134 <tcp_input+0x2c8>)
 800d0c2:	480c      	ldr	r0, [pc, #48]	; (800d0f4 <tcp_input+0x288>)
 800d0c4:	f006 fd08 	bl	8013ad8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	7a1b      	ldrb	r3, [r3, #8]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d033      	beq.n	800d138 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d0d0:	69fb      	ldr	r3, [r7, #28]
 800d0d2:	7a1a      	ldrb	r2, [r3, #8]
 800d0d4:	4b09      	ldr	r3, [pc, #36]	; (800d0fc <tcp_input+0x290>)
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0dc:	3301      	adds	r3, #1
 800d0de:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d029      	beq.n	800d138 <tcp_input+0x2cc>
      prev = pcb;
 800d0e4:	69fb      	ldr	r3, [r7, #28]
 800d0e6:	61bb      	str	r3, [r7, #24]
      continue;
 800d0e8:	e06b      	b.n	800d1c2 <tcp_input+0x356>
 800d0ea:	bf00      	nop
 800d0ec:	0801604c 	.word	0x0801604c
 800d0f0:	08016080 	.word	0x08016080
 800d0f4:	08016098 	.word	0x08016098
 800d0f8:	200000e8 	.word	0x200000e8
 800d0fc:	20003cd4 	.word	0x20003cd4
 800d100:	200000ec 	.word	0x200000ec
 800d104:	200000f0 	.word	0x200000f0
 800d108:	200000ee 	.word	0x200000ee
 800d10c:	080160c0 	.word	0x080160c0
 800d110:	080160d0 	.word	0x080160d0
 800d114:	080160dc 	.word	0x080160dc
 800d118:	200000f8 	.word	0x200000f8
 800d11c:	200000fc 	.word	0x200000fc
 800d120:	20000104 	.word	0x20000104
 800d124:	20000102 	.word	0x20000102
 800d128:	20008dc0 	.word	0x20008dc0
 800d12c:	080160fc 	.word	0x080160fc
 800d130:	08016124 	.word	0x08016124
 800d134:	08016150 	.word	0x08016150
    }

    if (pcb->remote_port == tcphdr->src &&
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	8b1a      	ldrh	r2, [r3, #24]
 800d13c:	4b94      	ldr	r3, [pc, #592]	; (800d390 <tcp_input+0x524>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	881b      	ldrh	r3, [r3, #0]
 800d142:	b29b      	uxth	r3, r3
 800d144:	429a      	cmp	r2, r3
 800d146:	d13a      	bne.n	800d1be <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	8ada      	ldrh	r2, [r3, #22]
 800d14c:	4b90      	ldr	r3, [pc, #576]	; (800d390 <tcp_input+0x524>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	885b      	ldrh	r3, [r3, #2]
 800d152:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d154:	429a      	cmp	r2, r3
 800d156:	d132      	bne.n	800d1be <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	685a      	ldr	r2, [r3, #4]
 800d15c:	4b8d      	ldr	r3, [pc, #564]	; (800d394 <tcp_input+0x528>)
 800d15e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d160:	429a      	cmp	r2, r3
 800d162:	d12c      	bne.n	800d1be <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	4b8a      	ldr	r3, [pc, #552]	; (800d394 <tcp_input+0x528>)
 800d16a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d126      	bne.n	800d1be <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d170:	69fb      	ldr	r3, [r7, #28]
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	69fa      	ldr	r2, [r7, #28]
 800d176:	429a      	cmp	r2, r3
 800d178:	d106      	bne.n	800d188 <tcp_input+0x31c>
 800d17a:	4b87      	ldr	r3, [pc, #540]	; (800d398 <tcp_input+0x52c>)
 800d17c:	f240 120d 	movw	r2, #269	; 0x10d
 800d180:	4986      	ldr	r1, [pc, #536]	; (800d39c <tcp_input+0x530>)
 800d182:	4887      	ldr	r0, [pc, #540]	; (800d3a0 <tcp_input+0x534>)
 800d184:	f006 fca8 	bl	8013ad8 <iprintf>
      if (prev != NULL) {
 800d188:	69bb      	ldr	r3, [r7, #24]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d00a      	beq.n	800d1a4 <tcp_input+0x338>
        prev->next = pcb->next;
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	68da      	ldr	r2, [r3, #12]
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d196:	4b83      	ldr	r3, [pc, #524]	; (800d3a4 <tcp_input+0x538>)
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d19e:	4a81      	ldr	r2, [pc, #516]	; (800d3a4 <tcp_input+0x538>)
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d1a4:	69fb      	ldr	r3, [r7, #28]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	69fa      	ldr	r2, [r7, #28]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d111      	bne.n	800d1d2 <tcp_input+0x366>
 800d1ae:	4b7a      	ldr	r3, [pc, #488]	; (800d398 <tcp_input+0x52c>)
 800d1b0:	f240 1215 	movw	r2, #277	; 0x115
 800d1b4:	497c      	ldr	r1, [pc, #496]	; (800d3a8 <tcp_input+0x53c>)
 800d1b6:	487a      	ldr	r0, [pc, #488]	; (800d3a0 <tcp_input+0x534>)
 800d1b8:	f006 fc8e 	bl	8013ad8 <iprintf>
      break;
 800d1bc:	e009      	b.n	800d1d2 <tcp_input+0x366>
    }
    prev = pcb;
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1c2:	69fb      	ldr	r3, [r7, #28]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	61fb      	str	r3, [r7, #28]
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	f47f af5e 	bne.w	800d08c <tcp_input+0x220>
 800d1d0:	e000      	b.n	800d1d4 <tcp_input+0x368>
      break;
 800d1d2:	bf00      	nop
  }

  if (pcb == NULL) {
 800d1d4:	69fb      	ldr	r3, [r7, #28]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	f040 8095 	bne.w	800d306 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1dc:	4b73      	ldr	r3, [pc, #460]	; (800d3ac <tcp_input+0x540>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	61fb      	str	r3, [r7, #28]
 800d1e2:	e03f      	b.n	800d264 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	7d1b      	ldrb	r3, [r3, #20]
 800d1e8:	2b0a      	cmp	r3, #10
 800d1ea:	d006      	beq.n	800d1fa <tcp_input+0x38e>
 800d1ec:	4b6a      	ldr	r3, [pc, #424]	; (800d398 <tcp_input+0x52c>)
 800d1ee:	f240 121f 	movw	r2, #287	; 0x11f
 800d1f2:	496f      	ldr	r1, [pc, #444]	; (800d3b0 <tcp_input+0x544>)
 800d1f4:	486a      	ldr	r0, [pc, #424]	; (800d3a0 <tcp_input+0x534>)
 800d1f6:	f006 fc6f 	bl	8013ad8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	7a1b      	ldrb	r3, [r3, #8]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d009      	beq.n	800d216 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	7a1a      	ldrb	r2, [r3, #8]
 800d206:	4b63      	ldr	r3, [pc, #396]	; (800d394 <tcp_input+0x528>)
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d20e:	3301      	adds	r3, #1
 800d210:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d212:	429a      	cmp	r2, r3
 800d214:	d122      	bne.n	800d25c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	8b1a      	ldrh	r2, [r3, #24]
 800d21a:	4b5d      	ldr	r3, [pc, #372]	; (800d390 <tcp_input+0x524>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	881b      	ldrh	r3, [r3, #0]
 800d220:	b29b      	uxth	r3, r3
 800d222:	429a      	cmp	r2, r3
 800d224:	d11b      	bne.n	800d25e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	8ada      	ldrh	r2, [r3, #22]
 800d22a:	4b59      	ldr	r3, [pc, #356]	; (800d390 <tcp_input+0x524>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	885b      	ldrh	r3, [r3, #2]
 800d230:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d232:	429a      	cmp	r2, r3
 800d234:	d113      	bne.n	800d25e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d236:	69fb      	ldr	r3, [r7, #28]
 800d238:	685a      	ldr	r2, [r3, #4]
 800d23a:	4b56      	ldr	r3, [pc, #344]	; (800d394 <tcp_input+0x528>)
 800d23c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d23e:	429a      	cmp	r2, r3
 800d240:	d10d      	bne.n	800d25e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	681a      	ldr	r2, [r3, #0]
 800d246:	4b53      	ldr	r3, [pc, #332]	; (800d394 <tcp_input+0x528>)
 800d248:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d107      	bne.n	800d25e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d24e:	69f8      	ldr	r0, [r7, #28]
 800d250:	f000 fb54 	bl	800d8fc <tcp_timewait_input>
        }
        pbuf_free(p);
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f7fd ffd1 	bl	800b1fc <pbuf_free>
        return;
 800d25a:	e1f0      	b.n	800d63e <tcp_input+0x7d2>
        continue;
 800d25c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	61fb      	str	r3, [r7, #28]
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1bc      	bne.n	800d1e4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d26a:	2300      	movs	r3, #0
 800d26c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d26e:	4b51      	ldr	r3, [pc, #324]	; (800d3b4 <tcp_input+0x548>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	617b      	str	r3, [r7, #20]
 800d274:	e02a      	b.n	800d2cc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	7a1b      	ldrb	r3, [r3, #8]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d00c      	beq.n	800d298 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	7a1a      	ldrb	r2, [r3, #8]
 800d282:	4b44      	ldr	r3, [pc, #272]	; (800d394 <tcp_input+0x528>)
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d28a:	3301      	adds	r3, #1
 800d28c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d28e:	429a      	cmp	r2, r3
 800d290:	d002      	beq.n	800d298 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	61bb      	str	r3, [r7, #24]
        continue;
 800d296:	e016      	b.n	800d2c6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	8ada      	ldrh	r2, [r3, #22]
 800d29c:	4b3c      	ldr	r3, [pc, #240]	; (800d390 <tcp_input+0x524>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	885b      	ldrh	r3, [r3, #2]
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d10c      	bne.n	800d2c2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	4b39      	ldr	r3, [pc, #228]	; (800d394 <tcp_input+0x528>)
 800d2ae:	695b      	ldr	r3, [r3, #20]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d00f      	beq.n	800d2d4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00d      	beq.n	800d2d6 <tcp_input+0x46a>
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d009      	beq.n	800d2d6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	68db      	ldr	r3, [r3, #12]
 800d2ca:	617b      	str	r3, [r7, #20]
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d1d1      	bne.n	800d276 <tcp_input+0x40a>
 800d2d2:	e000      	b.n	800d2d6 <tcp_input+0x46a>
            break;
 800d2d4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d014      	beq.n	800d306 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d2dc:	69bb      	ldr	r3, [r7, #24]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00a      	beq.n	800d2f8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	68da      	ldr	r2, [r3, #12]
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d2ea:	4b32      	ldr	r3, [pc, #200]	; (800d3b4 <tcp_input+0x548>)
 800d2ec:	681a      	ldr	r2, [r3, #0]
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d2f2:	4a30      	ldr	r2, [pc, #192]	; (800d3b4 <tcp_input+0x548>)
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d2f8:	6978      	ldr	r0, [r7, #20]
 800d2fa:	f000 fa01 	bl	800d700 <tcp_listen_input>
      }
      pbuf_free(p);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7fd ff7c 	bl	800b1fc <pbuf_free>
      return;
 800d304:	e19b      	b.n	800d63e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d306:	69fb      	ldr	r3, [r7, #28]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f000 8160 	beq.w	800d5ce <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d30e:	4b2a      	ldr	r3, [pc, #168]	; (800d3b8 <tcp_input+0x54c>)
 800d310:	2200      	movs	r2, #0
 800d312:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	891a      	ldrh	r2, [r3, #8]
 800d318:	4b27      	ldr	r3, [pc, #156]	; (800d3b8 <tcp_input+0x54c>)
 800d31a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d31c:	4a26      	ldr	r2, [pc, #152]	; (800d3b8 <tcp_input+0x54c>)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d322:	4b1b      	ldr	r3, [pc, #108]	; (800d390 <tcp_input+0x524>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a24      	ldr	r2, [pc, #144]	; (800d3b8 <tcp_input+0x54c>)
 800d328:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d32a:	4b24      	ldr	r3, [pc, #144]	; (800d3bc <tcp_input+0x550>)
 800d32c:	2200      	movs	r2, #0
 800d32e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d330:	4b23      	ldr	r3, [pc, #140]	; (800d3c0 <tcp_input+0x554>)
 800d332:	2200      	movs	r2, #0
 800d334:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d336:	4b23      	ldr	r3, [pc, #140]	; (800d3c4 <tcp_input+0x558>)
 800d338:	2200      	movs	r2, #0
 800d33a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d33c:	4b22      	ldr	r3, [pc, #136]	; (800d3c8 <tcp_input+0x55c>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	f003 0308 	and.w	r3, r3, #8
 800d344:	2b00      	cmp	r3, #0
 800d346:	d006      	beq.n	800d356 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	7b5b      	ldrb	r3, [r3, #13]
 800d34c:	f043 0301 	orr.w	r3, r3, #1
 800d350:	b2da      	uxtb	r2, r3
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d038      	beq.n	800d3d0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d35e:	69f8      	ldr	r0, [r7, #28]
 800d360:	f7ff f93e 	bl	800c5e0 <tcp_process_refused_data>
 800d364:	4603      	mov	r3, r0
 800d366:	f113 0f0d 	cmn.w	r3, #13
 800d36a:	d007      	beq.n	800d37c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d370:	2b00      	cmp	r3, #0
 800d372:	d02d      	beq.n	800d3d0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d374:	4b15      	ldr	r3, [pc, #84]	; (800d3cc <tcp_input+0x560>)
 800d376:	881b      	ldrh	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d029      	beq.n	800d3d0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d380:	2b00      	cmp	r3, #0
 800d382:	f040 8104 	bne.w	800d58e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d386:	69f8      	ldr	r0, [r7, #28]
 800d388:	f003 f9be 	bl	8010708 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d38c:	e0ff      	b.n	800d58e <tcp_input+0x722>
 800d38e:	bf00      	nop
 800d390:	200000e8 	.word	0x200000e8
 800d394:	20003cd4 	.word	0x20003cd4
 800d398:	0801604c 	.word	0x0801604c
 800d39c:	08016178 	.word	0x08016178
 800d3a0:	08016098 	.word	0x08016098
 800d3a4:	20008dc0 	.word	0x20008dc0
 800d3a8:	080161a4 	.word	0x080161a4
 800d3ac:	20008dd0 	.word	0x20008dd0
 800d3b0:	080161d0 	.word	0x080161d0
 800d3b4:	20008dc8 	.word	0x20008dc8
 800d3b8:	200000d8 	.word	0x200000d8
 800d3bc:	20000108 	.word	0x20000108
 800d3c0:	20000105 	.word	0x20000105
 800d3c4:	20000100 	.word	0x20000100
 800d3c8:	20000104 	.word	0x20000104
 800d3cc:	20000102 	.word	0x20000102
      }
    }
    tcp_input_pcb = pcb;
 800d3d0:	4a9c      	ldr	r2, [pc, #624]	; (800d644 <tcp_input+0x7d8>)
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d3d6:	69f8      	ldr	r0, [r7, #28]
 800d3d8:	f000 fb0a 	bl	800d9f0 <tcp_process>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d3e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d3e4:	f113 0f0d 	cmn.w	r3, #13
 800d3e8:	f000 80d3 	beq.w	800d592 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800d3ec:	4b96      	ldr	r3, [pc, #600]	; (800d648 <tcp_input+0x7dc>)
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	f003 0308 	and.w	r3, r3, #8
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d015      	beq.n	800d424 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d008      	beq.n	800d414 <tcp_input+0x5a8>
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d408:	69fa      	ldr	r2, [r7, #28]
 800d40a:	6912      	ldr	r2, [r2, #16]
 800d40c:	f06f 010d 	mvn.w	r1, #13
 800d410:	4610      	mov	r0, r2
 800d412:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d414:	69f9      	ldr	r1, [r7, #28]
 800d416:	488d      	ldr	r0, [pc, #564]	; (800d64c <tcp_input+0x7e0>)
 800d418:	f7ff fbb0 	bl	800cb7c <tcp_pcb_remove>
        tcp_free(pcb);
 800d41c:	69f8      	ldr	r0, [r7, #28]
 800d41e:	f7fe f99d 	bl	800b75c <tcp_free>
 800d422:	e0c1      	b.n	800d5a8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d428:	4b89      	ldr	r3, [pc, #548]	; (800d650 <tcp_input+0x7e4>)
 800d42a:	881b      	ldrh	r3, [r3, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d01d      	beq.n	800d46c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d430:	4b87      	ldr	r3, [pc, #540]	; (800d650 <tcp_input+0x7e4>)
 800d432:	881b      	ldrh	r3, [r3, #0]
 800d434:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00a      	beq.n	800d456 <tcp_input+0x5ea>
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d446:	69fa      	ldr	r2, [r7, #28]
 800d448:	6910      	ldr	r0, [r2, #16]
 800d44a:	89fa      	ldrh	r2, [r7, #14]
 800d44c:	69f9      	ldr	r1, [r7, #28]
 800d44e:	4798      	blx	r3
 800d450:	4603      	mov	r3, r0
 800d452:	74fb      	strb	r3, [r7, #19]
 800d454:	e001      	b.n	800d45a <tcp_input+0x5ee>
 800d456:	2300      	movs	r3, #0
 800d458:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d45a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d45e:	f113 0f0d 	cmn.w	r3, #13
 800d462:	f000 8098 	beq.w	800d596 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d466:	4b7a      	ldr	r3, [pc, #488]	; (800d650 <tcp_input+0x7e4>)
 800d468:	2200      	movs	r2, #0
 800d46a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d46c:	69f8      	ldr	r0, [r7, #28]
 800d46e:	f000 f907 	bl	800d680 <tcp_input_delayed_close>
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	f040 8090 	bne.w	800d59a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d47a:	4b76      	ldr	r3, [pc, #472]	; (800d654 <tcp_input+0x7e8>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d041      	beq.n	800d506 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d482:	69fb      	ldr	r3, [r7, #28]
 800d484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d486:	2b00      	cmp	r3, #0
 800d488:	d006      	beq.n	800d498 <tcp_input+0x62c>
 800d48a:	4b73      	ldr	r3, [pc, #460]	; (800d658 <tcp_input+0x7ec>)
 800d48c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d490:	4972      	ldr	r1, [pc, #456]	; (800d65c <tcp_input+0x7f0>)
 800d492:	4873      	ldr	r0, [pc, #460]	; (800d660 <tcp_input+0x7f4>)
 800d494:	f006 fb20 	bl	8013ad8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d498:	69fb      	ldr	r3, [r7, #28]
 800d49a:	8b5b      	ldrh	r3, [r3, #26]
 800d49c:	f003 0310 	and.w	r3, r3, #16
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d008      	beq.n	800d4b6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d4a4:	4b6b      	ldr	r3, [pc, #428]	; (800d654 <tcp_input+0x7e8>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7fd fea7 	bl	800b1fc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d4ae:	69f8      	ldr	r0, [r7, #28]
 800d4b0:	f7fe fc3c 	bl	800bd2c <tcp_abort>
            goto aborted;
 800d4b4:	e078      	b.n	800d5a8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00c      	beq.n	800d4da <tcp_input+0x66e>
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d4c6:	69fb      	ldr	r3, [r7, #28]
 800d4c8:	6918      	ldr	r0, [r3, #16]
 800d4ca:	4b62      	ldr	r3, [pc, #392]	; (800d654 <tcp_input+0x7e8>)
 800d4cc:	681a      	ldr	r2, [r3, #0]
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	69f9      	ldr	r1, [r7, #28]
 800d4d2:	47a0      	blx	r4
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	74fb      	strb	r3, [r7, #19]
 800d4d8:	e008      	b.n	800d4ec <tcp_input+0x680>
 800d4da:	4b5e      	ldr	r3, [pc, #376]	; (800d654 <tcp_input+0x7e8>)
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	2300      	movs	r3, #0
 800d4e0:	69f9      	ldr	r1, [r7, #28]
 800d4e2:	2000      	movs	r0, #0
 800d4e4:	f7ff f952 	bl	800c78c <tcp_recv_null>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d4ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4f0:	f113 0f0d 	cmn.w	r3, #13
 800d4f4:	d053      	beq.n	800d59e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d4f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d003      	beq.n	800d506 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d4fe:	4b55      	ldr	r3, [pc, #340]	; (800d654 <tcp_input+0x7e8>)
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d506:	4b50      	ldr	r3, [pc, #320]	; (800d648 <tcp_input+0x7dc>)
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	f003 0320 	and.w	r3, r3, #32
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d030      	beq.n	800d574 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d516:	2b00      	cmp	r3, #0
 800d518:	d009      	beq.n	800d52e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d51e:	7b5a      	ldrb	r2, [r3, #13]
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d524:	f042 0220 	orr.w	r2, r2, #32
 800d528:	b2d2      	uxtb	r2, r2
 800d52a:	735a      	strb	r2, [r3, #13]
 800d52c:	e022      	b.n	800d574 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d52e:	69fb      	ldr	r3, [r7, #28]
 800d530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d532:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d536:	d005      	beq.n	800d544 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d53c:	3301      	adds	r3, #1
 800d53e:	b29a      	uxth	r2, r3
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d544:	69fb      	ldr	r3, [r7, #28]
 800d546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d00b      	beq.n	800d566 <tcp_input+0x6fa>
 800d54e:	69fb      	ldr	r3, [r7, #28]
 800d550:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	6918      	ldr	r0, [r3, #16]
 800d558:	2300      	movs	r3, #0
 800d55a:	2200      	movs	r2, #0
 800d55c:	69f9      	ldr	r1, [r7, #28]
 800d55e:	47a0      	blx	r4
 800d560:	4603      	mov	r3, r0
 800d562:	74fb      	strb	r3, [r7, #19]
 800d564:	e001      	b.n	800d56a <tcp_input+0x6fe>
 800d566:	2300      	movs	r3, #0
 800d568:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d56a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d56e:	f113 0f0d 	cmn.w	r3, #13
 800d572:	d016      	beq.n	800d5a2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d574:	4b33      	ldr	r3, [pc, #204]	; (800d644 <tcp_input+0x7d8>)
 800d576:	2200      	movs	r2, #0
 800d578:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d57a:	69f8      	ldr	r0, [r7, #28]
 800d57c:	f000 f880 	bl	800d680 <tcp_input_delayed_close>
 800d580:	4603      	mov	r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	d10f      	bne.n	800d5a6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d586:	69f8      	ldr	r0, [r7, #28]
 800d588:	f002 fab8 	bl	800fafc <tcp_output>
 800d58c:	e00c      	b.n	800d5a8 <tcp_input+0x73c>
        goto aborted;
 800d58e:	bf00      	nop
 800d590:	e00a      	b.n	800d5a8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d592:	bf00      	nop
 800d594:	e008      	b.n	800d5a8 <tcp_input+0x73c>
              goto aborted;
 800d596:	bf00      	nop
 800d598:	e006      	b.n	800d5a8 <tcp_input+0x73c>
          goto aborted;
 800d59a:	bf00      	nop
 800d59c:	e004      	b.n	800d5a8 <tcp_input+0x73c>
            goto aborted;
 800d59e:	bf00      	nop
 800d5a0:	e002      	b.n	800d5a8 <tcp_input+0x73c>
              goto aborted;
 800d5a2:	bf00      	nop
 800d5a4:	e000      	b.n	800d5a8 <tcp_input+0x73c>
          goto aborted;
 800d5a6:	bf00      	nop
    tcp_input_pcb = NULL;
 800d5a8:	4b26      	ldr	r3, [pc, #152]	; (800d644 <tcp_input+0x7d8>)
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d5ae:	4b29      	ldr	r3, [pc, #164]	; (800d654 <tcp_input+0x7e8>)
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d5b4:	4b2b      	ldr	r3, [pc, #172]	; (800d664 <tcp_input+0x7f8>)
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d03f      	beq.n	800d63c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800d5bc:	4b29      	ldr	r3, [pc, #164]	; (800d664 <tcp_input+0x7f8>)
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7fd fe1b 	bl	800b1fc <pbuf_free>
      inseg.p = NULL;
 800d5c6:	4b27      	ldr	r3, [pc, #156]	; (800d664 <tcp_input+0x7f8>)
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d5cc:	e036      	b.n	800d63c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d5ce:	4b26      	ldr	r3, [pc, #152]	; (800d668 <tcp_input+0x7fc>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	899b      	ldrh	r3, [r3, #12]
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fc fb6c 	bl	8009cb4 <lwip_htons>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	f003 0304 	and.w	r3, r3, #4
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d118      	bne.n	800d61a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5e8:	4b20      	ldr	r3, [pc, #128]	; (800d66c <tcp_input+0x800>)
 800d5ea:	6819      	ldr	r1, [r3, #0]
 800d5ec:	4b20      	ldr	r3, [pc, #128]	; (800d670 <tcp_input+0x804>)
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	4b20      	ldr	r3, [pc, #128]	; (800d674 <tcp_input+0x808>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d5f8:	4b1b      	ldr	r3, [pc, #108]	; (800d668 <tcp_input+0x7fc>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d5fc:	885b      	ldrh	r3, [r3, #2]
 800d5fe:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d600:	4a19      	ldr	r2, [pc, #100]	; (800d668 <tcp_input+0x7fc>)
 800d602:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d604:	8812      	ldrh	r2, [r2, #0]
 800d606:	b292      	uxth	r2, r2
 800d608:	9202      	str	r2, [sp, #8]
 800d60a:	9301      	str	r3, [sp, #4]
 800d60c:	4b1a      	ldr	r3, [pc, #104]	; (800d678 <tcp_input+0x80c>)
 800d60e:	9300      	str	r3, [sp, #0]
 800d610:	4b1a      	ldr	r3, [pc, #104]	; (800d67c <tcp_input+0x810>)
 800d612:	4602      	mov	r2, r0
 800d614:	2000      	movs	r0, #0
 800d616:	f003 f825 	bl	8010664 <tcp_rst>
    pbuf_free(p);
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f7fd fdee 	bl	800b1fc <pbuf_free>
  return;
 800d620:	e00c      	b.n	800d63c <tcp_input+0x7d0>
    goto dropped;
 800d622:	bf00      	nop
 800d624:	e006      	b.n	800d634 <tcp_input+0x7c8>
    goto dropped;
 800d626:	bf00      	nop
 800d628:	e004      	b.n	800d634 <tcp_input+0x7c8>
    goto dropped;
 800d62a:	bf00      	nop
 800d62c:	e002      	b.n	800d634 <tcp_input+0x7c8>
      goto dropped;
 800d62e:	bf00      	nop
 800d630:	e000      	b.n	800d634 <tcp_input+0x7c8>
      goto dropped;
 800d632:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f7fd fde1 	bl	800b1fc <pbuf_free>
 800d63a:	e000      	b.n	800d63e <tcp_input+0x7d2>
  return;
 800d63c:	bf00      	nop
}
 800d63e:	3724      	adds	r7, #36	; 0x24
 800d640:	46bd      	mov	sp, r7
 800d642:	bd90      	pop	{r4, r7, pc}
 800d644:	20008dd4 	.word	0x20008dd4
 800d648:	20000105 	.word	0x20000105
 800d64c:	20008dc0 	.word	0x20008dc0
 800d650:	20000100 	.word	0x20000100
 800d654:	20000108 	.word	0x20000108
 800d658:	0801604c 	.word	0x0801604c
 800d65c:	08016200 	.word	0x08016200
 800d660:	08016098 	.word	0x08016098
 800d664:	200000d8 	.word	0x200000d8
 800d668:	200000e8 	.word	0x200000e8
 800d66c:	200000fc 	.word	0x200000fc
 800d670:	20000102 	.word	0x20000102
 800d674:	200000f8 	.word	0x200000f8
 800d678:	20003ce4 	.word	0x20003ce4
 800d67c:	20003ce8 	.word	0x20003ce8

0800d680 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d106      	bne.n	800d69c <tcp_input_delayed_close+0x1c>
 800d68e:	4b17      	ldr	r3, [pc, #92]	; (800d6ec <tcp_input_delayed_close+0x6c>)
 800d690:	f240 225a 	movw	r2, #602	; 0x25a
 800d694:	4916      	ldr	r1, [pc, #88]	; (800d6f0 <tcp_input_delayed_close+0x70>)
 800d696:	4817      	ldr	r0, [pc, #92]	; (800d6f4 <tcp_input_delayed_close+0x74>)
 800d698:	f006 fa1e 	bl	8013ad8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d69c:	4b16      	ldr	r3, [pc, #88]	; (800d6f8 <tcp_input_delayed_close+0x78>)
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	f003 0310 	and.w	r3, r3, #16
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d01c      	beq.n	800d6e2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	8b5b      	ldrh	r3, [r3, #26]
 800d6ac:	f003 0310 	and.w	r3, r3, #16
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d10d      	bne.n	800d6d0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d008      	beq.n	800d6d0 <tcp_input_delayed_close+0x50>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	6912      	ldr	r2, [r2, #16]
 800d6c8:	f06f 010e 	mvn.w	r1, #14
 800d6cc:	4610      	mov	r0, r2
 800d6ce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d6d0:	6879      	ldr	r1, [r7, #4]
 800d6d2:	480a      	ldr	r0, [pc, #40]	; (800d6fc <tcp_input_delayed_close+0x7c>)
 800d6d4:	f7ff fa52 	bl	800cb7c <tcp_pcb_remove>
    tcp_free(pcb);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7fe f83f 	bl	800b75c <tcp_free>
    return 1;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	e000      	b.n	800d6e4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d6e2:	2300      	movs	r3, #0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	0801604c 	.word	0x0801604c
 800d6f0:	0801621c 	.word	0x0801621c
 800d6f4:	08016098 	.word	0x08016098
 800d6f8:	20000105 	.word	0x20000105
 800d6fc:	20008dc0 	.word	0x20008dc0

0800d700 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d700:	b590      	push	{r4, r7, lr}
 800d702:	b08b      	sub	sp, #44	; 0x2c
 800d704:	af04      	add	r7, sp, #16
 800d706:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d708:	4b6f      	ldr	r3, [pc, #444]	; (800d8c8 <tcp_listen_input+0x1c8>)
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	f003 0304 	and.w	r3, r3, #4
 800d710:	2b00      	cmp	r3, #0
 800d712:	f040 80d2 	bne.w	800d8ba <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d106      	bne.n	800d72a <tcp_listen_input+0x2a>
 800d71c:	4b6b      	ldr	r3, [pc, #428]	; (800d8cc <tcp_listen_input+0x1cc>)
 800d71e:	f240 2281 	movw	r2, #641	; 0x281
 800d722:	496b      	ldr	r1, [pc, #428]	; (800d8d0 <tcp_listen_input+0x1d0>)
 800d724:	486b      	ldr	r0, [pc, #428]	; (800d8d4 <tcp_listen_input+0x1d4>)
 800d726:	f006 f9d7 	bl	8013ad8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d72a:	4b67      	ldr	r3, [pc, #412]	; (800d8c8 <tcp_listen_input+0x1c8>)
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	f003 0310 	and.w	r3, r3, #16
 800d732:	2b00      	cmp	r3, #0
 800d734:	d019      	beq.n	800d76a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d736:	4b68      	ldr	r3, [pc, #416]	; (800d8d8 <tcp_listen_input+0x1d8>)
 800d738:	6819      	ldr	r1, [r3, #0]
 800d73a:	4b68      	ldr	r3, [pc, #416]	; (800d8dc <tcp_listen_input+0x1dc>)
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	461a      	mov	r2, r3
 800d740:	4b67      	ldr	r3, [pc, #412]	; (800d8e0 <tcp_listen_input+0x1e0>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d746:	4b67      	ldr	r3, [pc, #412]	; (800d8e4 <tcp_listen_input+0x1e4>)
 800d748:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d74a:	885b      	ldrh	r3, [r3, #2]
 800d74c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d74e:	4a65      	ldr	r2, [pc, #404]	; (800d8e4 <tcp_listen_input+0x1e4>)
 800d750:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d752:	8812      	ldrh	r2, [r2, #0]
 800d754:	b292      	uxth	r2, r2
 800d756:	9202      	str	r2, [sp, #8]
 800d758:	9301      	str	r3, [sp, #4]
 800d75a:	4b63      	ldr	r3, [pc, #396]	; (800d8e8 <tcp_listen_input+0x1e8>)
 800d75c:	9300      	str	r3, [sp, #0]
 800d75e:	4b63      	ldr	r3, [pc, #396]	; (800d8ec <tcp_listen_input+0x1ec>)
 800d760:	4602      	mov	r2, r0
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f002 ff7e 	bl	8010664 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d768:	e0a9      	b.n	800d8be <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d76a:	4b57      	ldr	r3, [pc, #348]	; (800d8c8 <tcp_listen_input+0x1c8>)
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	f003 0302 	and.w	r3, r3, #2
 800d772:	2b00      	cmp	r3, #0
 800d774:	f000 80a3 	beq.w	800d8be <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	7d5b      	ldrb	r3, [r3, #21]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7ff f929 	bl	800c9d4 <tcp_alloc>
 800d782:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d111      	bne.n	800d7ae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	699b      	ldr	r3, [r3, #24]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d00a      	beq.n	800d7a8 <tcp_listen_input+0xa8>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	699b      	ldr	r3, [r3, #24]
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	6910      	ldr	r0, [r2, #16]
 800d79a:	f04f 32ff 	mov.w	r2, #4294967295
 800d79e:	2100      	movs	r1, #0
 800d7a0:	4798      	blx	r3
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	73bb      	strb	r3, [r7, #14]
      return;
 800d7a6:	e08b      	b.n	800d8c0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d7a8:	23f0      	movs	r3, #240	; 0xf0
 800d7aa:	73bb      	strb	r3, [r7, #14]
      return;
 800d7ac:	e088      	b.n	800d8c0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d7ae:	4b50      	ldr	r3, [pc, #320]	; (800d8f0 <tcp_listen_input+0x1f0>)
 800d7b0:	695a      	ldr	r2, [r3, #20]
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d7b6:	4b4e      	ldr	r3, [pc, #312]	; (800d8f0 <tcp_listen_input+0x1f0>)
 800d7b8:	691a      	ldr	r2, [r3, #16]
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	8ada      	ldrh	r2, [r3, #22]
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d7c6:	4b47      	ldr	r3, [pc, #284]	; (800d8e4 <tcp_listen_input+0x1e4>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	881b      	ldrh	r3, [r3, #0]
 800d7cc:	b29a      	uxth	r2, r3
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	2203      	movs	r2, #3
 800d7d6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d7d8:	4b41      	ldr	r3, [pc, #260]	; (800d8e0 <tcp_listen_input+0x1e0>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	1c5a      	adds	r2, r3, #1
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d7ea:	6978      	ldr	r0, [r7, #20]
 800d7ec:	f7ff fa5a 	bl	800cca4 <tcp_next_iss>
 800d7f0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	693a      	ldr	r2, [r7, #16]
 800d7f6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	693a      	ldr	r2, [r7, #16]
 800d7fc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	693a      	ldr	r2, [r7, #16]
 800d802:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	693a      	ldr	r2, [r7, #16]
 800d808:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d80a:	4b35      	ldr	r3, [pc, #212]	; (800d8e0 <tcp_listen_input+0x1e0>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	1e5a      	subs	r2, r3, #1
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	691a      	ldr	r2, [r3, #16]
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	7a5b      	ldrb	r3, [r3, #9]
 800d826:	f003 030c 	and.w	r3, r3, #12
 800d82a:	b2da      	uxtb	r2, r3
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	7a1a      	ldrb	r2, [r3, #8]
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d838:	4b2e      	ldr	r3, [pc, #184]	; (800d8f4 <tcp_listen_input+0x1f4>)
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	60da      	str	r2, [r3, #12]
 800d840:	4a2c      	ldr	r2, [pc, #176]	; (800d8f4 <tcp_listen_input+0x1f4>)
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	6013      	str	r3, [r2, #0]
 800d846:	f003 f8cf 	bl	80109e8 <tcp_timer_needed>
 800d84a:	4b2b      	ldr	r3, [pc, #172]	; (800d8f8 <tcp_listen_input+0x1f8>)
 800d84c:	2201      	movs	r2, #1
 800d84e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d850:	6978      	ldr	r0, [r7, #20]
 800d852:	f001 fd8d 	bl	800f370 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d856:	4b23      	ldr	r3, [pc, #140]	; (800d8e4 <tcp_listen_input+0x1e4>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	89db      	ldrh	r3, [r3, #14]
 800d85c:	b29a      	uxth	r2, r3
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	3304      	adds	r3, #4
 800d878:	4618      	mov	r0, r3
 800d87a:	f004 feff 	bl	801267c <ip4_route>
 800d87e:	4601      	mov	r1, r0
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	3304      	adds	r3, #4
 800d884:	461a      	mov	r2, r3
 800d886:	4620      	mov	r0, r4
 800d888:	f7ff fa32 	bl	800ccf0 <tcp_eff_send_mss_netif>
 800d88c:	4603      	mov	r3, r0
 800d88e:	461a      	mov	r2, r3
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d894:	2112      	movs	r1, #18
 800d896:	6978      	ldr	r0, [r7, #20]
 800d898:	f002 f842 	bl	800f920 <tcp_enqueue_flags>
 800d89c:	4603      	mov	r3, r0
 800d89e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d8a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d004      	beq.n	800d8b2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	6978      	ldr	r0, [r7, #20]
 800d8ac:	f7fe f980 	bl	800bbb0 <tcp_abandon>
      return;
 800d8b0:	e006      	b.n	800d8c0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d8b2:	6978      	ldr	r0, [r7, #20]
 800d8b4:	f002 f922 	bl	800fafc <tcp_output>
  return;
 800d8b8:	e001      	b.n	800d8be <tcp_listen_input+0x1be>
    return;
 800d8ba:	bf00      	nop
 800d8bc:	e000      	b.n	800d8c0 <tcp_listen_input+0x1c0>
  return;
 800d8be:	bf00      	nop
}
 800d8c0:	371c      	adds	r7, #28
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd90      	pop	{r4, r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	20000104 	.word	0x20000104
 800d8cc:	0801604c 	.word	0x0801604c
 800d8d0:	08016244 	.word	0x08016244
 800d8d4:	08016098 	.word	0x08016098
 800d8d8:	200000fc 	.word	0x200000fc
 800d8dc:	20000102 	.word	0x20000102
 800d8e0:	200000f8 	.word	0x200000f8
 800d8e4:	200000e8 	.word	0x200000e8
 800d8e8:	20003ce4 	.word	0x20003ce4
 800d8ec:	20003ce8 	.word	0x20003ce8
 800d8f0:	20003cd4 	.word	0x20003cd4
 800d8f4:	20008dc0 	.word	0x20008dc0
 800d8f8:	20008dbc 	.word	0x20008dbc

0800d8fc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b086      	sub	sp, #24
 800d900:	af04      	add	r7, sp, #16
 800d902:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d904:	4b2f      	ldr	r3, [pc, #188]	; (800d9c4 <tcp_timewait_input+0xc8>)
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	f003 0304 	and.w	r3, r3, #4
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d153      	bne.n	800d9b8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d106      	bne.n	800d924 <tcp_timewait_input+0x28>
 800d916:	4b2c      	ldr	r3, [pc, #176]	; (800d9c8 <tcp_timewait_input+0xcc>)
 800d918:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d91c:	492b      	ldr	r1, [pc, #172]	; (800d9cc <tcp_timewait_input+0xd0>)
 800d91e:	482c      	ldr	r0, [pc, #176]	; (800d9d0 <tcp_timewait_input+0xd4>)
 800d920:	f006 f8da 	bl	8013ad8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d924:	4b27      	ldr	r3, [pc, #156]	; (800d9c4 <tcp_timewait_input+0xc8>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	f003 0302 	and.w	r3, r3, #2
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d02a      	beq.n	800d986 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d930:	4b28      	ldr	r3, [pc, #160]	; (800d9d4 <tcp_timewait_input+0xd8>)
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	db2d      	blt.n	800d99a <tcp_timewait_input+0x9e>
 800d93e:	4b25      	ldr	r3, [pc, #148]	; (800d9d4 <tcp_timewait_input+0xd8>)
 800d940:	681a      	ldr	r2, [r3, #0]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d946:	6879      	ldr	r1, [r7, #4]
 800d948:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d94a:	440b      	add	r3, r1
 800d94c:	1ad3      	subs	r3, r2, r3
 800d94e:	2b00      	cmp	r3, #0
 800d950:	dc23      	bgt.n	800d99a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d952:	4b21      	ldr	r3, [pc, #132]	; (800d9d8 <tcp_timewait_input+0xdc>)
 800d954:	6819      	ldr	r1, [r3, #0]
 800d956:	4b21      	ldr	r3, [pc, #132]	; (800d9dc <tcp_timewait_input+0xe0>)
 800d958:	881b      	ldrh	r3, [r3, #0]
 800d95a:	461a      	mov	r2, r3
 800d95c:	4b1d      	ldr	r3, [pc, #116]	; (800d9d4 <tcp_timewait_input+0xd8>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d962:	4b1f      	ldr	r3, [pc, #124]	; (800d9e0 <tcp_timewait_input+0xe4>)
 800d964:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d966:	885b      	ldrh	r3, [r3, #2]
 800d968:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d96a:	4a1d      	ldr	r2, [pc, #116]	; (800d9e0 <tcp_timewait_input+0xe4>)
 800d96c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d96e:	8812      	ldrh	r2, [r2, #0]
 800d970:	b292      	uxth	r2, r2
 800d972:	9202      	str	r2, [sp, #8]
 800d974:	9301      	str	r3, [sp, #4]
 800d976:	4b1b      	ldr	r3, [pc, #108]	; (800d9e4 <tcp_timewait_input+0xe8>)
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	4b1b      	ldr	r3, [pc, #108]	; (800d9e8 <tcp_timewait_input+0xec>)
 800d97c:	4602      	mov	r2, r0
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f002 fe70 	bl	8010664 <tcp_rst>
      return;
 800d984:	e01b      	b.n	800d9be <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d986:	4b0f      	ldr	r3, [pc, #60]	; (800d9c4 <tcp_timewait_input+0xc8>)
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	f003 0301 	and.w	r3, r3, #1
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d003      	beq.n	800d99a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d992:	4b16      	ldr	r3, [pc, #88]	; (800d9ec <tcp_timewait_input+0xf0>)
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d99a:	4b10      	ldr	r3, [pc, #64]	; (800d9dc <tcp_timewait_input+0xe0>)
 800d99c:	881b      	ldrh	r3, [r3, #0]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00c      	beq.n	800d9bc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	8b5b      	ldrh	r3, [r3, #26]
 800d9a6:	f043 0302 	orr.w	r3, r3, #2
 800d9aa:	b29a      	uxth	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f002 f8a3 	bl	800fafc <tcp_output>
  }
  return;
 800d9b6:	e001      	b.n	800d9bc <tcp_timewait_input+0xc0>
    return;
 800d9b8:	bf00      	nop
 800d9ba:	e000      	b.n	800d9be <tcp_timewait_input+0xc2>
  return;
 800d9bc:	bf00      	nop
}
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	20000104 	.word	0x20000104
 800d9c8:	0801604c 	.word	0x0801604c
 800d9cc:	08016264 	.word	0x08016264
 800d9d0:	08016098 	.word	0x08016098
 800d9d4:	200000f8 	.word	0x200000f8
 800d9d8:	200000fc 	.word	0x200000fc
 800d9dc:	20000102 	.word	0x20000102
 800d9e0:	200000e8 	.word	0x200000e8
 800d9e4:	20003ce4 	.word	0x20003ce4
 800d9e8:	20003ce8 	.word	0x20003ce8
 800d9ec:	20008dc4 	.word	0x20008dc4

0800d9f0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d9f0:	b590      	push	{r4, r7, lr}
 800d9f2:	b08d      	sub	sp, #52	; 0x34
 800d9f4:	af04      	add	r7, sp, #16
 800d9f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d106      	bne.n	800da14 <tcp_process+0x24>
 800da06:	4ba5      	ldr	r3, [pc, #660]	; (800dc9c <tcp_process+0x2ac>)
 800da08:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800da0c:	49a4      	ldr	r1, [pc, #656]	; (800dca0 <tcp_process+0x2b0>)
 800da0e:	48a5      	ldr	r0, [pc, #660]	; (800dca4 <tcp_process+0x2b4>)
 800da10:	f006 f862 	bl	8013ad8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800da14:	4ba4      	ldr	r3, [pc, #656]	; (800dca8 <tcp_process+0x2b8>)
 800da16:	781b      	ldrb	r3, [r3, #0]
 800da18:	f003 0304 	and.w	r3, r3, #4
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d04e      	beq.n	800dabe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	7d1b      	ldrb	r3, [r3, #20]
 800da24:	2b02      	cmp	r3, #2
 800da26:	d108      	bne.n	800da3a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da2c:	4b9f      	ldr	r3, [pc, #636]	; (800dcac <tcp_process+0x2bc>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	429a      	cmp	r2, r3
 800da32:	d123      	bne.n	800da7c <tcp_process+0x8c>
        acceptable = 1;
 800da34:	2301      	movs	r3, #1
 800da36:	76fb      	strb	r3, [r7, #27]
 800da38:	e020      	b.n	800da7c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da3e:	4b9c      	ldr	r3, [pc, #624]	; (800dcb0 <tcp_process+0x2c0>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	429a      	cmp	r2, r3
 800da44:	d102      	bne.n	800da4c <tcp_process+0x5c>
        acceptable = 1;
 800da46:	2301      	movs	r3, #1
 800da48:	76fb      	strb	r3, [r7, #27]
 800da4a:	e017      	b.n	800da7c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800da4c:	4b98      	ldr	r3, [pc, #608]	; (800dcb0 <tcp_process+0x2c0>)
 800da4e:	681a      	ldr	r2, [r3, #0]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da54:	1ad3      	subs	r3, r2, r3
 800da56:	2b00      	cmp	r3, #0
 800da58:	db10      	blt.n	800da7c <tcp_process+0x8c>
 800da5a:	4b95      	ldr	r3, [pc, #596]	; (800dcb0 <tcp_process+0x2c0>)
 800da5c:	681a      	ldr	r2, [r3, #0]
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da62:	6879      	ldr	r1, [r7, #4]
 800da64:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800da66:	440b      	add	r3, r1
 800da68:	1ad3      	subs	r3, r2, r3
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	dc06      	bgt.n	800da7c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	8b5b      	ldrh	r3, [r3, #26]
 800da72:	f043 0302 	orr.w	r3, r3, #2
 800da76:	b29a      	uxth	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800da7c:	7efb      	ldrb	r3, [r7, #27]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d01b      	beq.n	800daba <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	7d1b      	ldrb	r3, [r3, #20]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d106      	bne.n	800da98 <tcp_process+0xa8>
 800da8a:	4b84      	ldr	r3, [pc, #528]	; (800dc9c <tcp_process+0x2ac>)
 800da8c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800da90:	4988      	ldr	r1, [pc, #544]	; (800dcb4 <tcp_process+0x2c4>)
 800da92:	4884      	ldr	r0, [pc, #528]	; (800dca4 <tcp_process+0x2b4>)
 800da94:	f006 f820 	bl	8013ad8 <iprintf>
      recv_flags |= TF_RESET;
 800da98:	4b87      	ldr	r3, [pc, #540]	; (800dcb8 <tcp_process+0x2c8>)
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	f043 0308 	orr.w	r3, r3, #8
 800daa0:	b2da      	uxtb	r2, r3
 800daa2:	4b85      	ldr	r3, [pc, #532]	; (800dcb8 <tcp_process+0x2c8>)
 800daa4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	8b5b      	ldrh	r3, [r3, #26]
 800daaa:	f023 0301 	bic.w	r3, r3, #1
 800daae:	b29a      	uxth	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800dab4:	f06f 030d 	mvn.w	r3, #13
 800dab8:	e37a      	b.n	800e1b0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	e378      	b.n	800e1b0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800dabe:	4b7a      	ldr	r3, [pc, #488]	; (800dca8 <tcp_process+0x2b8>)
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	f003 0302 	and.w	r3, r3, #2
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d010      	beq.n	800daec <tcp_process+0xfc>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	7d1b      	ldrb	r3, [r3, #20]
 800dace:	2b02      	cmp	r3, #2
 800dad0:	d00c      	beq.n	800daec <tcp_process+0xfc>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	7d1b      	ldrb	r3, [r3, #20]
 800dad6:	2b03      	cmp	r3, #3
 800dad8:	d008      	beq.n	800daec <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	8b5b      	ldrh	r3, [r3, #26]
 800dade:	f043 0302 	orr.w	r3, r3, #2
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800dae8:	2300      	movs	r3, #0
 800daea:	e361      	b.n	800e1b0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	8b5b      	ldrh	r3, [r3, #26]
 800daf0:	f003 0310 	and.w	r3, r3, #16
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d103      	bne.n	800db00 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800daf8:	4b70      	ldr	r3, [pc, #448]	; (800dcbc <tcp_process+0x2cc>)
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800db10:	6878      	ldr	r0, [r7, #4]
 800db12:	f001 fc2d 	bl	800f370 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	7d1b      	ldrb	r3, [r3, #20]
 800db1a:	3b02      	subs	r3, #2
 800db1c:	2b07      	cmp	r3, #7
 800db1e:	f200 8337 	bhi.w	800e190 <tcp_process+0x7a0>
 800db22:	a201      	add	r2, pc, #4	; (adr r2, 800db28 <tcp_process+0x138>)
 800db24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db28:	0800db49 	.word	0x0800db49
 800db2c:	0800dd79 	.word	0x0800dd79
 800db30:	0800def1 	.word	0x0800def1
 800db34:	0800df1b 	.word	0x0800df1b
 800db38:	0800e03f 	.word	0x0800e03f
 800db3c:	0800def1 	.word	0x0800def1
 800db40:	0800e0cb 	.word	0x0800e0cb
 800db44:	0800e15b 	.word	0x0800e15b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800db48:	4b57      	ldr	r3, [pc, #348]	; (800dca8 <tcp_process+0x2b8>)
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	f003 0310 	and.w	r3, r3, #16
 800db50:	2b00      	cmp	r3, #0
 800db52:	f000 80e4 	beq.w	800dd1e <tcp_process+0x32e>
 800db56:	4b54      	ldr	r3, [pc, #336]	; (800dca8 <tcp_process+0x2b8>)
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	f003 0302 	and.w	r3, r3, #2
 800db5e:	2b00      	cmp	r3, #0
 800db60:	f000 80dd 	beq.w	800dd1e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db68:	1c5a      	adds	r2, r3, #1
 800db6a:	4b50      	ldr	r3, [pc, #320]	; (800dcac <tcp_process+0x2bc>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	429a      	cmp	r2, r3
 800db70:	f040 80d5 	bne.w	800dd1e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800db74:	4b4e      	ldr	r3, [pc, #312]	; (800dcb0 <tcp_process+0x2c0>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	1c5a      	adds	r2, r3, #1
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800db86:	4b49      	ldr	r3, [pc, #292]	; (800dcac <tcp_process+0x2bc>)
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800db8e:	4b4c      	ldr	r3, [pc, #304]	; (800dcc0 <tcp_process+0x2d0>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	89db      	ldrh	r3, [r3, #14]
 800db94:	b29a      	uxth	r2, r3
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800dba8:	4b41      	ldr	r3, [pc, #260]	; (800dcb0 <tcp_process+0x2c0>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	1e5a      	subs	r2, r3, #1
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2204      	movs	r2, #4
 800dbb6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	3304      	adds	r3, #4
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f004 fd5b 	bl	801267c <ip4_route>
 800dbc6:	4601      	mov	r1, r0
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	3304      	adds	r3, #4
 800dbcc:	461a      	mov	r2, r3
 800dbce:	4620      	mov	r0, r4
 800dbd0:	f7ff f88e 	bl	800ccf0 <tcp_eff_send_mss_netif>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbe0:	009a      	lsls	r2, r3, #2
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbe6:	005b      	lsls	r3, r3, #1
 800dbe8:	f241 111c 	movw	r1, #4380	; 0x111c
 800dbec:	428b      	cmp	r3, r1
 800dbee:	bf38      	it	cc
 800dbf0:	460b      	movcc	r3, r1
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d204      	bcs.n	800dc00 <tcp_process+0x210>
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dbfa:	009b      	lsls	r3, r3, #2
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	e00d      	b.n	800dc1c <tcp_process+0x22c>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc04:	005b      	lsls	r3, r3, #1
 800dc06:	f241 121c 	movw	r2, #4380	; 0x111c
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d904      	bls.n	800dc18 <tcp_process+0x228>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dc12:	005b      	lsls	r3, r3, #1
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	e001      	b.n	800dc1c <tcp_process+0x22c>
 800dc18:	f241 131c 	movw	r3, #4380	; 0x111c
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d106      	bne.n	800dc3a <tcp_process+0x24a>
 800dc2c:	4b1b      	ldr	r3, [pc, #108]	; (800dc9c <tcp_process+0x2ac>)
 800dc2e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800dc32:	4924      	ldr	r1, [pc, #144]	; (800dcc4 <tcp_process+0x2d4>)
 800dc34:	481b      	ldr	r0, [pc, #108]	; (800dca4 <tcp_process+0x2b4>)
 800dc36:	f005 ff4f 	bl	8013ad8 <iprintf>
        --pcb->snd_queuelen;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dc40:	3b01      	subs	r3, #1
 800dc42:	b29a      	uxth	r2, r3
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc4e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800dc50:	69fb      	ldr	r3, [r7, #28]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d111      	bne.n	800dc7a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc5a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d106      	bne.n	800dc70 <tcp_process+0x280>
 800dc62:	4b0e      	ldr	r3, [pc, #56]	; (800dc9c <tcp_process+0x2ac>)
 800dc64:	f44f 725d 	mov.w	r2, #884	; 0x374
 800dc68:	4917      	ldr	r1, [pc, #92]	; (800dcc8 <tcp_process+0x2d8>)
 800dc6a:	480e      	ldr	r0, [pc, #56]	; (800dca4 <tcp_process+0x2b4>)
 800dc6c:	f005 ff34 	bl	8013ad8 <iprintf>
          pcb->unsent = rseg->next;
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	681a      	ldr	r2, [r3, #0]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	66da      	str	r2, [r3, #108]	; 0x6c
 800dc78:	e003      	b.n	800dc82 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800dc82:	69f8      	ldr	r0, [r7, #28]
 800dc84:	f7fe fd3d 	bl	800c702 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d11d      	bne.n	800dccc <tcp_process+0x2dc>
          pcb->rtime = -1;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc96:	861a      	strh	r2, [r3, #48]	; 0x30
 800dc98:	e01f      	b.n	800dcda <tcp_process+0x2ea>
 800dc9a:	bf00      	nop
 800dc9c:	0801604c 	.word	0x0801604c
 800dca0:	08016284 	.word	0x08016284
 800dca4:	08016098 	.word	0x08016098
 800dca8:	20000104 	.word	0x20000104
 800dcac:	200000fc 	.word	0x200000fc
 800dcb0:	200000f8 	.word	0x200000f8
 800dcb4:	080162a0 	.word	0x080162a0
 800dcb8:	20000105 	.word	0x20000105
 800dcbc:	20008dc4 	.word	0x20008dc4
 800dcc0:	200000e8 	.word	0x200000e8
 800dcc4:	080162c0 	.word	0x080162c0
 800dcc8:	080162d8 	.word	0x080162d8
        } else {
          pcb->rtime = 0;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d00a      	beq.n	800dcfa <tcp_process+0x30a>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	6910      	ldr	r0, [r2, #16]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	6879      	ldr	r1, [r7, #4]
 800dcf2:	4798      	blx	r3
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	76bb      	strb	r3, [r7, #26]
 800dcf8:	e001      	b.n	800dcfe <tcp_process+0x30e>
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800dcfe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dd02:	f113 0f0d 	cmn.w	r3, #13
 800dd06:	d102      	bne.n	800dd0e <tcp_process+0x31e>
          return ERR_ABRT;
 800dd08:	f06f 030c 	mvn.w	r3, #12
 800dd0c:	e250      	b.n	800e1b0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	8b5b      	ldrh	r3, [r3, #26]
 800dd12:	f043 0302 	orr.w	r3, r3, #2
 800dd16:	b29a      	uxth	r2, r3
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800dd1c:	e23a      	b.n	800e194 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800dd1e:	4b9d      	ldr	r3, [pc, #628]	; (800df94 <tcp_process+0x5a4>)
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	f003 0310 	and.w	r3, r3, #16
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f000 8234 	beq.w	800e194 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd2c:	4b9a      	ldr	r3, [pc, #616]	; (800df98 <tcp_process+0x5a8>)
 800dd2e:	6819      	ldr	r1, [r3, #0]
 800dd30:	4b9a      	ldr	r3, [pc, #616]	; (800df9c <tcp_process+0x5ac>)
 800dd32:	881b      	ldrh	r3, [r3, #0]
 800dd34:	461a      	mov	r2, r3
 800dd36:	4b9a      	ldr	r3, [pc, #616]	; (800dfa0 <tcp_process+0x5b0>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd3c:	4b99      	ldr	r3, [pc, #612]	; (800dfa4 <tcp_process+0x5b4>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd40:	885b      	ldrh	r3, [r3, #2]
 800dd42:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd44:	4a97      	ldr	r2, [pc, #604]	; (800dfa4 <tcp_process+0x5b4>)
 800dd46:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd48:	8812      	ldrh	r2, [r2, #0]
 800dd4a:	b292      	uxth	r2, r2
 800dd4c:	9202      	str	r2, [sp, #8]
 800dd4e:	9301      	str	r3, [sp, #4]
 800dd50:	4b95      	ldr	r3, [pc, #596]	; (800dfa8 <tcp_process+0x5b8>)
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	4b95      	ldr	r3, [pc, #596]	; (800dfac <tcp_process+0x5bc>)
 800dd56:	4602      	mov	r2, r0
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f002 fc83 	bl	8010664 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dd64:	2b05      	cmp	r3, #5
 800dd66:	f200 8215 	bhi.w	800e194 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f002 fa4d 	bl	8010210 <tcp_rexmit_rto>
      break;
 800dd76:	e20d      	b.n	800e194 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800dd78:	4b86      	ldr	r3, [pc, #536]	; (800df94 <tcp_process+0x5a4>)
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	f003 0310 	and.w	r3, r3, #16
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f000 80a1 	beq.w	800dec8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800dd86:	4b84      	ldr	r3, [pc, #528]	; (800df98 <tcp_process+0x5a8>)
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd8e:	1ad3      	subs	r3, r2, r3
 800dd90:	3b01      	subs	r3, #1
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	db7e      	blt.n	800de94 <tcp_process+0x4a4>
 800dd96:	4b80      	ldr	r3, [pc, #512]	; (800df98 <tcp_process+0x5a8>)
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd9e:	1ad3      	subs	r3, r2, r3
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	dc77      	bgt.n	800de94 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2204      	movs	r2, #4
 800dda8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d102      	bne.n	800ddb8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ddb2:	23fa      	movs	r3, #250	; 0xfa
 800ddb4:	76bb      	strb	r3, [r7, #26]
 800ddb6:	e01d      	b.n	800ddf4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddbc:	699b      	ldr	r3, [r3, #24]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d106      	bne.n	800ddd0 <tcp_process+0x3e0>
 800ddc2:	4b7b      	ldr	r3, [pc, #492]	; (800dfb0 <tcp_process+0x5c0>)
 800ddc4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ddc8:	497a      	ldr	r1, [pc, #488]	; (800dfb4 <tcp_process+0x5c4>)
 800ddca:	487b      	ldr	r0, [pc, #492]	; (800dfb8 <tcp_process+0x5c8>)
 800ddcc:	f005 fe84 	bl	8013ad8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddd4:	699b      	ldr	r3, [r3, #24]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00a      	beq.n	800ddf0 <tcp_process+0x400>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddde:	699b      	ldr	r3, [r3, #24]
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	6910      	ldr	r0, [r2, #16]
 800dde4:	2200      	movs	r2, #0
 800dde6:	6879      	ldr	r1, [r7, #4]
 800dde8:	4798      	blx	r3
 800ddea:	4603      	mov	r3, r0
 800ddec:	76bb      	strb	r3, [r7, #26]
 800ddee:	e001      	b.n	800ddf4 <tcp_process+0x404>
 800ddf0:	23f0      	movs	r3, #240	; 0xf0
 800ddf2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ddf4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00a      	beq.n	800de12 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ddfc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800de00:	f113 0f0d 	cmn.w	r3, #13
 800de04:	d002      	beq.n	800de0c <tcp_process+0x41c>
              tcp_abort(pcb);
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f7fd ff90 	bl	800bd2c <tcp_abort>
            }
            return ERR_ABRT;
 800de0c:	f06f 030c 	mvn.w	r3, #12
 800de10:	e1ce      	b.n	800e1b0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f000 fae0 	bl	800e3d8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800de18:	4b68      	ldr	r3, [pc, #416]	; (800dfbc <tcp_process+0x5cc>)
 800de1a:	881b      	ldrh	r3, [r3, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d005      	beq.n	800de2c <tcp_process+0x43c>
            recv_acked--;
 800de20:	4b66      	ldr	r3, [pc, #408]	; (800dfbc <tcp_process+0x5cc>)
 800de22:	881b      	ldrh	r3, [r3, #0]
 800de24:	3b01      	subs	r3, #1
 800de26:	b29a      	uxth	r2, r3
 800de28:	4b64      	ldr	r3, [pc, #400]	; (800dfbc <tcp_process+0x5cc>)
 800de2a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de30:	009a      	lsls	r2, r3, #2
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de36:	005b      	lsls	r3, r3, #1
 800de38:	f241 111c 	movw	r1, #4380	; 0x111c
 800de3c:	428b      	cmp	r3, r1
 800de3e:	bf38      	it	cc
 800de40:	460b      	movcc	r3, r1
 800de42:	429a      	cmp	r2, r3
 800de44:	d204      	bcs.n	800de50 <tcp_process+0x460>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	b29b      	uxth	r3, r3
 800de4e:	e00d      	b.n	800de6c <tcp_process+0x47c>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de54:	005b      	lsls	r3, r3, #1
 800de56:	f241 121c 	movw	r2, #4380	; 0x111c
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d904      	bls.n	800de68 <tcp_process+0x478>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800de62:	005b      	lsls	r3, r3, #1
 800de64:	b29b      	uxth	r3, r3
 800de66:	e001      	b.n	800de6c <tcp_process+0x47c>
 800de68:	f241 131c 	movw	r3, #4380	; 0x111c
 800de6c:	687a      	ldr	r2, [r7, #4]
 800de6e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800de72:	4b53      	ldr	r3, [pc, #332]	; (800dfc0 <tcp_process+0x5d0>)
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	f003 0320 	and.w	r3, r3, #32
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d037      	beq.n	800deee <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	8b5b      	ldrh	r3, [r3, #26]
 800de82:	f043 0302 	orr.w	r3, r3, #2
 800de86:	b29a      	uxth	r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2207      	movs	r2, #7
 800de90:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800de92:	e02c      	b.n	800deee <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de94:	4b40      	ldr	r3, [pc, #256]	; (800df98 <tcp_process+0x5a8>)
 800de96:	6819      	ldr	r1, [r3, #0]
 800de98:	4b40      	ldr	r3, [pc, #256]	; (800df9c <tcp_process+0x5ac>)
 800de9a:	881b      	ldrh	r3, [r3, #0]
 800de9c:	461a      	mov	r2, r3
 800de9e:	4b40      	ldr	r3, [pc, #256]	; (800dfa0 <tcp_process+0x5b0>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dea4:	4b3f      	ldr	r3, [pc, #252]	; (800dfa4 <tcp_process+0x5b4>)
 800dea6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dea8:	885b      	ldrh	r3, [r3, #2]
 800deaa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800deac:	4a3d      	ldr	r2, [pc, #244]	; (800dfa4 <tcp_process+0x5b4>)
 800deae:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800deb0:	8812      	ldrh	r2, [r2, #0]
 800deb2:	b292      	uxth	r2, r2
 800deb4:	9202      	str	r2, [sp, #8]
 800deb6:	9301      	str	r3, [sp, #4]
 800deb8:	4b3b      	ldr	r3, [pc, #236]	; (800dfa8 <tcp_process+0x5b8>)
 800deba:	9300      	str	r3, [sp, #0]
 800debc:	4b3b      	ldr	r3, [pc, #236]	; (800dfac <tcp_process+0x5bc>)
 800debe:	4602      	mov	r2, r0
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f002 fbcf 	bl	8010664 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800dec6:	e167      	b.n	800e198 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800dec8:	4b32      	ldr	r3, [pc, #200]	; (800df94 <tcp_process+0x5a4>)
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	f003 0302 	and.w	r3, r3, #2
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	f000 8161 	beq.w	800e198 <tcp_process+0x7a8>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deda:	1e5a      	subs	r2, r3, #1
 800dedc:	4b30      	ldr	r3, [pc, #192]	; (800dfa0 <tcp_process+0x5b0>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	f040 8159 	bne.w	800e198 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f002 f9b4 	bl	8010254 <tcp_rexmit>
      break;
 800deec:	e154      	b.n	800e198 <tcp_process+0x7a8>
 800deee:	e153      	b.n	800e198 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f000 fa71 	bl	800e3d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800def6:	4b32      	ldr	r3, [pc, #200]	; (800dfc0 <tcp_process+0x5d0>)
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	f003 0320 	and.w	r3, r3, #32
 800defe:	2b00      	cmp	r3, #0
 800df00:	f000 814c 	beq.w	800e19c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	8b5b      	ldrh	r3, [r3, #26]
 800df08:	f043 0302 	orr.w	r3, r3, #2
 800df0c:	b29a      	uxth	r2, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2207      	movs	r2, #7
 800df16:	751a      	strb	r2, [r3, #20]
      }
      break;
 800df18:	e140      	b.n	800e19c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f000 fa5c 	bl	800e3d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800df20:	4b27      	ldr	r3, [pc, #156]	; (800dfc0 <tcp_process+0x5d0>)
 800df22:	781b      	ldrb	r3, [r3, #0]
 800df24:	f003 0320 	and.w	r3, r3, #32
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d071      	beq.n	800e010 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800df2c:	4b19      	ldr	r3, [pc, #100]	; (800df94 <tcp_process+0x5a4>)
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	f003 0310 	and.w	r3, r3, #16
 800df34:	2b00      	cmp	r3, #0
 800df36:	d060      	beq.n	800dffa <tcp_process+0x60a>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df3c:	4b16      	ldr	r3, [pc, #88]	; (800df98 <tcp_process+0x5a8>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	429a      	cmp	r2, r3
 800df42:	d15a      	bne.n	800dffa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d156      	bne.n	800dffa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	8b5b      	ldrh	r3, [r3, #26]
 800df50:	f043 0302 	orr.w	r3, r3, #2
 800df54:	b29a      	uxth	r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f7fe fdbe 	bl	800cadc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800df60:	4b18      	ldr	r3, [pc, #96]	; (800dfc4 <tcp_process+0x5d4>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	429a      	cmp	r2, r3
 800df68:	d105      	bne.n	800df76 <tcp_process+0x586>
 800df6a:	4b16      	ldr	r3, [pc, #88]	; (800dfc4 <tcp_process+0x5d4>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	4a14      	ldr	r2, [pc, #80]	; (800dfc4 <tcp_process+0x5d4>)
 800df72:	6013      	str	r3, [r2, #0]
 800df74:	e02e      	b.n	800dfd4 <tcp_process+0x5e4>
 800df76:	4b13      	ldr	r3, [pc, #76]	; (800dfc4 <tcp_process+0x5d4>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	617b      	str	r3, [r7, #20]
 800df7c:	e027      	b.n	800dfce <tcp_process+0x5de>
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	429a      	cmp	r2, r3
 800df86:	d11f      	bne.n	800dfc8 <tcp_process+0x5d8>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	68da      	ldr	r2, [r3, #12]
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	60da      	str	r2, [r3, #12]
 800df90:	e020      	b.n	800dfd4 <tcp_process+0x5e4>
 800df92:	bf00      	nop
 800df94:	20000104 	.word	0x20000104
 800df98:	200000fc 	.word	0x200000fc
 800df9c:	20000102 	.word	0x20000102
 800dfa0:	200000f8 	.word	0x200000f8
 800dfa4:	200000e8 	.word	0x200000e8
 800dfa8:	20003ce4 	.word	0x20003ce4
 800dfac:	20003ce8 	.word	0x20003ce8
 800dfb0:	0801604c 	.word	0x0801604c
 800dfb4:	080162ec 	.word	0x080162ec
 800dfb8:	08016098 	.word	0x08016098
 800dfbc:	20000100 	.word	0x20000100
 800dfc0:	20000105 	.word	0x20000105
 800dfc4:	20008dc0 	.word	0x20008dc0
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	68db      	ldr	r3, [r3, #12]
 800dfcc:	617b      	str	r3, [r7, #20]
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1d4      	bne.n	800df7e <tcp_process+0x58e>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	60da      	str	r2, [r3, #12]
 800dfda:	4b77      	ldr	r3, [pc, #476]	; (800e1b8 <tcp_process+0x7c8>)
 800dfdc:	2201      	movs	r2, #1
 800dfde:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	220a      	movs	r2, #10
 800dfe4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800dfe6:	4b75      	ldr	r3, [pc, #468]	; (800e1bc <tcp_process+0x7cc>)
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	60da      	str	r2, [r3, #12]
 800dfee:	4a73      	ldr	r2, [pc, #460]	; (800e1bc <tcp_process+0x7cc>)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6013      	str	r3, [r2, #0]
 800dff4:	f002 fcf8 	bl	80109e8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800dff8:	e0d2      	b.n	800e1a0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	8b5b      	ldrh	r3, [r3, #26]
 800dffe:	f043 0302 	orr.w	r3, r3, #2
 800e002:	b29a      	uxth	r2, r3
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2208      	movs	r2, #8
 800e00c:	751a      	strb	r2, [r3, #20]
      break;
 800e00e:	e0c7      	b.n	800e1a0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e010:	4b6b      	ldr	r3, [pc, #428]	; (800e1c0 <tcp_process+0x7d0>)
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	f003 0310 	and.w	r3, r3, #16
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f000 80c1 	beq.w	800e1a0 <tcp_process+0x7b0>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e022:	4b68      	ldr	r3, [pc, #416]	; (800e1c4 <tcp_process+0x7d4>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	429a      	cmp	r2, r3
 800e028:	f040 80ba 	bne.w	800e1a0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e030:	2b00      	cmp	r3, #0
 800e032:	f040 80b5 	bne.w	800e1a0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2206      	movs	r2, #6
 800e03a:	751a      	strb	r2, [r3, #20]
      break;
 800e03c:	e0b0      	b.n	800e1a0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f000 f9ca 	bl	800e3d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e044:	4b60      	ldr	r3, [pc, #384]	; (800e1c8 <tcp_process+0x7d8>)
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	f003 0320 	and.w	r3, r3, #32
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	f000 80a9 	beq.w	800e1a4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	8b5b      	ldrh	r3, [r3, #26]
 800e056:	f043 0302 	orr.w	r3, r3, #2
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7fe fd3b 	bl	800cadc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e066:	4b59      	ldr	r3, [pc, #356]	; (800e1cc <tcp_process+0x7dc>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d105      	bne.n	800e07c <tcp_process+0x68c>
 800e070:	4b56      	ldr	r3, [pc, #344]	; (800e1cc <tcp_process+0x7dc>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	4a55      	ldr	r2, [pc, #340]	; (800e1cc <tcp_process+0x7dc>)
 800e078:	6013      	str	r3, [r2, #0]
 800e07a:	e013      	b.n	800e0a4 <tcp_process+0x6b4>
 800e07c:	4b53      	ldr	r3, [pc, #332]	; (800e1cc <tcp_process+0x7dc>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	613b      	str	r3, [r7, #16]
 800e082:	e00c      	b.n	800e09e <tcp_process+0x6ae>
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	68db      	ldr	r3, [r3, #12]
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d104      	bne.n	800e098 <tcp_process+0x6a8>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	68da      	ldr	r2, [r3, #12]
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	60da      	str	r2, [r3, #12]
 800e096:	e005      	b.n	800e0a4 <tcp_process+0x6b4>
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	613b      	str	r3, [r7, #16]
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d1ef      	bne.n	800e084 <tcp_process+0x694>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	60da      	str	r2, [r3, #12]
 800e0aa:	4b43      	ldr	r3, [pc, #268]	; (800e1b8 <tcp_process+0x7c8>)
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	220a      	movs	r2, #10
 800e0b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e0b6:	4b41      	ldr	r3, [pc, #260]	; (800e1bc <tcp_process+0x7cc>)
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	60da      	str	r2, [r3, #12]
 800e0be:	4a3f      	ldr	r2, [pc, #252]	; (800e1bc <tcp_process+0x7cc>)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6013      	str	r3, [r2, #0]
 800e0c4:	f002 fc90 	bl	80109e8 <tcp_timer_needed>
      }
      break;
 800e0c8:	e06c      	b.n	800e1a4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 f984 	bl	800e3d8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e0d0:	4b3b      	ldr	r3, [pc, #236]	; (800e1c0 <tcp_process+0x7d0>)
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	f003 0310 	and.w	r3, r3, #16
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d065      	beq.n	800e1a8 <tcp_process+0x7b8>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0e0:	4b38      	ldr	r3, [pc, #224]	; (800e1c4 <tcp_process+0x7d4>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d15f      	bne.n	800e1a8 <tcp_process+0x7b8>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d15b      	bne.n	800e1a8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f7fe fcf3 	bl	800cadc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e0f6:	4b35      	ldr	r3, [pc, #212]	; (800e1cc <tcp_process+0x7dc>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d105      	bne.n	800e10c <tcp_process+0x71c>
 800e100:	4b32      	ldr	r3, [pc, #200]	; (800e1cc <tcp_process+0x7dc>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68db      	ldr	r3, [r3, #12]
 800e106:	4a31      	ldr	r2, [pc, #196]	; (800e1cc <tcp_process+0x7dc>)
 800e108:	6013      	str	r3, [r2, #0]
 800e10a:	e013      	b.n	800e134 <tcp_process+0x744>
 800e10c:	4b2f      	ldr	r3, [pc, #188]	; (800e1cc <tcp_process+0x7dc>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	60fb      	str	r3, [r7, #12]
 800e112:	e00c      	b.n	800e12e <tcp_process+0x73e>
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	687a      	ldr	r2, [r7, #4]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d104      	bne.n	800e128 <tcp_process+0x738>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	68da      	ldr	r2, [r3, #12]
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	60da      	str	r2, [r3, #12]
 800e126:	e005      	b.n	800e134 <tcp_process+0x744>
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	68db      	ldr	r3, [r3, #12]
 800e12c:	60fb      	str	r3, [r7, #12]
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d1ef      	bne.n	800e114 <tcp_process+0x724>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2200      	movs	r2, #0
 800e138:	60da      	str	r2, [r3, #12]
 800e13a:	4b1f      	ldr	r3, [pc, #124]	; (800e1b8 <tcp_process+0x7c8>)
 800e13c:	2201      	movs	r2, #1
 800e13e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	220a      	movs	r2, #10
 800e144:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e146:	4b1d      	ldr	r3, [pc, #116]	; (800e1bc <tcp_process+0x7cc>)
 800e148:	681a      	ldr	r2, [r3, #0]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	60da      	str	r2, [r3, #12]
 800e14e:	4a1b      	ldr	r2, [pc, #108]	; (800e1bc <tcp_process+0x7cc>)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6013      	str	r3, [r2, #0]
 800e154:	f002 fc48 	bl	80109e8 <tcp_timer_needed>
      }
      break;
 800e158:	e026      	b.n	800e1a8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 f93c 	bl	800e3d8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e160:	4b17      	ldr	r3, [pc, #92]	; (800e1c0 <tcp_process+0x7d0>)
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	f003 0310 	and.w	r3, r3, #16
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d01f      	beq.n	800e1ac <tcp_process+0x7bc>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e170:	4b14      	ldr	r3, [pc, #80]	; (800e1c4 <tcp_process+0x7d4>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	429a      	cmp	r2, r3
 800e176:	d119      	bne.n	800e1ac <tcp_process+0x7bc>
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d115      	bne.n	800e1ac <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e180:	4b11      	ldr	r3, [pc, #68]	; (800e1c8 <tcp_process+0x7d8>)
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	f043 0310 	orr.w	r3, r3, #16
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	4b0f      	ldr	r3, [pc, #60]	; (800e1c8 <tcp_process+0x7d8>)
 800e18c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e18e:	e00d      	b.n	800e1ac <tcp_process+0x7bc>
    default:
      break;
 800e190:	bf00      	nop
 800e192:	e00c      	b.n	800e1ae <tcp_process+0x7be>
      break;
 800e194:	bf00      	nop
 800e196:	e00a      	b.n	800e1ae <tcp_process+0x7be>
      break;
 800e198:	bf00      	nop
 800e19a:	e008      	b.n	800e1ae <tcp_process+0x7be>
      break;
 800e19c:	bf00      	nop
 800e19e:	e006      	b.n	800e1ae <tcp_process+0x7be>
      break;
 800e1a0:	bf00      	nop
 800e1a2:	e004      	b.n	800e1ae <tcp_process+0x7be>
      break;
 800e1a4:	bf00      	nop
 800e1a6:	e002      	b.n	800e1ae <tcp_process+0x7be>
      break;
 800e1a8:	bf00      	nop
 800e1aa:	e000      	b.n	800e1ae <tcp_process+0x7be>
      break;
 800e1ac:	bf00      	nop
  }
  return ERR_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3724      	adds	r7, #36	; 0x24
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd90      	pop	{r4, r7, pc}
 800e1b8:	20008dbc 	.word	0x20008dbc
 800e1bc:	20008dd0 	.word	0x20008dd0
 800e1c0:	20000104 	.word	0x20000104
 800e1c4:	200000fc 	.word	0x200000fc
 800e1c8:	20000105 	.word	0x20000105
 800e1cc:	20008dc0 	.word	0x20008dc0

0800e1d0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e1d0:	b590      	push	{r4, r7, lr}
 800e1d2:	b085      	sub	sp, #20
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d106      	bne.n	800e1ee <tcp_oos_insert_segment+0x1e>
 800e1e0:	4b3b      	ldr	r3, [pc, #236]	; (800e2d0 <tcp_oos_insert_segment+0x100>)
 800e1e2:	f240 421f 	movw	r2, #1055	; 0x41f
 800e1e6:	493b      	ldr	r1, [pc, #236]	; (800e2d4 <tcp_oos_insert_segment+0x104>)
 800e1e8:	483b      	ldr	r0, [pc, #236]	; (800e2d8 <tcp_oos_insert_segment+0x108>)
 800e1ea:	f005 fc75 	bl	8013ad8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	899b      	ldrh	r3, [r3, #12]
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f7fb fd5c 	bl	8009cb4 <lwip_htons>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	b2db      	uxtb	r3, r3
 800e200:	f003 0301 	and.w	r3, r3, #1
 800e204:	2b00      	cmp	r3, #0
 800e206:	d028      	beq.n	800e25a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e208:	6838      	ldr	r0, [r7, #0]
 800e20a:	f7fe fa65 	bl	800c6d8 <tcp_segs_free>
    next = NULL;
 800e20e:	2300      	movs	r3, #0
 800e210:	603b      	str	r3, [r7, #0]
 800e212:	e056      	b.n	800e2c2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	899b      	ldrh	r3, [r3, #12]
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7fb fd49 	bl	8009cb4 <lwip_htons>
 800e222:	4603      	mov	r3, r0
 800e224:	b2db      	uxtb	r3, r3
 800e226:	f003 0301 	and.w	r3, r3, #1
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00d      	beq.n	800e24a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	899b      	ldrh	r3, [r3, #12]
 800e234:	b29c      	uxth	r4, r3
 800e236:	2001      	movs	r0, #1
 800e238:	f7fb fd3c 	bl	8009cb4 <lwip_htons>
 800e23c:	4603      	mov	r3, r0
 800e23e:	461a      	mov	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	4322      	orrs	r2, r4
 800e246:	b292      	uxth	r2, r2
 800e248:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	f7fe fa54 	bl	800c702 <tcp_seg_free>
    while (next &&
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d00e      	beq.n	800e27e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	891b      	ldrh	r3, [r3, #8]
 800e264:	461a      	mov	r2, r3
 800e266:	4b1d      	ldr	r3, [pc, #116]	; (800e2dc <tcp_oos_insert_segment+0x10c>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	441a      	add	r2, r3
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	68db      	ldr	r3, [r3, #12]
 800e270:	685b      	ldr	r3, [r3, #4]
 800e272:	6839      	ldr	r1, [r7, #0]
 800e274:	8909      	ldrh	r1, [r1, #8]
 800e276:	440b      	add	r3, r1
 800e278:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	daca      	bge.n	800e214 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d01e      	beq.n	800e2c2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	891b      	ldrh	r3, [r3, #8]
 800e288:	461a      	mov	r2, r3
 800e28a:	4b14      	ldr	r3, [pc, #80]	; (800e2dc <tcp_oos_insert_segment+0x10c>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	441a      	add	r2, r3
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e298:	2b00      	cmp	r3, #0
 800e29a:	dd12      	ble.n	800e2c2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	685b      	ldr	r3, [r3, #4]
 800e2a2:	b29a      	uxth	r2, r3
 800e2a4:	4b0d      	ldr	r3, [pc, #52]	; (800e2dc <tcp_oos_insert_segment+0x10c>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	1ad3      	subs	r3, r2, r3
 800e2ac:	b29a      	uxth	r2, r3
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	685a      	ldr	r2, [r3, #4]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	891b      	ldrh	r3, [r3, #8]
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	4610      	mov	r0, r2
 800e2be:	f7fc fe17 	bl	800aef0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	683a      	ldr	r2, [r7, #0]
 800e2c6:	601a      	str	r2, [r3, #0]
}
 800e2c8:	bf00      	nop
 800e2ca:	3714      	adds	r7, #20
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd90      	pop	{r4, r7, pc}
 800e2d0:	0801604c 	.word	0x0801604c
 800e2d4:	0801630c 	.word	0x0801630c
 800e2d8:	08016098 	.word	0x08016098
 800e2dc:	200000f8 	.word	0x200000f8

0800e2e0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e2e0:	b5b0      	push	{r4, r5, r7, lr}
 800e2e2:	b086      	sub	sp, #24
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	607a      	str	r2, [r7, #4]
 800e2ec:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e2ee:	e03e      	b.n	800e36e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	4618      	mov	r0, r3
 800e300:	f7fd f804 	bl	800b30c <pbuf_clen>
 800e304:	4603      	mov	r3, r0
 800e306:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e30e:	8a7a      	ldrh	r2, [r7, #18]
 800e310:	429a      	cmp	r2, r3
 800e312:	d906      	bls.n	800e322 <tcp_free_acked_segments+0x42>
 800e314:	4b2a      	ldr	r3, [pc, #168]	; (800e3c0 <tcp_free_acked_segments+0xe0>)
 800e316:	f240 4257 	movw	r2, #1111	; 0x457
 800e31a:	492a      	ldr	r1, [pc, #168]	; (800e3c4 <tcp_free_acked_segments+0xe4>)
 800e31c:	482a      	ldr	r0, [pc, #168]	; (800e3c8 <tcp_free_acked_segments+0xe8>)
 800e31e:	f005 fbdb 	bl	8013ad8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e328:	8a7b      	ldrh	r3, [r7, #18]
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	891a      	ldrh	r2, [r3, #8]
 800e338:	4b24      	ldr	r3, [pc, #144]	; (800e3cc <tcp_free_acked_segments+0xec>)
 800e33a:	881b      	ldrh	r3, [r3, #0]
 800e33c:	4413      	add	r3, r2
 800e33e:	b29a      	uxth	r2, r3
 800e340:	4b22      	ldr	r3, [pc, #136]	; (800e3cc <tcp_free_acked_segments+0xec>)
 800e342:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e344:	6978      	ldr	r0, [r7, #20]
 800e346:	f7fe f9dc 	bl	800c702 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e350:	2b00      	cmp	r3, #0
 800e352:	d00c      	beq.n	800e36e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d109      	bne.n	800e36e <tcp_free_acked_segments+0x8e>
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d106      	bne.n	800e36e <tcp_free_acked_segments+0x8e>
 800e360:	4b17      	ldr	r3, [pc, #92]	; (800e3c0 <tcp_free_acked_segments+0xe0>)
 800e362:	f240 4261 	movw	r2, #1121	; 0x461
 800e366:	491a      	ldr	r1, [pc, #104]	; (800e3d0 <tcp_free_acked_segments+0xf0>)
 800e368:	4817      	ldr	r0, [pc, #92]	; (800e3c8 <tcp_free_acked_segments+0xe8>)
 800e36a:	f005 fbb5 	bl	8013ad8 <iprintf>
  while (seg_list != NULL &&
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d020      	beq.n	800e3b6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7fb fcaf 	bl	8009cde <lwip_htonl>
 800e380:	4604      	mov	r4, r0
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	891b      	ldrh	r3, [r3, #8]
 800e386:	461d      	mov	r5, r3
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	68db      	ldr	r3, [r3, #12]
 800e38c:	899b      	ldrh	r3, [r3, #12]
 800e38e:	b29b      	uxth	r3, r3
 800e390:	4618      	mov	r0, r3
 800e392:	f7fb fc8f 	bl	8009cb4 <lwip_htons>
 800e396:	4603      	mov	r3, r0
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	f003 0303 	and.w	r3, r3, #3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d001      	beq.n	800e3a6 <tcp_free_acked_segments+0xc6>
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	e000      	b.n	800e3a8 <tcp_free_acked_segments+0xc8>
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	442b      	add	r3, r5
 800e3aa:	18e2      	adds	r2, r4, r3
 800e3ac:	4b09      	ldr	r3, [pc, #36]	; (800e3d4 <tcp_free_acked_segments+0xf4>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	dd9c      	ble.n	800e2f0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e3b6:	68bb      	ldr	r3, [r7, #8]
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3718      	adds	r7, #24
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bdb0      	pop	{r4, r5, r7, pc}
 800e3c0:	0801604c 	.word	0x0801604c
 800e3c4:	08016334 	.word	0x08016334
 800e3c8:	08016098 	.word	0x08016098
 800e3cc:	20000100 	.word	0x20000100
 800e3d0:	0801635c 	.word	0x0801635c
 800e3d4:	200000fc 	.word	0x200000fc

0800e3d8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e3d8:	b5b0      	push	{r4, r5, r7, lr}
 800e3da:	b094      	sub	sp, #80	; 0x50
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d106      	bne.n	800e3f8 <tcp_receive+0x20>
 800e3ea:	4ba6      	ldr	r3, [pc, #664]	; (800e684 <tcp_receive+0x2ac>)
 800e3ec:	f240 427b 	movw	r2, #1147	; 0x47b
 800e3f0:	49a5      	ldr	r1, [pc, #660]	; (800e688 <tcp_receive+0x2b0>)
 800e3f2:	48a6      	ldr	r0, [pc, #664]	; (800e68c <tcp_receive+0x2b4>)
 800e3f4:	f005 fb70 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	7d1b      	ldrb	r3, [r3, #20]
 800e3fc:	2b03      	cmp	r3, #3
 800e3fe:	d806      	bhi.n	800e40e <tcp_receive+0x36>
 800e400:	4ba0      	ldr	r3, [pc, #640]	; (800e684 <tcp_receive+0x2ac>)
 800e402:	f240 427c 	movw	r2, #1148	; 0x47c
 800e406:	49a2      	ldr	r1, [pc, #648]	; (800e690 <tcp_receive+0x2b8>)
 800e408:	48a0      	ldr	r0, [pc, #640]	; (800e68c <tcp_receive+0x2b4>)
 800e40a:	f005 fb65 	bl	8013ad8 <iprintf>

  if (flags & TCP_ACK) {
 800e40e:	4ba1      	ldr	r3, [pc, #644]	; (800e694 <tcp_receive+0x2bc>)
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	f003 0310 	and.w	r3, r3, #16
 800e416:	2b00      	cmp	r3, #0
 800e418:	f000 8263 	beq.w	800e8e2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e422:	461a      	mov	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e428:	4413      	add	r3, r2
 800e42a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e430:	4b99      	ldr	r3, [pc, #612]	; (800e698 <tcp_receive+0x2c0>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	1ad3      	subs	r3, r2, r3
 800e436:	2b00      	cmp	r3, #0
 800e438:	db1b      	blt.n	800e472 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e43e:	4b96      	ldr	r3, [pc, #600]	; (800e698 <tcp_receive+0x2c0>)
 800e440:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e442:	429a      	cmp	r2, r3
 800e444:	d106      	bne.n	800e454 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e44a:	4b94      	ldr	r3, [pc, #592]	; (800e69c <tcp_receive+0x2c4>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	1ad3      	subs	r3, r2, r3
 800e450:	2b00      	cmp	r3, #0
 800e452:	db0e      	blt.n	800e472 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e458:	4b90      	ldr	r3, [pc, #576]	; (800e69c <tcp_receive+0x2c4>)
 800e45a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d125      	bne.n	800e4ac <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e460:	4b8f      	ldr	r3, [pc, #572]	; (800e6a0 <tcp_receive+0x2c8>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	89db      	ldrh	r3, [r3, #14]
 800e466:	b29a      	uxth	r2, r3
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e46e:	429a      	cmp	r2, r3
 800e470:	d91c      	bls.n	800e4ac <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e472:	4b8b      	ldr	r3, [pc, #556]	; (800e6a0 <tcp_receive+0x2c8>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	89db      	ldrh	r3, [r3, #14]
 800e478:	b29a      	uxth	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d205      	bcs.n	800e49c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e49c:	4b7e      	ldr	r3, [pc, #504]	; (800e698 <tcp_receive+0x2c0>)
 800e49e:	681a      	ldr	r2, [r3, #0]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e4a4:	4b7d      	ldr	r3, [pc, #500]	; (800e69c <tcp_receive+0x2c4>)
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e4ac:	4b7b      	ldr	r3, [pc, #492]	; (800e69c <tcp_receive+0x2c4>)
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4b4:	1ad3      	subs	r3, r2, r3
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	dc58      	bgt.n	800e56c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e4ba:	4b7a      	ldr	r3, [pc, #488]	; (800e6a4 <tcp_receive+0x2cc>)
 800e4bc:	881b      	ldrh	r3, [r3, #0]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d14b      	bne.n	800e55a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4c6:	687a      	ldr	r2, [r7, #4]
 800e4c8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e4cc:	4413      	add	r3, r2
 800e4ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d142      	bne.n	800e55a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	db3d      	blt.n	800e55a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4e2:	4b6e      	ldr	r3, [pc, #440]	; (800e69c <tcp_receive+0x2c4>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d137      	bne.n	800e55a <tcp_receive+0x182>
              found_dupack = 1;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e4f4:	2bff      	cmp	r3, #255	; 0xff
 800e4f6:	d007      	beq.n	800e508 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e4fe:	3301      	adds	r3, #1
 800e500:	b2da      	uxtb	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e50e:	2b03      	cmp	r3, #3
 800e510:	d91b      	bls.n	800e54a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e51c:	4413      	add	r3, r2
 800e51e:	b29a      	uxth	r2, r3
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e526:	429a      	cmp	r2, r3
 800e528:	d30a      	bcc.n	800e540 <tcp_receive+0x168>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e534:	4413      	add	r3, r2
 800e536:	b29a      	uxth	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e53e:	e004      	b.n	800e54a <tcp_receive+0x172>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e546:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e550:	2b02      	cmp	r3, #2
 800e552:	d902      	bls.n	800e55a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f001 fee9 	bl	801032c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e55a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f040 8160 	bne.w	800e822 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2200      	movs	r2, #0
 800e566:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e56a:	e15a      	b.n	800e822 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e56c:	4b4b      	ldr	r3, [pc, #300]	; (800e69c <tcp_receive+0x2c4>)
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	3b01      	subs	r3, #1
 800e578:	2b00      	cmp	r3, #0
 800e57a:	f2c0 814d 	blt.w	800e818 <tcp_receive+0x440>
 800e57e:	4b47      	ldr	r3, [pc, #284]	; (800e69c <tcp_receive+0x2c4>)
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e586:	1ad3      	subs	r3, r2, r3
 800e588:	2b00      	cmp	r3, #0
 800e58a:	f300 8145 	bgt.w	800e818 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	8b5b      	ldrh	r3, [r3, #26]
 800e592:	f003 0304 	and.w	r3, r3, #4
 800e596:	2b00      	cmp	r3, #0
 800e598:	d010      	beq.n	800e5bc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	8b5b      	ldrh	r3, [r3, #26]
 800e59e:	f023 0304 	bic.w	r3, r3, #4
 800e5a2:	b29a      	uxth	r2, r3
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e5ca:	10db      	asrs	r3, r3, #3
 800e5cc:	b21b      	sxth	r3, r3
 800e5ce:	b29a      	uxth	r2, r3
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	4413      	add	r3, r2
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	b21a      	sxth	r2, r3
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e5e4:	4b2d      	ldr	r3, [pc, #180]	; (800e69c <tcp_receive+0x2c4>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	b29a      	uxth	r2, r3
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	1ad3      	subs	r3, r2, r3
 800e5f2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e5fc:	4b27      	ldr	r3, [pc, #156]	; (800e69c <tcp_receive+0x2c4>)
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	7d1b      	ldrb	r3, [r3, #20]
 800e608:	2b03      	cmp	r3, #3
 800e60a:	f240 8096 	bls.w	800e73a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d244      	bcs.n	800e6a8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	8b5b      	ldrh	r3, [r3, #26]
 800e622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e626:	2b00      	cmp	r3, #0
 800e628:	d001      	beq.n	800e62e <tcp_receive+0x256>
 800e62a:	2301      	movs	r3, #1
 800e62c:	e000      	b.n	800e630 <tcp_receive+0x258>
 800e62e:	2302      	movs	r3, #2
 800e630:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e634:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e638:	b29a      	uxth	r2, r3
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e63e:	fb12 f303 	smulbb	r3, r2, r3
 800e642:	b29b      	uxth	r3, r3
 800e644:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e646:	4293      	cmp	r3, r2
 800e648:	bf28      	it	cs
 800e64a:	4613      	movcs	r3, r2
 800e64c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e654:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e656:	4413      	add	r3, r2
 800e658:	b29a      	uxth	r2, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e660:	429a      	cmp	r2, r3
 800e662:	d309      	bcc.n	800e678 <tcp_receive+0x2a0>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e66a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e66c:	4413      	add	r3, r2
 800e66e:	b29a      	uxth	r2, r3
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e676:	e060      	b.n	800e73a <tcp_receive+0x362>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e67e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e682:	e05a      	b.n	800e73a <tcp_receive+0x362>
 800e684:	0801604c 	.word	0x0801604c
 800e688:	0801637c 	.word	0x0801637c
 800e68c:	08016098 	.word	0x08016098
 800e690:	08016398 	.word	0x08016398
 800e694:	20000104 	.word	0x20000104
 800e698:	200000f8 	.word	0x200000f8
 800e69c:	200000fc 	.word	0x200000fc
 800e6a0:	200000e8 	.word	0x200000e8
 800e6a4:	20000102 	.word	0x20000102
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e6ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6b0:	4413      	add	r3, r2
 800e6b2:	b29a      	uxth	r2, r3
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	d309      	bcc.n	800e6d2 <tcp_receive+0x2fa>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e6c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6c6:	4413      	add	r3, r2
 800e6c8:	b29a      	uxth	r2, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e6d0:	e004      	b.n	800e6dc <tcp_receive+0x304>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d326      	bcc.n	800e73a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6f8:	1ad3      	subs	r3, r2, r3
 800e6fa:	b29a      	uxth	r2, r3
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e70c:	4413      	add	r3, r2
 800e70e:	b29a      	uxth	r2, r3
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e716:	429a      	cmp	r2, r3
 800e718:	d30a      	bcc.n	800e730 <tcp_receive+0x358>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e724:	4413      	add	r3, r2
 800e726:	b29a      	uxth	r2, r3
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e72e:	e004      	b.n	800e73a <tcp_receive+0x362>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e736:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e742:	4a98      	ldr	r2, [pc, #608]	; (800e9a4 <tcp_receive+0x5cc>)
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f7ff fdcb 	bl	800e2e0 <tcp_free_acked_segments>
 800e74a:	4602      	mov	r2, r0
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e758:	4a93      	ldr	r2, [pc, #588]	; (800e9a8 <tcp_receive+0x5d0>)
 800e75a:	6878      	ldr	r0, [r7, #4]
 800e75c:	f7ff fdc0 	bl	800e2e0 <tcp_free_acked_segments>
 800e760:	4602      	mov	r2, r0
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d104      	bne.n	800e778 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e774:	861a      	strh	r2, [r3, #48]	; 0x30
 800e776:	e002      	b.n	800e77e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d103      	bne.n	800e794 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e79a:	4b84      	ldr	r3, [pc, #528]	; (800e9ac <tcp_receive+0x5d4>)
 800e79c:	881b      	ldrh	r3, [r3, #0]
 800e79e:	4413      	add	r3, r2
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	8b5b      	ldrh	r3, [r3, #26]
 800e7ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d035      	beq.n	800e820 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d118      	bne.n	800e7ee <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d00c      	beq.n	800e7de <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7fb fa84 	bl	8009cde <lwip_htonl>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	dc20      	bgt.n	800e820 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	8b5b      	ldrh	r3, [r3, #26]
 800e7e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e7e6:	b29a      	uxth	r2, r3
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e7ec:	e018      	b.n	800e820 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7f6:	68db      	ldr	r3, [r3, #12]
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7fb fa6f 	bl	8009cde <lwip_htonl>
 800e800:	4603      	mov	r3, r0
 800e802:	1ae3      	subs	r3, r4, r3
 800e804:	2b00      	cmp	r3, #0
 800e806:	dc0b      	bgt.n	800e820 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	8b5b      	ldrh	r3, [r3, #26]
 800e80c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e810:	b29a      	uxth	r2, r3
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e816:	e003      	b.n	800e820 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	f001 ff75 	bl	8010708 <tcp_send_empty_ack>
 800e81e:	e000      	b.n	800e822 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e820:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e826:	2b00      	cmp	r3, #0
 800e828:	d05b      	beq.n	800e8e2 <tcp_receive+0x50a>
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e82e:	4b60      	ldr	r3, [pc, #384]	; (800e9b0 <tcp_receive+0x5d8>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	1ad3      	subs	r3, r2, r3
 800e834:	2b00      	cmp	r3, #0
 800e836:	da54      	bge.n	800e8e2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e838:	4b5e      	ldr	r3, [pc, #376]	; (800e9b4 <tcp_receive+0x5dc>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	b29a      	uxth	r2, r3
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e842:	b29b      	uxth	r3, r3
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	b29b      	uxth	r3, r3
 800e848:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e84c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e856:	10db      	asrs	r3, r3, #3
 800e858:	b21b      	sxth	r3, r3
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	1ad3      	subs	r3, r2, r3
 800e85e:	b29b      	uxth	r3, r3
 800e860:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e86a:	b29a      	uxth	r2, r3
 800e86c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e870:	4413      	add	r3, r2
 800e872:	b29b      	uxth	r3, r3
 800e874:	b21a      	sxth	r2, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e87a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e87e:	2b00      	cmp	r3, #0
 800e880:	da05      	bge.n	800e88e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800e882:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e886:	425b      	negs	r3, r3
 800e888:	b29b      	uxth	r3, r3
 800e88a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e88e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e898:	109b      	asrs	r3, r3, #2
 800e89a:	b21b      	sxth	r3, r3
 800e89c:	b29b      	uxth	r3, r3
 800e89e:	1ad3      	subs	r3, r2, r3
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e8b2:	4413      	add	r3, r2
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	b21a      	sxth	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e8c2:	10db      	asrs	r3, r3, #3
 800e8c4:	b21b      	sxth	r3, r3
 800e8c6:	b29a      	uxth	r2, r3
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	4413      	add	r3, r2
 800e8d2:	b29b      	uxth	r3, r3
 800e8d4:	b21a      	sxth	r2, r3
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e8e2:	4b35      	ldr	r3, [pc, #212]	; (800e9b8 <tcp_receive+0x5e0>)
 800e8e4:	881b      	ldrh	r3, [r3, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	f000 84e1 	beq.w	800f2ae <tcp_receive+0xed6>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	7d1b      	ldrb	r3, [r3, #20]
 800e8f0:	2b06      	cmp	r3, #6
 800e8f2:	f200 84dc 	bhi.w	800f2ae <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8fa:	4b30      	ldr	r3, [pc, #192]	; (800e9bc <tcp_receive+0x5e4>)
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	1ad3      	subs	r3, r2, r3
 800e900:	3b01      	subs	r3, #1
 800e902:	2b00      	cmp	r3, #0
 800e904:	f2c0 808e 	blt.w	800ea24 <tcp_receive+0x64c>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e90c:	4b2a      	ldr	r3, [pc, #168]	; (800e9b8 <tcp_receive+0x5e0>)
 800e90e:	881b      	ldrh	r3, [r3, #0]
 800e910:	4619      	mov	r1, r3
 800e912:	4b2a      	ldr	r3, [pc, #168]	; (800e9bc <tcp_receive+0x5e4>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	440b      	add	r3, r1
 800e918:	1ad3      	subs	r3, r2, r3
 800e91a:	3301      	adds	r3, #1
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f300 8081 	bgt.w	800ea24 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e922:	4b27      	ldr	r3, [pc, #156]	; (800e9c0 <tcp_receive+0x5e8>)
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e92c:	4b23      	ldr	r3, [pc, #140]	; (800e9bc <tcp_receive+0x5e4>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e934:	4b22      	ldr	r3, [pc, #136]	; (800e9c0 <tcp_receive+0x5e8>)
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d106      	bne.n	800e94a <tcp_receive+0x572>
 800e93c:	4b21      	ldr	r3, [pc, #132]	; (800e9c4 <tcp_receive+0x5ec>)
 800e93e:	f240 5294 	movw	r2, #1428	; 0x594
 800e942:	4921      	ldr	r1, [pc, #132]	; (800e9c8 <tcp_receive+0x5f0>)
 800e944:	4821      	ldr	r0, [pc, #132]	; (800e9cc <tcp_receive+0x5f4>)
 800e946:	f005 f8c7 	bl	8013ad8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e950:	4293      	cmp	r3, r2
 800e952:	d906      	bls.n	800e962 <tcp_receive+0x58a>
 800e954:	4b1b      	ldr	r3, [pc, #108]	; (800e9c4 <tcp_receive+0x5ec>)
 800e956:	f240 5295 	movw	r2, #1429	; 0x595
 800e95a:	491d      	ldr	r1, [pc, #116]	; (800e9d0 <tcp_receive+0x5f8>)
 800e95c:	481b      	ldr	r0, [pc, #108]	; (800e9cc <tcp_receive+0x5f4>)
 800e95e:	f005 f8bb 	bl	8013ad8 <iprintf>
      off = (u16_t)off32;
 800e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e964:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e968:	4b15      	ldr	r3, [pc, #84]	; (800e9c0 <tcp_receive+0x5e8>)
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	891b      	ldrh	r3, [r3, #8]
 800e96e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e972:	429a      	cmp	r2, r3
 800e974:	d906      	bls.n	800e984 <tcp_receive+0x5ac>
 800e976:	4b13      	ldr	r3, [pc, #76]	; (800e9c4 <tcp_receive+0x5ec>)
 800e978:	f240 5297 	movw	r2, #1431	; 0x597
 800e97c:	4915      	ldr	r1, [pc, #84]	; (800e9d4 <tcp_receive+0x5fc>)
 800e97e:	4813      	ldr	r0, [pc, #76]	; (800e9cc <tcp_receive+0x5f4>)
 800e980:	f005 f8aa 	bl	8013ad8 <iprintf>
      inseg.len -= off;
 800e984:	4b0e      	ldr	r3, [pc, #56]	; (800e9c0 <tcp_receive+0x5e8>)
 800e986:	891a      	ldrh	r2, [r3, #8]
 800e988:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	b29a      	uxth	r2, r3
 800e990:	4b0b      	ldr	r3, [pc, #44]	; (800e9c0 <tcp_receive+0x5e8>)
 800e992:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e994:	4b0a      	ldr	r3, [pc, #40]	; (800e9c0 <tcp_receive+0x5e8>)
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	891a      	ldrh	r2, [r3, #8]
 800e99a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e99e:	1ad3      	subs	r3, r2, r3
 800e9a0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e9a2:	e029      	b.n	800e9f8 <tcp_receive+0x620>
 800e9a4:	080163b4 	.word	0x080163b4
 800e9a8:	080163bc 	.word	0x080163bc
 800e9ac:	20000100 	.word	0x20000100
 800e9b0:	200000fc 	.word	0x200000fc
 800e9b4:	20008dc4 	.word	0x20008dc4
 800e9b8:	20000102 	.word	0x20000102
 800e9bc:	200000f8 	.word	0x200000f8
 800e9c0:	200000d8 	.word	0x200000d8
 800e9c4:	0801604c 	.word	0x0801604c
 800e9c8:	080163c4 	.word	0x080163c4
 800e9cc:	08016098 	.word	0x08016098
 800e9d0:	080163d4 	.word	0x080163d4
 800e9d4:	080163e4 	.word	0x080163e4
        off -= p->len;
 800e9d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9da:	895b      	ldrh	r3, [r3, #10]
 800e9dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e9e0:	1ad3      	subs	r3, r2, r3
 800e9e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e9e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e9ea:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e9ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e9f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9fa:	895b      	ldrh	r3, [r3, #10]
 800e9fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d8e9      	bhi.n	800e9d8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ea04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea08:	4619      	mov	r1, r3
 800ea0a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ea0c:	f7fc fb70 	bl	800b0f0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea14:	4a91      	ldr	r2, [pc, #580]	; (800ec5c <tcp_receive+0x884>)
 800ea16:	6013      	str	r3, [r2, #0]
 800ea18:	4b91      	ldr	r3, [pc, #580]	; (800ec60 <tcp_receive+0x888>)
 800ea1a:	68db      	ldr	r3, [r3, #12]
 800ea1c:	4a8f      	ldr	r2, [pc, #572]	; (800ec5c <tcp_receive+0x884>)
 800ea1e:	6812      	ldr	r2, [r2, #0]
 800ea20:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ea22:	e00d      	b.n	800ea40 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ea24:	4b8d      	ldr	r3, [pc, #564]	; (800ec5c <tcp_receive+0x884>)
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea2c:	1ad3      	subs	r3, r2, r3
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	da06      	bge.n	800ea40 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	8b5b      	ldrh	r3, [r3, #26]
 800ea36:	f043 0302 	orr.w	r3, r3, #2
 800ea3a:	b29a      	uxth	r2, r3
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ea40:	4b86      	ldr	r3, [pc, #536]	; (800ec5c <tcp_receive+0x884>)
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea48:	1ad3      	subs	r3, r2, r3
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	f2c0 842a 	blt.w	800f2a4 <tcp_receive+0xecc>
 800ea50:	4b82      	ldr	r3, [pc, #520]	; (800ec5c <tcp_receive+0x884>)
 800ea52:	681a      	ldr	r2, [r3, #0]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea58:	6879      	ldr	r1, [r7, #4]
 800ea5a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ea5c:	440b      	add	r3, r1
 800ea5e:	1ad3      	subs	r3, r2, r3
 800ea60:	3301      	adds	r3, #1
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	f300 841e 	bgt.w	800f2a4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea6c:	4b7b      	ldr	r3, [pc, #492]	; (800ec5c <tcp_receive+0x884>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	f040 829a 	bne.w	800efaa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ea76:	4b7a      	ldr	r3, [pc, #488]	; (800ec60 <tcp_receive+0x888>)
 800ea78:	891c      	ldrh	r4, [r3, #8]
 800ea7a:	4b79      	ldr	r3, [pc, #484]	; (800ec60 <tcp_receive+0x888>)
 800ea7c:	68db      	ldr	r3, [r3, #12]
 800ea7e:	899b      	ldrh	r3, [r3, #12]
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7fb f916 	bl	8009cb4 <lwip_htons>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	f003 0303 	and.w	r3, r3, #3
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d001      	beq.n	800ea98 <tcp_receive+0x6c0>
 800ea94:	2301      	movs	r3, #1
 800ea96:	e000      	b.n	800ea9a <tcp_receive+0x6c2>
 800ea98:	2300      	movs	r3, #0
 800ea9a:	4423      	add	r3, r4
 800ea9c:	b29a      	uxth	r2, r3
 800ea9e:	4b71      	ldr	r3, [pc, #452]	; (800ec64 <tcp_receive+0x88c>)
 800eaa0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eaa6:	4b6f      	ldr	r3, [pc, #444]	; (800ec64 <tcp_receive+0x88c>)
 800eaa8:	881b      	ldrh	r3, [r3, #0]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d275      	bcs.n	800eb9a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eaae:	4b6c      	ldr	r3, [pc, #432]	; (800ec60 <tcp_receive+0x888>)
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	899b      	ldrh	r3, [r3, #12]
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7fb f8fc 	bl	8009cb4 <lwip_htons>
 800eabc:	4603      	mov	r3, r0
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	f003 0301 	and.w	r3, r3, #1
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d01f      	beq.n	800eb08 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800eac8:	4b65      	ldr	r3, [pc, #404]	; (800ec60 <tcp_receive+0x888>)
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	899b      	ldrh	r3, [r3, #12]
 800eace:	b29b      	uxth	r3, r3
 800ead0:	b21b      	sxth	r3, r3
 800ead2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ead6:	b21c      	sxth	r4, r3
 800ead8:	4b61      	ldr	r3, [pc, #388]	; (800ec60 <tcp_receive+0x888>)
 800eada:	68db      	ldr	r3, [r3, #12]
 800eadc:	899b      	ldrh	r3, [r3, #12]
 800eade:	b29b      	uxth	r3, r3
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7fb f8e7 	bl	8009cb4 <lwip_htons>
 800eae6:	4603      	mov	r3, r0
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7fb f8de 	bl	8009cb4 <lwip_htons>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	b21b      	sxth	r3, r3
 800eafc:	4323      	orrs	r3, r4
 800eafe:	b21a      	sxth	r2, r3
 800eb00:	4b57      	ldr	r3, [pc, #348]	; (800ec60 <tcp_receive+0x888>)
 800eb02:	68db      	ldr	r3, [r3, #12]
 800eb04:	b292      	uxth	r2, r2
 800eb06:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eb0c:	4b54      	ldr	r3, [pc, #336]	; (800ec60 <tcp_receive+0x888>)
 800eb0e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800eb10:	4b53      	ldr	r3, [pc, #332]	; (800ec60 <tcp_receive+0x888>)
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	899b      	ldrh	r3, [r3, #12]
 800eb16:	b29b      	uxth	r3, r3
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7fb f8cb 	bl	8009cb4 <lwip_htons>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	f003 0302 	and.w	r3, r3, #2
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d005      	beq.n	800eb36 <tcp_receive+0x75e>
            inseg.len -= 1;
 800eb2a:	4b4d      	ldr	r3, [pc, #308]	; (800ec60 <tcp_receive+0x888>)
 800eb2c:	891b      	ldrh	r3, [r3, #8]
 800eb2e:	3b01      	subs	r3, #1
 800eb30:	b29a      	uxth	r2, r3
 800eb32:	4b4b      	ldr	r3, [pc, #300]	; (800ec60 <tcp_receive+0x888>)
 800eb34:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800eb36:	4b4a      	ldr	r3, [pc, #296]	; (800ec60 <tcp_receive+0x888>)
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	4a49      	ldr	r2, [pc, #292]	; (800ec60 <tcp_receive+0x888>)
 800eb3c:	8912      	ldrh	r2, [r2, #8]
 800eb3e:	4611      	mov	r1, r2
 800eb40:	4618      	mov	r0, r3
 800eb42:	f7fc f9d5 	bl	800aef0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800eb46:	4b46      	ldr	r3, [pc, #280]	; (800ec60 <tcp_receive+0x888>)
 800eb48:	891c      	ldrh	r4, [r3, #8]
 800eb4a:	4b45      	ldr	r3, [pc, #276]	; (800ec60 <tcp_receive+0x888>)
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	899b      	ldrh	r3, [r3, #12]
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7fb f8ae 	bl	8009cb4 <lwip_htons>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	f003 0303 	and.w	r3, r3, #3
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d001      	beq.n	800eb68 <tcp_receive+0x790>
 800eb64:	2301      	movs	r3, #1
 800eb66:	e000      	b.n	800eb6a <tcp_receive+0x792>
 800eb68:	2300      	movs	r3, #0
 800eb6a:	4423      	add	r3, r4
 800eb6c:	b29a      	uxth	r2, r3
 800eb6e:	4b3d      	ldr	r3, [pc, #244]	; (800ec64 <tcp_receive+0x88c>)
 800eb70:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800eb72:	4b3c      	ldr	r3, [pc, #240]	; (800ec64 <tcp_receive+0x88c>)
 800eb74:	881b      	ldrh	r3, [r3, #0]
 800eb76:	461a      	mov	r2, r3
 800eb78:	4b38      	ldr	r3, [pc, #224]	; (800ec5c <tcp_receive+0x884>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	441a      	add	r2, r3
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb82:	6879      	ldr	r1, [r7, #4]
 800eb84:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eb86:	440b      	add	r3, r1
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d006      	beq.n	800eb9a <tcp_receive+0x7c2>
 800eb8c:	4b36      	ldr	r3, [pc, #216]	; (800ec68 <tcp_receive+0x890>)
 800eb8e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800eb92:	4936      	ldr	r1, [pc, #216]	; (800ec6c <tcp_receive+0x894>)
 800eb94:	4836      	ldr	r0, [pc, #216]	; (800ec70 <tcp_receive+0x898>)
 800eb96:	f004 ff9f 	bl	8013ad8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	f000 80e7 	beq.w	800ed72 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eba4:	4b2e      	ldr	r3, [pc, #184]	; (800ec60 <tcp_receive+0x888>)
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	899b      	ldrh	r3, [r3, #12]
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	4618      	mov	r0, r3
 800ebae:	f7fb f881 	bl	8009cb4 <lwip_htons>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	b2db      	uxtb	r3, r3
 800ebb6:	f003 0301 	and.w	r3, r3, #1
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d010      	beq.n	800ebe0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ebbe:	e00a      	b.n	800ebd6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebc4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	f7fd fd96 	bl	800c702 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1f0      	bne.n	800ebc0 <tcp_receive+0x7e8>
 800ebde:	e0c8      	b.n	800ed72 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebe4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ebe6:	e052      	b.n	800ec8e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ebe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	899b      	ldrh	r3, [r3, #12]
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7fb f85f 	bl	8009cb4 <lwip_htons>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	f003 0301 	and.w	r3, r3, #1
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d03d      	beq.n	800ec7e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ec02:	4b17      	ldr	r3, [pc, #92]	; (800ec60 <tcp_receive+0x888>)
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	899b      	ldrh	r3, [r3, #12]
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7fb f852 	bl	8009cb4 <lwip_htons>
 800ec10:	4603      	mov	r3, r0
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d130      	bne.n	800ec7e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ec1c:	4b10      	ldr	r3, [pc, #64]	; (800ec60 <tcp_receive+0x888>)
 800ec1e:	68db      	ldr	r3, [r3, #12]
 800ec20:	899b      	ldrh	r3, [r3, #12]
 800ec22:	b29c      	uxth	r4, r3
 800ec24:	2001      	movs	r0, #1
 800ec26:	f7fb f845 	bl	8009cb4 <lwip_htons>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	4b0c      	ldr	r3, [pc, #48]	; (800ec60 <tcp_receive+0x888>)
 800ec30:	68db      	ldr	r3, [r3, #12]
 800ec32:	4322      	orrs	r2, r4
 800ec34:	b292      	uxth	r2, r2
 800ec36:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ec38:	4b09      	ldr	r3, [pc, #36]	; (800ec60 <tcp_receive+0x888>)
 800ec3a:	891c      	ldrh	r4, [r3, #8]
 800ec3c:	4b08      	ldr	r3, [pc, #32]	; (800ec60 <tcp_receive+0x888>)
 800ec3e:	68db      	ldr	r3, [r3, #12]
 800ec40:	899b      	ldrh	r3, [r3, #12]
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fb f835 	bl	8009cb4 <lwip_htons>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	b2db      	uxtb	r3, r3
 800ec4e:	f003 0303 	and.w	r3, r3, #3
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d00e      	beq.n	800ec74 <tcp_receive+0x89c>
 800ec56:	2301      	movs	r3, #1
 800ec58:	e00d      	b.n	800ec76 <tcp_receive+0x89e>
 800ec5a:	bf00      	nop
 800ec5c:	200000f8 	.word	0x200000f8
 800ec60:	200000d8 	.word	0x200000d8
 800ec64:	20000102 	.word	0x20000102
 800ec68:	0801604c 	.word	0x0801604c
 800ec6c:	080163f4 	.word	0x080163f4
 800ec70:	08016098 	.word	0x08016098
 800ec74:	2300      	movs	r3, #0
 800ec76:	4423      	add	r3, r4
 800ec78:	b29a      	uxth	r2, r3
 800ec7a:	4b98      	ldr	r3, [pc, #608]	; (800eedc <tcp_receive+0xb04>)
 800ec7c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ec7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec80:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ec82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ec88:	6938      	ldr	r0, [r7, #16]
 800ec8a:	f7fd fd3a 	bl	800c702 <tcp_seg_free>
            while (next &&
 800ec8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d00e      	beq.n	800ecb2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ec94:	4b91      	ldr	r3, [pc, #580]	; (800eedc <tcp_receive+0xb04>)
 800ec96:	881b      	ldrh	r3, [r3, #0]
 800ec98:	461a      	mov	r2, r3
 800ec9a:	4b91      	ldr	r3, [pc, #580]	; (800eee0 <tcp_receive+0xb08>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	441a      	add	r2, r3
 800eca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eca8:	8909      	ldrh	r1, [r1, #8]
 800ecaa:	440b      	add	r3, r1
 800ecac:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	da9a      	bge.n	800ebe8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ecb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d059      	beq.n	800ed6c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ecb8:	4b88      	ldr	r3, [pc, #544]	; (800eedc <tcp_receive+0xb04>)
 800ecba:	881b      	ldrh	r3, [r3, #0]
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	4b88      	ldr	r3, [pc, #544]	; (800eee0 <tcp_receive+0xb08>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	441a      	add	r2, r3
 800ecc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecc6:	68db      	ldr	r3, [r3, #12]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	1ad3      	subs	r3, r2, r3
            if (next &&
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	dd4d      	ble.n	800ed6c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ecd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	4b81      	ldr	r3, [pc, #516]	; (800eee0 <tcp_receive+0xb08>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	b29b      	uxth	r3, r3
 800ecde:	1ad3      	subs	r3, r2, r3
 800ece0:	b29a      	uxth	r2, r3
 800ece2:	4b80      	ldr	r3, [pc, #512]	; (800eee4 <tcp_receive+0xb0c>)
 800ece4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ece6:	4b7f      	ldr	r3, [pc, #508]	; (800eee4 <tcp_receive+0xb0c>)
 800ece8:	68db      	ldr	r3, [r3, #12]
 800ecea:	899b      	ldrh	r3, [r3, #12]
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7fa ffe0 	bl	8009cb4 <lwip_htons>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	f003 0302 	and.w	r3, r3, #2
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d005      	beq.n	800ed0c <tcp_receive+0x934>
                inseg.len -= 1;
 800ed00:	4b78      	ldr	r3, [pc, #480]	; (800eee4 <tcp_receive+0xb0c>)
 800ed02:	891b      	ldrh	r3, [r3, #8]
 800ed04:	3b01      	subs	r3, #1
 800ed06:	b29a      	uxth	r2, r3
 800ed08:	4b76      	ldr	r3, [pc, #472]	; (800eee4 <tcp_receive+0xb0c>)
 800ed0a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ed0c:	4b75      	ldr	r3, [pc, #468]	; (800eee4 <tcp_receive+0xb0c>)
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	4a74      	ldr	r2, [pc, #464]	; (800eee4 <tcp_receive+0xb0c>)
 800ed12:	8912      	ldrh	r2, [r2, #8]
 800ed14:	4611      	mov	r1, r2
 800ed16:	4618      	mov	r0, r3
 800ed18:	f7fc f8ea 	bl	800aef0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ed1c:	4b71      	ldr	r3, [pc, #452]	; (800eee4 <tcp_receive+0xb0c>)
 800ed1e:	891c      	ldrh	r4, [r3, #8]
 800ed20:	4b70      	ldr	r3, [pc, #448]	; (800eee4 <tcp_receive+0xb0c>)
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	899b      	ldrh	r3, [r3, #12]
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7fa ffc3 	bl	8009cb4 <lwip_htons>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	f003 0303 	and.w	r3, r3, #3
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d001      	beq.n	800ed3e <tcp_receive+0x966>
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	e000      	b.n	800ed40 <tcp_receive+0x968>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	4423      	add	r3, r4
 800ed42:	b29a      	uxth	r2, r3
 800ed44:	4b65      	ldr	r3, [pc, #404]	; (800eedc <tcp_receive+0xb04>)
 800ed46:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ed48:	4b64      	ldr	r3, [pc, #400]	; (800eedc <tcp_receive+0xb04>)
 800ed4a:	881b      	ldrh	r3, [r3, #0]
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	4b64      	ldr	r3, [pc, #400]	; (800eee0 <tcp_receive+0xb08>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	441a      	add	r2, r3
 800ed54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed56:	68db      	ldr	r3, [r3, #12]
 800ed58:	685b      	ldr	r3, [r3, #4]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d006      	beq.n	800ed6c <tcp_receive+0x994>
 800ed5e:	4b62      	ldr	r3, [pc, #392]	; (800eee8 <tcp_receive+0xb10>)
 800ed60:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ed64:	4961      	ldr	r1, [pc, #388]	; (800eeec <tcp_receive+0xb14>)
 800ed66:	4862      	ldr	r0, [pc, #392]	; (800eef0 <tcp_receive+0xb18>)
 800ed68:	f004 feb6 	bl	8013ad8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ed70:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ed72:	4b5a      	ldr	r3, [pc, #360]	; (800eedc <tcp_receive+0xb04>)
 800ed74:	881b      	ldrh	r3, [r3, #0]
 800ed76:	461a      	mov	r2, r3
 800ed78:	4b59      	ldr	r3, [pc, #356]	; (800eee0 <tcp_receive+0xb08>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	441a      	add	r2, r3
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed86:	4b55      	ldr	r3, [pc, #340]	; (800eedc <tcp_receive+0xb04>)
 800ed88:	881b      	ldrh	r3, [r3, #0]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d206      	bcs.n	800ed9c <tcp_receive+0x9c4>
 800ed8e:	4b56      	ldr	r3, [pc, #344]	; (800eee8 <tcp_receive+0xb10>)
 800ed90:	f240 6207 	movw	r2, #1543	; 0x607
 800ed94:	4957      	ldr	r1, [pc, #348]	; (800eef4 <tcp_receive+0xb1c>)
 800ed96:	4856      	ldr	r0, [pc, #344]	; (800eef0 <tcp_receive+0xb18>)
 800ed98:	f004 fe9e 	bl	8013ad8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eda0:	4b4e      	ldr	r3, [pc, #312]	; (800eedc <tcp_receive+0xb04>)
 800eda2:	881b      	ldrh	r3, [r3, #0]
 800eda4:	1ad3      	subs	r3, r2, r3
 800eda6:	b29a      	uxth	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7fc ffc9 	bl	800bd44 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800edb2:	4b4c      	ldr	r3, [pc, #304]	; (800eee4 <tcp_receive+0xb0c>)
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	891b      	ldrh	r3, [r3, #8]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d006      	beq.n	800edca <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800edbc:	4b49      	ldr	r3, [pc, #292]	; (800eee4 <tcp_receive+0xb0c>)
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	4a4d      	ldr	r2, [pc, #308]	; (800eef8 <tcp_receive+0xb20>)
 800edc2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800edc4:	4b47      	ldr	r3, [pc, #284]	; (800eee4 <tcp_receive+0xb0c>)
 800edc6:	2200      	movs	r2, #0
 800edc8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800edca:	4b46      	ldr	r3, [pc, #280]	; (800eee4 <tcp_receive+0xb0c>)
 800edcc:	68db      	ldr	r3, [r3, #12]
 800edce:	899b      	ldrh	r3, [r3, #12]
 800edd0:	b29b      	uxth	r3, r3
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7fa ff6e 	bl	8009cb4 <lwip_htons>
 800edd8:	4603      	mov	r3, r0
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	f003 0301 	and.w	r3, r3, #1
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	f000 80b8 	beq.w	800ef56 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ede6:	4b45      	ldr	r3, [pc, #276]	; (800eefc <tcp_receive+0xb24>)
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	f043 0320 	orr.w	r3, r3, #32
 800edee:	b2da      	uxtb	r2, r3
 800edf0:	4b42      	ldr	r3, [pc, #264]	; (800eefc <tcp_receive+0xb24>)
 800edf2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800edf4:	e0af      	b.n	800ef56 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800edfa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee00:	68db      	ldr	r3, [r3, #12]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	4a36      	ldr	r2, [pc, #216]	; (800eee0 <tcp_receive+0xb08>)
 800ee06:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	891b      	ldrh	r3, [r3, #8]
 800ee0c:	461c      	mov	r4, r3
 800ee0e:	68bb      	ldr	r3, [r7, #8]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	899b      	ldrh	r3, [r3, #12]
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7fa ff4c 	bl	8009cb4 <lwip_htons>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	f003 0303 	and.w	r3, r3, #3
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d001      	beq.n	800ee2c <tcp_receive+0xa54>
 800ee28:	2301      	movs	r3, #1
 800ee2a:	e000      	b.n	800ee2e <tcp_receive+0xa56>
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	191a      	adds	r2, r3, r4
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee34:	441a      	add	r2, r3
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ee3e:	461c      	mov	r4, r3
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	891b      	ldrh	r3, [r3, #8]
 800ee44:	461d      	mov	r5, r3
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	899b      	ldrh	r3, [r3, #12]
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7fa ff30 	bl	8009cb4 <lwip_htons>
 800ee54:	4603      	mov	r3, r0
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	f003 0303 	and.w	r3, r3, #3
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d001      	beq.n	800ee64 <tcp_receive+0xa8c>
 800ee60:	2301      	movs	r3, #1
 800ee62:	e000      	b.n	800ee66 <tcp_receive+0xa8e>
 800ee64:	2300      	movs	r3, #0
 800ee66:	442b      	add	r3, r5
 800ee68:	429c      	cmp	r4, r3
 800ee6a:	d206      	bcs.n	800ee7a <tcp_receive+0xaa2>
 800ee6c:	4b1e      	ldr	r3, [pc, #120]	; (800eee8 <tcp_receive+0xb10>)
 800ee6e:	f240 622b 	movw	r2, #1579	; 0x62b
 800ee72:	4923      	ldr	r1, [pc, #140]	; (800ef00 <tcp_receive+0xb28>)
 800ee74:	481e      	ldr	r0, [pc, #120]	; (800eef0 <tcp_receive+0xb18>)
 800ee76:	f004 fe2f 	bl	8013ad8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	891b      	ldrh	r3, [r3, #8]
 800ee7e:	461c      	mov	r4, r3
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	68db      	ldr	r3, [r3, #12]
 800ee84:	899b      	ldrh	r3, [r3, #12]
 800ee86:	b29b      	uxth	r3, r3
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7fa ff13 	bl	8009cb4 <lwip_htons>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	b2db      	uxtb	r3, r3
 800ee92:	f003 0303 	and.w	r3, r3, #3
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d001      	beq.n	800ee9e <tcp_receive+0xac6>
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	e000      	b.n	800eea0 <tcp_receive+0xac8>
 800ee9e:	2300      	movs	r3, #0
 800eea0:	1919      	adds	r1, r3, r4
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eea6:	b28b      	uxth	r3, r1
 800eea8:	1ad3      	subs	r3, r2, r3
 800eeaa:	b29a      	uxth	r2, r3
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7fc ff47 	bl	800bd44 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	891b      	ldrh	r3, [r3, #8]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d028      	beq.n	800ef12 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800eec0:	4b0d      	ldr	r3, [pc, #52]	; (800eef8 <tcp_receive+0xb20>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d01d      	beq.n	800ef04 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800eec8:	4b0b      	ldr	r3, [pc, #44]	; (800eef8 <tcp_receive+0xb20>)
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	4619      	mov	r1, r3
 800eed2:	4610      	mov	r0, r2
 800eed4:	f7fc fa54 	bl	800b380 <pbuf_cat>
 800eed8:	e018      	b.n	800ef0c <tcp_receive+0xb34>
 800eeda:	bf00      	nop
 800eedc:	20000102 	.word	0x20000102
 800eee0:	200000f8 	.word	0x200000f8
 800eee4:	200000d8 	.word	0x200000d8
 800eee8:	0801604c 	.word	0x0801604c
 800eeec:	0801642c 	.word	0x0801642c
 800eef0:	08016098 	.word	0x08016098
 800eef4:	08016468 	.word	0x08016468
 800eef8:	20000108 	.word	0x20000108
 800eefc:	20000105 	.word	0x20000105
 800ef00:	08016488 	.word	0x08016488
            } else {
              recv_data = cseg->p;
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	4a70      	ldr	r2, [pc, #448]	; (800f0cc <tcp_receive+0xcf4>)
 800ef0a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	899b      	ldrh	r3, [r3, #12]
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fa feca 	bl	8009cb4 <lwip_htons>
 800ef20:	4603      	mov	r3, r0
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	f003 0301 	and.w	r3, r3, #1
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d00d      	beq.n	800ef48 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ef2c:	4b68      	ldr	r3, [pc, #416]	; (800f0d0 <tcp_receive+0xcf8>)
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	f043 0320 	orr.w	r3, r3, #32
 800ef34:	b2da      	uxtb	r2, r3
 800ef36:	4b66      	ldr	r3, [pc, #408]	; (800f0d0 <tcp_receive+0xcf8>)
 800ef38:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	7d1b      	ldrb	r3, [r3, #20]
 800ef3e:	2b04      	cmp	r3, #4
 800ef40:	d102      	bne.n	800ef48 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2207      	movs	r2, #7
 800ef46:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ef50:	68b8      	ldr	r0, [r7, #8]
 800ef52:	f7fd fbd6 	bl	800c702 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d008      	beq.n	800ef70 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	685a      	ldr	r2, [r3, #4]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	f43f af43 	beq.w	800edf6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	8b5b      	ldrh	r3, [r3, #26]
 800ef74:	f003 0301 	and.w	r3, r3, #1
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d00e      	beq.n	800ef9a <tcp_receive+0xbc2>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	8b5b      	ldrh	r3, [r3, #26]
 800ef80:	f023 0301 	bic.w	r3, r3, #1
 800ef84:	b29a      	uxth	r2, r3
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	835a      	strh	r2, [r3, #26]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	8b5b      	ldrh	r3, [r3, #26]
 800ef8e:	f043 0302 	orr.w	r3, r3, #2
 800ef92:	b29a      	uxth	r2, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ef98:	e188      	b.n	800f2ac <tcp_receive+0xed4>
        tcp_ack(pcb);
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	8b5b      	ldrh	r3, [r3, #26]
 800ef9e:	f043 0301 	orr.w	r3, r3, #1
 800efa2:	b29a      	uxth	r2, r3
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800efa8:	e180      	b.n	800f2ac <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d106      	bne.n	800efc0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800efb2:	4848      	ldr	r0, [pc, #288]	; (800f0d4 <tcp_receive+0xcfc>)
 800efb4:	f7fd fbbe 	bl	800c734 <tcp_seg_copy>
 800efb8:	4602      	mov	r2, r0
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	675a      	str	r2, [r3, #116]	; 0x74
 800efbe:	e16d      	b.n	800f29c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800efc0:	2300      	movs	r3, #0
 800efc2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efc8:	63bb      	str	r3, [r7, #56]	; 0x38
 800efca:	e157      	b.n	800f27c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800efcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efce:	68db      	ldr	r3, [r3, #12]
 800efd0:	685a      	ldr	r2, [r3, #4]
 800efd2:	4b41      	ldr	r3, [pc, #260]	; (800f0d8 <tcp_receive+0xd00>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d11d      	bne.n	800f016 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800efda:	4b3e      	ldr	r3, [pc, #248]	; (800f0d4 <tcp_receive+0xcfc>)
 800efdc:	891a      	ldrh	r2, [r3, #8]
 800efde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe0:	891b      	ldrh	r3, [r3, #8]
 800efe2:	429a      	cmp	r2, r3
 800efe4:	f240 814f 	bls.w	800f286 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800efe8:	483a      	ldr	r0, [pc, #232]	; (800f0d4 <tcp_receive+0xcfc>)
 800efea:	f7fd fba3 	bl	800c734 <tcp_seg_copy>
 800efee:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	f000 8149 	beq.w	800f28a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800eff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800effa:	2b00      	cmp	r3, #0
 800effc:	d003      	beq.n	800f006 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800effe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f000:	697a      	ldr	r2, [r7, #20]
 800f002:	601a      	str	r2, [r3, #0]
 800f004:	e002      	b.n	800f00c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	697a      	ldr	r2, [r7, #20]
 800f00a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f00c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f00e:	6978      	ldr	r0, [r7, #20]
 800f010:	f7ff f8de 	bl	800e1d0 <tcp_oos_insert_segment>
                }
                break;
 800f014:	e139      	b.n	800f28a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d117      	bne.n	800f04c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f01c:	4b2e      	ldr	r3, [pc, #184]	; (800f0d8 <tcp_receive+0xd00>)
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f022:	68db      	ldr	r3, [r3, #12]
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	1ad3      	subs	r3, r2, r3
 800f028:	2b00      	cmp	r3, #0
 800f02a:	da57      	bge.n	800f0dc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f02c:	4829      	ldr	r0, [pc, #164]	; (800f0d4 <tcp_receive+0xcfc>)
 800f02e:	f7fd fb81 	bl	800c734 <tcp_seg_copy>
 800f032:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f034:	69bb      	ldr	r3, [r7, #24]
 800f036:	2b00      	cmp	r3, #0
 800f038:	f000 8129 	beq.w	800f28e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	69ba      	ldr	r2, [r7, #24]
 800f040:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f042:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f044:	69b8      	ldr	r0, [r7, #24]
 800f046:	f7ff f8c3 	bl	800e1d0 <tcp_oos_insert_segment>
                  }
                  break;
 800f04a:	e120      	b.n	800f28e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f04c:	4b22      	ldr	r3, [pc, #136]	; (800f0d8 <tcp_receive+0xd00>)
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f052:	68db      	ldr	r3, [r3, #12]
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	1ad3      	subs	r3, r2, r3
 800f058:	3b01      	subs	r3, #1
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	db3e      	blt.n	800f0dc <tcp_receive+0xd04>
 800f05e:	4b1e      	ldr	r3, [pc, #120]	; (800f0d8 <tcp_receive+0xd00>)
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f064:	68db      	ldr	r3, [r3, #12]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	1ad3      	subs	r3, r2, r3
 800f06a:	3301      	adds	r3, #1
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	dc35      	bgt.n	800f0dc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f070:	4818      	ldr	r0, [pc, #96]	; (800f0d4 <tcp_receive+0xcfc>)
 800f072:	f7fd fb5f 	bl	800c734 <tcp_seg_copy>
 800f076:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	f000 8109 	beq.w	800f292 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f088:	8912      	ldrh	r2, [r2, #8]
 800f08a:	441a      	add	r2, r3
 800f08c:	4b12      	ldr	r3, [pc, #72]	; (800f0d8 <tcp_receive+0xd00>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	2b00      	cmp	r3, #0
 800f094:	dd12      	ble.n	800f0bc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f096:	4b10      	ldr	r3, [pc, #64]	; (800f0d8 <tcp_receive+0xd00>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	b29a      	uxth	r2, r3
 800f09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	1ad3      	subs	r3, r2, r3
 800f0a6:	b29a      	uxth	r2, r3
 800f0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0aa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ae:	685a      	ldr	r2, [r3, #4]
 800f0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0b2:	891b      	ldrh	r3, [r3, #8]
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	4610      	mov	r0, r2
 800f0b8:	f7fb ff1a 	bl	800aef0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0be:	69fa      	ldr	r2, [r7, #28]
 800f0c0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f0c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f0c4:	69f8      	ldr	r0, [r7, #28]
 800f0c6:	f7ff f883 	bl	800e1d0 <tcp_oos_insert_segment>
                  }
                  break;
 800f0ca:	e0e2      	b.n	800f292 <tcp_receive+0xeba>
 800f0cc:	20000108 	.word	0x20000108
 800f0d0:	20000105 	.word	0x20000105
 800f0d4:	200000d8 	.word	0x200000d8
 800f0d8:	200000f8 	.word	0x200000f8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0de:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	f040 80c6 	bne.w	800f276 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f0ea:	4b80      	ldr	r3, [pc, #512]	; (800f2ec <tcp_receive+0xf14>)
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f0:	68db      	ldr	r3, [r3, #12]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	f340 80bd 	ble.w	800f276 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	899b      	ldrh	r3, [r3, #12]
 800f102:	b29b      	uxth	r3, r3
 800f104:	4618      	mov	r0, r3
 800f106:	f7fa fdd5 	bl	8009cb4 <lwip_htons>
 800f10a:	4603      	mov	r3, r0
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	f003 0301 	and.w	r3, r3, #1
 800f112:	2b00      	cmp	r3, #0
 800f114:	f040 80bf 	bne.w	800f296 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f118:	4875      	ldr	r0, [pc, #468]	; (800f2f0 <tcp_receive+0xf18>)
 800f11a:	f7fd fb0b 	bl	800c734 <tcp_seg_copy>
 800f11e:	4602      	mov	r2, r0
 800f120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f122:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	f000 80b6 	beq.w	800f29a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f130:	68db      	ldr	r3, [r3, #12]
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f136:	8912      	ldrh	r2, [r2, #8]
 800f138:	441a      	add	r2, r3
 800f13a:	4b6c      	ldr	r3, [pc, #432]	; (800f2ec <tcp_receive+0xf14>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	1ad3      	subs	r3, r2, r3
 800f140:	2b00      	cmp	r3, #0
 800f142:	dd12      	ble.n	800f16a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f144:	4b69      	ldr	r3, [pc, #420]	; (800f2ec <tcp_receive+0xf14>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	b29a      	uxth	r2, r3
 800f14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	b29b      	uxth	r3, r3
 800f152:	1ad3      	subs	r3, r2, r3
 800f154:	b29a      	uxth	r2, r3
 800f156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f158:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15c:	685a      	ldr	r2, [r3, #4]
 800f15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f160:	891b      	ldrh	r3, [r3, #8]
 800f162:	4619      	mov	r1, r3
 800f164:	4610      	mov	r0, r2
 800f166:	f7fb fec3 	bl	800aef0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f16a:	4b62      	ldr	r3, [pc, #392]	; (800f2f4 <tcp_receive+0xf1c>)
 800f16c:	881b      	ldrh	r3, [r3, #0]
 800f16e:	461a      	mov	r2, r3
 800f170:	4b5e      	ldr	r3, [pc, #376]	; (800f2ec <tcp_receive+0xf14>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	441a      	add	r2, r3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f17a:	6879      	ldr	r1, [r7, #4]
 800f17c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f17e:	440b      	add	r3, r1
 800f180:	1ad3      	subs	r3, r2, r3
 800f182:	2b00      	cmp	r3, #0
 800f184:	f340 8089 	ble.w	800f29a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	68db      	ldr	r3, [r3, #12]
 800f18e:	899b      	ldrh	r3, [r3, #12]
 800f190:	b29b      	uxth	r3, r3
 800f192:	4618      	mov	r0, r3
 800f194:	f7fa fd8e 	bl	8009cb4 <lwip_htons>
 800f198:	4603      	mov	r3, r0
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	f003 0301 	and.w	r3, r3, #1
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d022      	beq.n	800f1ea <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	68db      	ldr	r3, [r3, #12]
 800f1aa:	899b      	ldrh	r3, [r3, #12]
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	b21b      	sxth	r3, r3
 800f1b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f1b4:	b21c      	sxth	r4, r3
 800f1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	899b      	ldrh	r3, [r3, #12]
 800f1be:	b29b      	uxth	r3, r3
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7fa fd77 	bl	8009cb4 <lwip_htons>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	b29b      	uxth	r3, r3
 800f1cc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f1d0:	b29b      	uxth	r3, r3
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7fa fd6e 	bl	8009cb4 <lwip_htons>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	b21b      	sxth	r3, r3
 800f1dc:	4323      	orrs	r3, r4
 800f1de:	b21a      	sxth	r2, r3
 800f1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	b292      	uxth	r2, r2
 800f1e8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ee:	b29a      	uxth	r2, r3
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1f4:	4413      	add	r3, r2
 800f1f6:	b299      	uxth	r1, r3
 800f1f8:	4b3c      	ldr	r3, [pc, #240]	; (800f2ec <tcp_receive+0xf14>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	b29a      	uxth	r2, r3
 800f1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	1a8a      	subs	r2, r1, r2
 800f204:	b292      	uxth	r2, r2
 800f206:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	685a      	ldr	r2, [r3, #4]
 800f20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	891b      	ldrh	r3, [r3, #8]
 800f214:	4619      	mov	r1, r3
 800f216:	4610      	mov	r0, r2
 800f218:	f7fb fe6a 	bl	800aef0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	891c      	ldrh	r4, [r3, #8]
 800f222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	899b      	ldrh	r3, [r3, #12]
 800f22a:	b29b      	uxth	r3, r3
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7fa fd41 	bl	8009cb4 <lwip_htons>
 800f232:	4603      	mov	r3, r0
 800f234:	b2db      	uxtb	r3, r3
 800f236:	f003 0303 	and.w	r3, r3, #3
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d001      	beq.n	800f242 <tcp_receive+0xe6a>
 800f23e:	2301      	movs	r3, #1
 800f240:	e000      	b.n	800f244 <tcp_receive+0xe6c>
 800f242:	2300      	movs	r3, #0
 800f244:	4423      	add	r3, r4
 800f246:	b29a      	uxth	r2, r3
 800f248:	4b2a      	ldr	r3, [pc, #168]	; (800f2f4 <tcp_receive+0xf1c>)
 800f24a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f24c:	4b29      	ldr	r3, [pc, #164]	; (800f2f4 <tcp_receive+0xf1c>)
 800f24e:	881b      	ldrh	r3, [r3, #0]
 800f250:	461a      	mov	r2, r3
 800f252:	4b26      	ldr	r3, [pc, #152]	; (800f2ec <tcp_receive+0xf14>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	441a      	add	r2, r3
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f25c:	6879      	ldr	r1, [r7, #4]
 800f25e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f260:	440b      	add	r3, r1
 800f262:	429a      	cmp	r2, r3
 800f264:	d019      	beq.n	800f29a <tcp_receive+0xec2>
 800f266:	4b24      	ldr	r3, [pc, #144]	; (800f2f8 <tcp_receive+0xf20>)
 800f268:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f26c:	4923      	ldr	r1, [pc, #140]	; (800f2fc <tcp_receive+0xf24>)
 800f26e:	4824      	ldr	r0, [pc, #144]	; (800f300 <tcp_receive+0xf28>)
 800f270:	f004 fc32 	bl	8013ad8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f274:	e011      	b.n	800f29a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f27e:	2b00      	cmp	r3, #0
 800f280:	f47f aea4 	bne.w	800efcc <tcp_receive+0xbf4>
 800f284:	e00a      	b.n	800f29c <tcp_receive+0xec4>
                break;
 800f286:	bf00      	nop
 800f288:	e008      	b.n	800f29c <tcp_receive+0xec4>
                break;
 800f28a:	bf00      	nop
 800f28c:	e006      	b.n	800f29c <tcp_receive+0xec4>
                  break;
 800f28e:	bf00      	nop
 800f290:	e004      	b.n	800f29c <tcp_receive+0xec4>
                  break;
 800f292:	bf00      	nop
 800f294:	e002      	b.n	800f29c <tcp_receive+0xec4>
                  break;
 800f296:	bf00      	nop
 800f298:	e000      	b.n	800f29c <tcp_receive+0xec4>
                break;
 800f29a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f001 fa33 	bl	8010708 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f2a2:	e003      	b.n	800f2ac <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f001 fa2f 	bl	8010708 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f2aa:	e01a      	b.n	800f2e2 <tcp_receive+0xf0a>
 800f2ac:	e019      	b.n	800f2e2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f2ae:	4b0f      	ldr	r3, [pc, #60]	; (800f2ec <tcp_receive+0xf14>)
 800f2b0:	681a      	ldr	r2, [r3, #0]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2b6:	1ad3      	subs	r3, r2, r3
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	db0a      	blt.n	800f2d2 <tcp_receive+0xefa>
 800f2bc:	4b0b      	ldr	r3, [pc, #44]	; (800f2ec <tcp_receive+0xf14>)
 800f2be:	681a      	ldr	r2, [r3, #0]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c4:	6879      	ldr	r1, [r7, #4]
 800f2c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f2c8:	440b      	add	r3, r1
 800f2ca:	1ad3      	subs	r3, r2, r3
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	dd07      	ble.n	800f2e2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	8b5b      	ldrh	r3, [r3, #26]
 800f2d6:	f043 0302 	orr.w	r3, r3, #2
 800f2da:	b29a      	uxth	r2, r3
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f2e0:	e7ff      	b.n	800f2e2 <tcp_receive+0xf0a>
 800f2e2:	bf00      	nop
 800f2e4:	3750      	adds	r7, #80	; 0x50
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bdb0      	pop	{r4, r5, r7, pc}
 800f2ea:	bf00      	nop
 800f2ec:	200000f8 	.word	0x200000f8
 800f2f0:	200000d8 	.word	0x200000d8
 800f2f4:	20000102 	.word	0x20000102
 800f2f8:	0801604c 	.word	0x0801604c
 800f2fc:	080163f4 	.word	0x080163f4
 800f300:	08016098 	.word	0x08016098

0800f304 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f30a:	4b15      	ldr	r3, [pc, #84]	; (800f360 <tcp_get_next_optbyte+0x5c>)
 800f30c:	881b      	ldrh	r3, [r3, #0]
 800f30e:	1c5a      	adds	r2, r3, #1
 800f310:	b291      	uxth	r1, r2
 800f312:	4a13      	ldr	r2, [pc, #76]	; (800f360 <tcp_get_next_optbyte+0x5c>)
 800f314:	8011      	strh	r1, [r2, #0]
 800f316:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f318:	4b12      	ldr	r3, [pc, #72]	; (800f364 <tcp_get_next_optbyte+0x60>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d004      	beq.n	800f32a <tcp_get_next_optbyte+0x26>
 800f320:	4b11      	ldr	r3, [pc, #68]	; (800f368 <tcp_get_next_optbyte+0x64>)
 800f322:	881b      	ldrh	r3, [r3, #0]
 800f324:	88fa      	ldrh	r2, [r7, #6]
 800f326:	429a      	cmp	r2, r3
 800f328:	d208      	bcs.n	800f33c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f32a:	4b10      	ldr	r3, [pc, #64]	; (800f36c <tcp_get_next_optbyte+0x68>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	3314      	adds	r3, #20
 800f330:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f332:	88fb      	ldrh	r3, [r7, #6]
 800f334:	683a      	ldr	r2, [r7, #0]
 800f336:	4413      	add	r3, r2
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	e00b      	b.n	800f354 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f33c:	88fb      	ldrh	r3, [r7, #6]
 800f33e:	b2da      	uxtb	r2, r3
 800f340:	4b09      	ldr	r3, [pc, #36]	; (800f368 <tcp_get_next_optbyte+0x64>)
 800f342:	881b      	ldrh	r3, [r3, #0]
 800f344:	b2db      	uxtb	r3, r3
 800f346:	1ad3      	subs	r3, r2, r3
 800f348:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f34a:	4b06      	ldr	r3, [pc, #24]	; (800f364 <tcp_get_next_optbyte+0x60>)
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	797b      	ldrb	r3, [r7, #5]
 800f350:	4413      	add	r3, r2
 800f352:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f354:	4618      	mov	r0, r3
 800f356:	370c      	adds	r7, #12
 800f358:	46bd      	mov	sp, r7
 800f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35e:	4770      	bx	lr
 800f360:	200000f4 	.word	0x200000f4
 800f364:	200000f0 	.word	0x200000f0
 800f368:	200000ee 	.word	0x200000ee
 800f36c:	200000e8 	.word	0x200000e8

0800f370 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d106      	bne.n	800f38c <tcp_parseopt+0x1c>
 800f37e:	4b32      	ldr	r3, [pc, #200]	; (800f448 <tcp_parseopt+0xd8>)
 800f380:	f240 727d 	movw	r2, #1917	; 0x77d
 800f384:	4931      	ldr	r1, [pc, #196]	; (800f44c <tcp_parseopt+0xdc>)
 800f386:	4832      	ldr	r0, [pc, #200]	; (800f450 <tcp_parseopt+0xe0>)
 800f388:	f004 fba6 	bl	8013ad8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f38c:	4b31      	ldr	r3, [pc, #196]	; (800f454 <tcp_parseopt+0xe4>)
 800f38e:	881b      	ldrh	r3, [r3, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d055      	beq.n	800f440 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f394:	4b30      	ldr	r3, [pc, #192]	; (800f458 <tcp_parseopt+0xe8>)
 800f396:	2200      	movs	r2, #0
 800f398:	801a      	strh	r2, [r3, #0]
 800f39a:	e045      	b.n	800f428 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f39c:	f7ff ffb2 	bl	800f304 <tcp_get_next_optbyte>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f3a4:	7bfb      	ldrb	r3, [r7, #15]
 800f3a6:	2b02      	cmp	r3, #2
 800f3a8:	d006      	beq.n	800f3b8 <tcp_parseopt+0x48>
 800f3aa:	2b02      	cmp	r3, #2
 800f3ac:	dc2b      	bgt.n	800f406 <tcp_parseopt+0x96>
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d041      	beq.n	800f436 <tcp_parseopt+0xc6>
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d127      	bne.n	800f406 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f3b6:	e037      	b.n	800f428 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f3b8:	f7ff ffa4 	bl	800f304 <tcp_get_next_optbyte>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	2b04      	cmp	r3, #4
 800f3c0:	d13b      	bne.n	800f43a <tcp_parseopt+0xca>
 800f3c2:	4b25      	ldr	r3, [pc, #148]	; (800f458 <tcp_parseopt+0xe8>)
 800f3c4:	881b      	ldrh	r3, [r3, #0]
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	4a22      	ldr	r2, [pc, #136]	; (800f454 <tcp_parseopt+0xe4>)
 800f3ca:	8812      	ldrh	r2, [r2, #0]
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	da34      	bge.n	800f43a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f3d0:	f7ff ff98 	bl	800f304 <tcp_get_next_optbyte>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	021b      	lsls	r3, r3, #8
 800f3da:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f3dc:	f7ff ff92 	bl	800f304 <tcp_get_next_optbyte>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	b29a      	uxth	r2, r3
 800f3e4:	89bb      	ldrh	r3, [r7, #12]
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f3ea:	89bb      	ldrh	r3, [r7, #12]
 800f3ec:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f3f0:	d804      	bhi.n	800f3fc <tcp_parseopt+0x8c>
 800f3f2:	89bb      	ldrh	r3, [r7, #12]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d001      	beq.n	800f3fc <tcp_parseopt+0x8c>
 800f3f8:	89ba      	ldrh	r2, [r7, #12]
 800f3fa:	e001      	b.n	800f400 <tcp_parseopt+0x90>
 800f3fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f404:	e010      	b.n	800f428 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f406:	f7ff ff7d 	bl	800f304 <tcp_get_next_optbyte>
 800f40a:	4603      	mov	r3, r0
 800f40c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f40e:	7afb      	ldrb	r3, [r7, #11]
 800f410:	2b01      	cmp	r3, #1
 800f412:	d914      	bls.n	800f43e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f414:	7afb      	ldrb	r3, [r7, #11]
 800f416:	b29a      	uxth	r2, r3
 800f418:	4b0f      	ldr	r3, [pc, #60]	; (800f458 <tcp_parseopt+0xe8>)
 800f41a:	881b      	ldrh	r3, [r3, #0]
 800f41c:	4413      	add	r3, r2
 800f41e:	b29b      	uxth	r3, r3
 800f420:	3b02      	subs	r3, #2
 800f422:	b29a      	uxth	r2, r3
 800f424:	4b0c      	ldr	r3, [pc, #48]	; (800f458 <tcp_parseopt+0xe8>)
 800f426:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f428:	4b0b      	ldr	r3, [pc, #44]	; (800f458 <tcp_parseopt+0xe8>)
 800f42a:	881a      	ldrh	r2, [r3, #0]
 800f42c:	4b09      	ldr	r3, [pc, #36]	; (800f454 <tcp_parseopt+0xe4>)
 800f42e:	881b      	ldrh	r3, [r3, #0]
 800f430:	429a      	cmp	r2, r3
 800f432:	d3b3      	bcc.n	800f39c <tcp_parseopt+0x2c>
 800f434:	e004      	b.n	800f440 <tcp_parseopt+0xd0>
          return;
 800f436:	bf00      	nop
 800f438:	e002      	b.n	800f440 <tcp_parseopt+0xd0>
            return;
 800f43a:	bf00      	nop
 800f43c:	e000      	b.n	800f440 <tcp_parseopt+0xd0>
            return;
 800f43e:	bf00      	nop
      }
    }
  }
}
 800f440:	3710      	adds	r7, #16
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
 800f446:	bf00      	nop
 800f448:	0801604c 	.word	0x0801604c
 800f44c:	080164b0 	.word	0x080164b0
 800f450:	08016098 	.word	0x08016098
 800f454:	200000ec 	.word	0x200000ec
 800f458:	200000f4 	.word	0x200000f4

0800f45c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f45c:	b480      	push	{r7}
 800f45e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f460:	4b05      	ldr	r3, [pc, #20]	; (800f478 <tcp_trigger_input_pcb_close+0x1c>)
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	f043 0310 	orr.w	r3, r3, #16
 800f468:	b2da      	uxtb	r2, r3
 800f46a:	4b03      	ldr	r3, [pc, #12]	; (800f478 <tcp_trigger_input_pcb_close+0x1c>)
 800f46c:	701a      	strb	r2, [r3, #0]
}
 800f46e:	bf00      	nop
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr
 800f478:	20000105 	.word	0x20000105

0800f47c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b084      	sub	sp, #16
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00a      	beq.n	800f4a4 <tcp_route+0x28>
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	7a1b      	ldrb	r3, [r3, #8]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d006      	beq.n	800f4a4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	7a1b      	ldrb	r3, [r3, #8]
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7fb fb6e 	bl	800ab7c <netif_get_by_index>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	e003      	b.n	800f4ac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f003 f8e9 	bl	801267c <ip4_route>
 800f4aa:	4603      	mov	r3, r0
  }
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3710      	adds	r7, #16
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f4b4:	b590      	push	{r4, r7, lr}
 800f4b6:	b087      	sub	sp, #28
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	60f8      	str	r0, [r7, #12]
 800f4bc:	60b9      	str	r1, [r7, #8]
 800f4be:	603b      	str	r3, [r7, #0]
 800f4c0:	4613      	mov	r3, r2
 800f4c2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d105      	bne.n	800f4d6 <tcp_create_segment+0x22>
 800f4ca:	4b44      	ldr	r3, [pc, #272]	; (800f5dc <tcp_create_segment+0x128>)
 800f4cc:	22a3      	movs	r2, #163	; 0xa3
 800f4ce:	4944      	ldr	r1, [pc, #272]	; (800f5e0 <tcp_create_segment+0x12c>)
 800f4d0:	4844      	ldr	r0, [pc, #272]	; (800f5e4 <tcp_create_segment+0x130>)
 800f4d2:	f004 fb01 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d105      	bne.n	800f4e8 <tcp_create_segment+0x34>
 800f4dc:	4b3f      	ldr	r3, [pc, #252]	; (800f5dc <tcp_create_segment+0x128>)
 800f4de:	22a4      	movs	r2, #164	; 0xa4
 800f4e0:	4941      	ldr	r1, [pc, #260]	; (800f5e8 <tcp_create_segment+0x134>)
 800f4e2:	4840      	ldr	r0, [pc, #256]	; (800f5e4 <tcp_create_segment+0x130>)
 800f4e4:	f004 faf8 	bl	8013ad8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f4e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	f003 0304 	and.w	r3, r3, #4
 800f4f4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f4f6:	2003      	movs	r0, #3
 800f4f8:	f7fb f842 	bl	800a580 <memp_malloc>
 800f4fc:	6138      	str	r0, [r7, #16]
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d104      	bne.n	800f50e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f504:	68b8      	ldr	r0, [r7, #8]
 800f506:	f7fb fe79 	bl	800b1fc <pbuf_free>
    return NULL;
 800f50a:	2300      	movs	r3, #0
 800f50c:	e061      	b.n	800f5d2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f514:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	2200      	movs	r2, #0
 800f51a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	68ba      	ldr	r2, [r7, #8]
 800f520:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	891a      	ldrh	r2, [r3, #8]
 800f526:	7dfb      	ldrb	r3, [r7, #23]
 800f528:	b29b      	uxth	r3, r3
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d205      	bcs.n	800f53a <tcp_create_segment+0x86>
 800f52e:	4b2b      	ldr	r3, [pc, #172]	; (800f5dc <tcp_create_segment+0x128>)
 800f530:	22b0      	movs	r2, #176	; 0xb0
 800f532:	492e      	ldr	r1, [pc, #184]	; (800f5ec <tcp_create_segment+0x138>)
 800f534:	482b      	ldr	r0, [pc, #172]	; (800f5e4 <tcp_create_segment+0x130>)
 800f536:	f004 facf 	bl	8013ad8 <iprintf>
  seg->len = p->tot_len - optlen;
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	891a      	ldrh	r2, [r3, #8]
 800f53e:	7dfb      	ldrb	r3, [r7, #23]
 800f540:	b29b      	uxth	r3, r3
 800f542:	1ad3      	subs	r3, r2, r3
 800f544:	b29a      	uxth	r2, r3
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f54a:	2114      	movs	r1, #20
 800f54c:	68b8      	ldr	r0, [r7, #8]
 800f54e:	f7fb fdbf 	bl	800b0d0 <pbuf_add_header>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d004      	beq.n	800f562 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f558:	6938      	ldr	r0, [r7, #16]
 800f55a:	f7fd f8d2 	bl	800c702 <tcp_seg_free>
    return NULL;
 800f55e:	2300      	movs	r3, #0
 800f560:	e037      	b.n	800f5d2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	685a      	ldr	r2, [r3, #4]
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	8ada      	ldrh	r2, [r3, #22]
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	68dc      	ldr	r4, [r3, #12]
 800f574:	4610      	mov	r0, r2
 800f576:	f7fa fb9d 	bl	8009cb4 <lwip_htons>
 800f57a:	4603      	mov	r3, r0
 800f57c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	8b1a      	ldrh	r2, [r3, #24]
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	68dc      	ldr	r4, [r3, #12]
 800f586:	4610      	mov	r0, r2
 800f588:	f7fa fb94 	bl	8009cb4 <lwip_htons>
 800f58c:	4603      	mov	r3, r0
 800f58e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	68dc      	ldr	r4, [r3, #12]
 800f594:	6838      	ldr	r0, [r7, #0]
 800f596:	f7fa fba2 	bl	8009cde <lwip_htonl>
 800f59a:	4603      	mov	r3, r0
 800f59c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f59e:	7dfb      	ldrb	r3, [r7, #23]
 800f5a0:	089b      	lsrs	r3, r3, #2
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	3305      	adds	r3, #5
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	031b      	lsls	r3, r3, #12
 800f5ac:	b29a      	uxth	r2, r3
 800f5ae:	79fb      	ldrb	r3, [r7, #7]
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	4313      	orrs	r3, r2
 800f5b4:	b29a      	uxth	r2, r3
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	68dc      	ldr	r4, [r3, #12]
 800f5ba:	4610      	mov	r0, r2
 800f5bc:	f7fa fb7a 	bl	8009cb4 <lwip_htons>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	68db      	ldr	r3, [r3, #12]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	749a      	strb	r2, [r3, #18]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	74da      	strb	r2, [r3, #19]
  return seg;
 800f5d0:	693b      	ldr	r3, [r7, #16]
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	371c      	adds	r7, #28
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd90      	pop	{r4, r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	080164cc 	.word	0x080164cc
 800f5e0:	08016500 	.word	0x08016500
 800f5e4:	08016520 	.word	0x08016520
 800f5e8:	08016548 	.word	0x08016548
 800f5ec:	0801656c 	.word	0x0801656c

0800f5f0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f5f0:	b590      	push	{r4, r7, lr}
 800f5f2:	b08b      	sub	sp, #44	; 0x2c
 800f5f4:	af02      	add	r7, sp, #8
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	460b      	mov	r3, r1
 800f5fa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	61fb      	str	r3, [r7, #28]
 800f600:	2300      	movs	r3, #0
 800f602:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f604:	2300      	movs	r3, #0
 800f606:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d106      	bne.n	800f61c <tcp_split_unsent_seg+0x2c>
 800f60e:	4b95      	ldr	r3, [pc, #596]	; (800f864 <tcp_split_unsent_seg+0x274>)
 800f610:	f240 324b 	movw	r2, #843	; 0x34b
 800f614:	4994      	ldr	r1, [pc, #592]	; (800f868 <tcp_split_unsent_seg+0x278>)
 800f616:	4895      	ldr	r0, [pc, #596]	; (800f86c <tcp_split_unsent_seg+0x27c>)
 800f618:	f004 fa5e 	bl	8013ad8 <iprintf>

  useg = pcb->unsent;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f620:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d102      	bne.n	800f62e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f628:	f04f 33ff 	mov.w	r3, #4294967295
 800f62c:	e116      	b.n	800f85c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f62e:	887b      	ldrh	r3, [r7, #2]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d109      	bne.n	800f648 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f634:	4b8b      	ldr	r3, [pc, #556]	; (800f864 <tcp_split_unsent_seg+0x274>)
 800f636:	f240 3253 	movw	r2, #851	; 0x353
 800f63a:	498d      	ldr	r1, [pc, #564]	; (800f870 <tcp_split_unsent_seg+0x280>)
 800f63c:	488b      	ldr	r0, [pc, #556]	; (800f86c <tcp_split_unsent_seg+0x27c>)
 800f63e:	f004 fa4b 	bl	8013ad8 <iprintf>
    return ERR_VAL;
 800f642:	f06f 0305 	mvn.w	r3, #5
 800f646:	e109      	b.n	800f85c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	891b      	ldrh	r3, [r3, #8]
 800f64c:	887a      	ldrh	r2, [r7, #2]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d301      	bcc.n	800f656 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f652:	2300      	movs	r3, #0
 800f654:	e102      	b.n	800f85c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f65a:	887a      	ldrh	r2, [r7, #2]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d906      	bls.n	800f66e <tcp_split_unsent_seg+0x7e>
 800f660:	4b80      	ldr	r3, [pc, #512]	; (800f864 <tcp_split_unsent_seg+0x274>)
 800f662:	f240 325b 	movw	r2, #859	; 0x35b
 800f666:	4983      	ldr	r1, [pc, #524]	; (800f874 <tcp_split_unsent_seg+0x284>)
 800f668:	4880      	ldr	r0, [pc, #512]	; (800f86c <tcp_split_unsent_seg+0x27c>)
 800f66a:	f004 fa35 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	891b      	ldrh	r3, [r3, #8]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d106      	bne.n	800f684 <tcp_split_unsent_seg+0x94>
 800f676:	4b7b      	ldr	r3, [pc, #492]	; (800f864 <tcp_split_unsent_seg+0x274>)
 800f678:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f67c:	497e      	ldr	r1, [pc, #504]	; (800f878 <tcp_split_unsent_seg+0x288>)
 800f67e:	487b      	ldr	r0, [pc, #492]	; (800f86c <tcp_split_unsent_seg+0x27c>)
 800f680:	f004 fa2a 	bl	8013ad8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	7a9b      	ldrb	r3, [r3, #10]
 800f688:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f68a:	7bfb      	ldrb	r3, [r7, #15]
 800f68c:	009b      	lsls	r3, r3, #2
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	f003 0304 	and.w	r3, r3, #4
 800f694:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	891a      	ldrh	r2, [r3, #8]
 800f69a:	887b      	ldrh	r3, [r7, #2]
 800f69c:	1ad3      	subs	r3, r2, r3
 800f69e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f6a0:	7bbb      	ldrb	r3, [r7, #14]
 800f6a2:	b29a      	uxth	r2, r3
 800f6a4:	89bb      	ldrh	r3, [r7, #12]
 800f6a6:	4413      	add	r3, r2
 800f6a8:	b29b      	uxth	r3, r3
 800f6aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	2036      	movs	r0, #54	; 0x36
 800f6b2:	f7fb fabf 	bl	800ac34 <pbuf_alloc>
 800f6b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	f000 80b7 	beq.w	800f82e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	891a      	ldrh	r2, [r3, #8]
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	891b      	ldrh	r3, [r3, #8]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	b29a      	uxth	r2, r3
 800f6ce:	887b      	ldrh	r3, [r7, #2]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	6858      	ldr	r0, [r3, #4]
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	685a      	ldr	r2, [r3, #4]
 800f6dc:	7bbb      	ldrb	r3, [r7, #14]
 800f6de:	18d1      	adds	r1, r2, r3
 800f6e0:	897b      	ldrh	r3, [r7, #10]
 800f6e2:	89ba      	ldrh	r2, [r7, #12]
 800f6e4:	f7fb ff84 	bl	800b5f0 <pbuf_copy_partial>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	89bb      	ldrh	r3, [r7, #12]
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	f040 809f 	bne.w	800f832 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	68db      	ldr	r3, [r3, #12]
 800f6f8:	899b      	ldrh	r3, [r3, #12]
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7fa fad9 	bl	8009cb4 <lwip_htons>
 800f702:	4603      	mov	r3, r0
 800f704:	b2db      	uxtb	r3, r3
 800f706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f70a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f70c:	2300      	movs	r3, #0
 800f70e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f710:	7efb      	ldrb	r3, [r7, #27]
 800f712:	f003 0308 	and.w	r3, r3, #8
 800f716:	2b00      	cmp	r3, #0
 800f718:	d007      	beq.n	800f72a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f71a:	7efb      	ldrb	r3, [r7, #27]
 800f71c:	f023 0308 	bic.w	r3, r3, #8
 800f720:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f722:	7ebb      	ldrb	r3, [r7, #26]
 800f724:	f043 0308 	orr.w	r3, r3, #8
 800f728:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f72a:	7efb      	ldrb	r3, [r7, #27]
 800f72c:	f003 0301 	and.w	r3, r3, #1
 800f730:	2b00      	cmp	r3, #0
 800f732:	d007      	beq.n	800f744 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f734:	7efb      	ldrb	r3, [r7, #27]
 800f736:	f023 0301 	bic.w	r3, r3, #1
 800f73a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f73c:	7ebb      	ldrb	r3, [r7, #26]
 800f73e:	f043 0301 	orr.w	r3, r3, #1
 800f742:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	68db      	ldr	r3, [r3, #12]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7fa fac7 	bl	8009cde <lwip_htonl>
 800f750:	4602      	mov	r2, r0
 800f752:	887b      	ldrh	r3, [r7, #2]
 800f754:	18d1      	adds	r1, r2, r3
 800f756:	7eba      	ldrb	r2, [r7, #26]
 800f758:	7bfb      	ldrb	r3, [r7, #15]
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	460b      	mov	r3, r1
 800f75e:	6939      	ldr	r1, [r7, #16]
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f7ff fea7 	bl	800f4b4 <tcp_create_segment>
 800f766:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f768:	69fb      	ldr	r3, [r7, #28]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d063      	beq.n	800f836 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	685b      	ldr	r3, [r3, #4]
 800f772:	4618      	mov	r0, r3
 800f774:	f7fb fdca 	bl	800b30c <pbuf_clen>
 800f778:	4603      	mov	r3, r0
 800f77a:	461a      	mov	r2, r3
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f782:	1a9b      	subs	r3, r3, r2
 800f784:	b29a      	uxth	r2, r3
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	6858      	ldr	r0, [r3, #4]
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	685b      	ldr	r3, [r3, #4]
 800f794:	891a      	ldrh	r2, [r3, #8]
 800f796:	89bb      	ldrh	r3, [r7, #12]
 800f798:	1ad3      	subs	r3, r2, r3
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	4619      	mov	r1, r3
 800f79e:	f7fb fba7 	bl	800aef0 <pbuf_realloc>
  useg->len -= remainder;
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	891a      	ldrh	r2, [r3, #8]
 800f7a6:	89bb      	ldrh	r3, [r7, #12]
 800f7a8:	1ad3      	subs	r3, r2, r3
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	899b      	ldrh	r3, [r3, #12]
 800f7b6:	b29c      	uxth	r4, r3
 800f7b8:	7efb      	ldrb	r3, [r7, #27]
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7fa fa79 	bl	8009cb4 <lwip_htons>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	4322      	orrs	r2, r4
 800f7cc:	b292      	uxth	r2, r2
 800f7ce:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7fb fd99 	bl	800b30c <pbuf_clen>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	461a      	mov	r2, r3
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f7e4:	4413      	add	r3, r2
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f7ee:	69fb      	ldr	r3, [r7, #28]
 800f7f0:	685b      	ldr	r3, [r3, #4]
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7fb fd8a 	bl	800b30c <pbuf_clen>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f802:	4413      	add	r3, r2
 800f804:	b29a      	uxth	r2, r3
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	69fa      	ldr	r2, [r7, #28]
 800f818:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f81a:	69fb      	ldr	r3, [r7, #28]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d103      	bne.n	800f82a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2200      	movs	r2, #0
 800f826:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f82a:	2300      	movs	r3, #0
 800f82c:	e016      	b.n	800f85c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f82e:	bf00      	nop
 800f830:	e002      	b.n	800f838 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f832:	bf00      	nop
 800f834:	e000      	b.n	800f838 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f836:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f838:	69fb      	ldr	r3, [r7, #28]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d006      	beq.n	800f84c <tcp_split_unsent_seg+0x25c>
 800f83e:	4b09      	ldr	r3, [pc, #36]	; (800f864 <tcp_split_unsent_seg+0x274>)
 800f840:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f844:	490d      	ldr	r1, [pc, #52]	; (800f87c <tcp_split_unsent_seg+0x28c>)
 800f846:	4809      	ldr	r0, [pc, #36]	; (800f86c <tcp_split_unsent_seg+0x27c>)
 800f848:	f004 f946 	bl	8013ad8 <iprintf>
  if (p != NULL) {
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d002      	beq.n	800f858 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f852:	6938      	ldr	r0, [r7, #16]
 800f854:	f7fb fcd2 	bl	800b1fc <pbuf_free>
  }

  return ERR_MEM;
 800f858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3724      	adds	r7, #36	; 0x24
 800f860:	46bd      	mov	sp, r7
 800f862:	bd90      	pop	{r4, r7, pc}
 800f864:	080164cc 	.word	0x080164cc
 800f868:	08016860 	.word	0x08016860
 800f86c:	08016520 	.word	0x08016520
 800f870:	08016884 	.word	0x08016884
 800f874:	080168a8 	.word	0x080168a8
 800f878:	080168b8 	.word	0x080168b8
 800f87c:	080168c8 	.word	0x080168c8

0800f880 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f880:	b590      	push	{r4, r7, lr}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d106      	bne.n	800f89c <tcp_send_fin+0x1c>
 800f88e:	4b21      	ldr	r3, [pc, #132]	; (800f914 <tcp_send_fin+0x94>)
 800f890:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f894:	4920      	ldr	r1, [pc, #128]	; (800f918 <tcp_send_fin+0x98>)
 800f896:	4821      	ldr	r0, [pc, #132]	; (800f91c <tcp_send_fin+0x9c>)
 800f898:	f004 f91e 	bl	8013ad8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d02e      	beq.n	800f902 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8a8:	60fb      	str	r3, [r7, #12]
 800f8aa:	e002      	b.n	800f8b2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d1f8      	bne.n	800f8ac <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	68db      	ldr	r3, [r3, #12]
 800f8be:	899b      	ldrh	r3, [r3, #12]
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f7fa f9f6 	bl	8009cb4 <lwip_htons>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	b2db      	uxtb	r3, r3
 800f8cc:	f003 0307 	and.w	r3, r3, #7
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d116      	bne.n	800f902 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	68db      	ldr	r3, [r3, #12]
 800f8d8:	899b      	ldrh	r3, [r3, #12]
 800f8da:	b29c      	uxth	r4, r3
 800f8dc:	2001      	movs	r0, #1
 800f8de:	f7fa f9e9 	bl	8009cb4 <lwip_htons>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	68db      	ldr	r3, [r3, #12]
 800f8ea:	4322      	orrs	r2, r4
 800f8ec:	b292      	uxth	r2, r2
 800f8ee:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	8b5b      	ldrh	r3, [r3, #26]
 800f8f4:	f043 0320 	orr.w	r3, r3, #32
 800f8f8:	b29a      	uxth	r2, r3
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f8fe:	2300      	movs	r3, #0
 800f900:	e004      	b.n	800f90c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f902:	2101      	movs	r1, #1
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f000 f80b 	bl	800f920 <tcp_enqueue_flags>
 800f90a:	4603      	mov	r3, r0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3714      	adds	r7, #20
 800f910:	46bd      	mov	sp, r7
 800f912:	bd90      	pop	{r4, r7, pc}
 800f914:	080164cc 	.word	0x080164cc
 800f918:	080168d4 	.word	0x080168d4
 800f91c:	08016520 	.word	0x08016520

0800f920 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b08a      	sub	sp, #40	; 0x28
 800f924:	af02      	add	r7, sp, #8
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	460b      	mov	r3, r1
 800f92a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f92c:	2300      	movs	r3, #0
 800f92e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f930:	2300      	movs	r3, #0
 800f932:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f934:	78fb      	ldrb	r3, [r7, #3]
 800f936:	f003 0303 	and.w	r3, r3, #3
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d106      	bne.n	800f94c <tcp_enqueue_flags+0x2c>
 800f93e:	4b67      	ldr	r3, [pc, #412]	; (800fadc <tcp_enqueue_flags+0x1bc>)
 800f940:	f240 4211 	movw	r2, #1041	; 0x411
 800f944:	4966      	ldr	r1, [pc, #408]	; (800fae0 <tcp_enqueue_flags+0x1c0>)
 800f946:	4867      	ldr	r0, [pc, #412]	; (800fae4 <tcp_enqueue_flags+0x1c4>)
 800f948:	f004 f8c6 	bl	8013ad8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d106      	bne.n	800f960 <tcp_enqueue_flags+0x40>
 800f952:	4b62      	ldr	r3, [pc, #392]	; (800fadc <tcp_enqueue_flags+0x1bc>)
 800f954:	f240 4213 	movw	r2, #1043	; 0x413
 800f958:	4963      	ldr	r1, [pc, #396]	; (800fae8 <tcp_enqueue_flags+0x1c8>)
 800f95a:	4862      	ldr	r0, [pc, #392]	; (800fae4 <tcp_enqueue_flags+0x1c4>)
 800f95c:	f004 f8bc 	bl	8013ad8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f960:	78fb      	ldrb	r3, [r7, #3]
 800f962:	f003 0302 	and.w	r3, r3, #2
 800f966:	2b00      	cmp	r3, #0
 800f968:	d001      	beq.n	800f96e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f96a:	2301      	movs	r3, #1
 800f96c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f96e:	7ffb      	ldrb	r3, [r7, #31]
 800f970:	009b      	lsls	r3, r3, #2
 800f972:	b2db      	uxtb	r3, r3
 800f974:	f003 0304 	and.w	r3, r3, #4
 800f978:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f97a:	7dfb      	ldrb	r3, [r7, #23]
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f982:	4619      	mov	r1, r3
 800f984:	2036      	movs	r0, #54	; 0x36
 800f986:	f7fb f955 	bl	800ac34 <pbuf_alloc>
 800f98a:	6138      	str	r0, [r7, #16]
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d109      	bne.n	800f9a6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	8b5b      	ldrh	r3, [r3, #26]
 800f996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f99a:	b29a      	uxth	r2, r3
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9a4:	e095      	b.n	800fad2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	895a      	ldrh	r2, [r3, #10]
 800f9aa:	7dfb      	ldrb	r3, [r7, #23]
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d206      	bcs.n	800f9c0 <tcp_enqueue_flags+0xa0>
 800f9b2:	4b4a      	ldr	r3, [pc, #296]	; (800fadc <tcp_enqueue_flags+0x1bc>)
 800f9b4:	f240 4239 	movw	r2, #1081	; 0x439
 800f9b8:	494c      	ldr	r1, [pc, #304]	; (800faec <tcp_enqueue_flags+0x1cc>)
 800f9ba:	484a      	ldr	r0, [pc, #296]	; (800fae4 <tcp_enqueue_flags+0x1c4>)
 800f9bc:	f004 f88c 	bl	8013ad8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f9c4:	78fa      	ldrb	r2, [r7, #3]
 800f9c6:	7ffb      	ldrb	r3, [r7, #31]
 800f9c8:	9300      	str	r3, [sp, #0]
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	6939      	ldr	r1, [r7, #16]
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f7ff fd70 	bl	800f4b4 <tcp_create_segment>
 800f9d4:	60f8      	str	r0, [r7, #12]
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d109      	bne.n	800f9f0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	8b5b      	ldrh	r3, [r3, #26]
 800f9e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f9ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ee:	e070      	b.n	800fad2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	68db      	ldr	r3, [r3, #12]
 800f9f4:	f003 0303 	and.w	r3, r3, #3
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d006      	beq.n	800fa0a <tcp_enqueue_flags+0xea>
 800f9fc:	4b37      	ldr	r3, [pc, #220]	; (800fadc <tcp_enqueue_flags+0x1bc>)
 800f9fe:	f240 4242 	movw	r2, #1090	; 0x442
 800fa02:	493b      	ldr	r1, [pc, #236]	; (800faf0 <tcp_enqueue_flags+0x1d0>)
 800fa04:	4837      	ldr	r0, [pc, #220]	; (800fae4 <tcp_enqueue_flags+0x1c4>)
 800fa06:	f004 f867 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	891b      	ldrh	r3, [r3, #8]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d006      	beq.n	800fa20 <tcp_enqueue_flags+0x100>
 800fa12:	4b32      	ldr	r3, [pc, #200]	; (800fadc <tcp_enqueue_flags+0x1bc>)
 800fa14:	f240 4243 	movw	r2, #1091	; 0x443
 800fa18:	4936      	ldr	r1, [pc, #216]	; (800faf4 <tcp_enqueue_flags+0x1d4>)
 800fa1a:	4832      	ldr	r0, [pc, #200]	; (800fae4 <tcp_enqueue_flags+0x1c4>)
 800fa1c:	f004 f85c 	bl	8013ad8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d103      	bne.n	800fa30 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	68fa      	ldr	r2, [r7, #12]
 800fa2c:	66da      	str	r2, [r3, #108]	; 0x6c
 800fa2e:	e00d      	b.n	800fa4c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa34:	61bb      	str	r3, [r7, #24]
 800fa36:	e002      	b.n	800fa3e <tcp_enqueue_flags+0x11e>
 800fa38:	69bb      	ldr	r3, [r7, #24]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	61bb      	str	r3, [r7, #24]
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d1f8      	bne.n	800fa38 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800fa46:	69bb      	ldr	r3, [r7, #24]
 800fa48:	68fa      	ldr	r2, [r7, #12]
 800fa4a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fa54:	78fb      	ldrb	r3, [r7, #3]
 800fa56:	f003 0302 	and.w	r3, r3, #2
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d104      	bne.n	800fa68 <tcp_enqueue_flags+0x148>
 800fa5e:	78fb      	ldrb	r3, [r7, #3]
 800fa60:	f003 0301 	and.w	r3, r3, #1
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d004      	beq.n	800fa72 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa6c:	1c5a      	adds	r2, r3, #1
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fa72:	78fb      	ldrb	r3, [r7, #3]
 800fa74:	f003 0301 	and.w	r3, r3, #1
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d006      	beq.n	800fa8a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	8b5b      	ldrh	r3, [r3, #26]
 800fa80:	f043 0320 	orr.w	r3, r3, #32
 800fa84:	b29a      	uxth	r2, r3
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f7fb fc3c 	bl	800b30c <pbuf_clen>
 800fa94:	4603      	mov	r3, r0
 800fa96:	461a      	mov	r2, r3
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fa9e:	4413      	add	r3, r2
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d00e      	beq.n	800fad0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d10a      	bne.n	800fad0 <tcp_enqueue_flags+0x1b0>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d106      	bne.n	800fad0 <tcp_enqueue_flags+0x1b0>
 800fac2:	4b06      	ldr	r3, [pc, #24]	; (800fadc <tcp_enqueue_flags+0x1bc>)
 800fac4:	f240 4265 	movw	r2, #1125	; 0x465
 800fac8:	490b      	ldr	r1, [pc, #44]	; (800faf8 <tcp_enqueue_flags+0x1d8>)
 800faca:	4806      	ldr	r0, [pc, #24]	; (800fae4 <tcp_enqueue_flags+0x1c4>)
 800facc:	f004 f804 	bl	8013ad8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fad0:	2300      	movs	r3, #0
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3720      	adds	r7, #32
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	080164cc 	.word	0x080164cc
 800fae0:	080168f0 	.word	0x080168f0
 800fae4:	08016520 	.word	0x08016520
 800fae8:	08016948 	.word	0x08016948
 800faec:	08016968 	.word	0x08016968
 800faf0:	080169a4 	.word	0x080169a4
 800faf4:	080169bc 	.word	0x080169bc
 800faf8:	080169e8 	.word	0x080169e8

0800fafc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fafc:	b5b0      	push	{r4, r5, r7, lr}
 800fafe:	b08a      	sub	sp, #40	; 0x28
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d106      	bne.n	800fb18 <tcp_output+0x1c>
 800fb0a:	4b9e      	ldr	r3, [pc, #632]	; (800fd84 <tcp_output+0x288>)
 800fb0c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800fb10:	499d      	ldr	r1, [pc, #628]	; (800fd88 <tcp_output+0x28c>)
 800fb12:	489e      	ldr	r0, [pc, #632]	; (800fd8c <tcp_output+0x290>)
 800fb14:	f003 ffe0 	bl	8013ad8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	7d1b      	ldrb	r3, [r3, #20]
 800fb1c:	2b01      	cmp	r3, #1
 800fb1e:	d106      	bne.n	800fb2e <tcp_output+0x32>
 800fb20:	4b98      	ldr	r3, [pc, #608]	; (800fd84 <tcp_output+0x288>)
 800fb22:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800fb26:	499a      	ldr	r1, [pc, #616]	; (800fd90 <tcp_output+0x294>)
 800fb28:	4898      	ldr	r0, [pc, #608]	; (800fd8c <tcp_output+0x290>)
 800fb2a:	f003 ffd5 	bl	8013ad8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800fb2e:	4b99      	ldr	r3, [pc, #612]	; (800fd94 <tcp_output+0x298>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d101      	bne.n	800fb3c <tcp_output+0x40>
    return ERR_OK;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	e1ce      	b.n	800feda <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	bf28      	it	cs
 800fb4c:	4613      	movcs	r3, r2
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb56:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800fb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d10b      	bne.n	800fb76 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	8b5b      	ldrh	r3, [r3, #26]
 800fb62:	f003 0302 	and.w	r3, r3, #2
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	f000 81aa 	beq.w	800fec0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 fdcb 	bl	8010708 <tcp_send_empty_ack>
 800fb72:	4603      	mov	r3, r0
 800fb74:	e1b1      	b.n	800feda <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800fb76:	6879      	ldr	r1, [r7, #4]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	3304      	adds	r3, #4
 800fb7c:	461a      	mov	r2, r3
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f7ff fc7c 	bl	800f47c <tcp_route>
 800fb84:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d102      	bne.n	800fb92 <tcp_output+0x96>
    return ERR_RTE;
 800fb8c:	f06f 0303 	mvn.w	r3, #3
 800fb90:	e1a3      	b.n	800feda <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d003      	beq.n	800fba0 <tcp_output+0xa4>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d111      	bne.n	800fbc4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d002      	beq.n	800fbac <tcp_output+0xb0>
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	3304      	adds	r3, #4
 800fbaa:	e000      	b.n	800fbae <tcp_output+0xb2>
 800fbac:	2300      	movs	r3, #0
 800fbae:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d102      	bne.n	800fbbc <tcp_output+0xc0>
      return ERR_RTE;
 800fbb6:	f06f 0303 	mvn.w	r3, #3
 800fbba:	e18e      	b.n	800feda <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fbbc:	693b      	ldr	r3, [r7, #16]
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7fa f887 	bl	8009cde <lwip_htonl>
 800fbd0:	4602      	mov	r2, r0
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbd6:	1ad3      	subs	r3, r2, r3
 800fbd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbda:	8912      	ldrh	r2, [r2, #8]
 800fbdc:	4413      	add	r3, r2
 800fbde:	69ba      	ldr	r2, [r7, #24]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d227      	bcs.n	800fc34 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fbea:	461a      	mov	r2, r3
 800fbec:	69bb      	ldr	r3, [r7, #24]
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d114      	bne.n	800fc1c <tcp_output+0x120>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d110      	bne.n	800fc1c <tcp_output+0x120>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d10b      	bne.n	800fc1c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2200      	movs	r2, #0
 800fc08:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2201      	movs	r2, #1
 800fc10:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2200      	movs	r2, #0
 800fc18:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	8b5b      	ldrh	r3, [r3, #26]
 800fc20:	f003 0302 	and.w	r3, r3, #2
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	f000 814d 	beq.w	800fec4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f000 fd6c 	bl	8010708 <tcp_send_empty_ack>
 800fc30:	4603      	mov	r3, r0
 800fc32:	e152      	b.n	800feda <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2200      	movs	r2, #0
 800fc38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc40:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800fc42:	6a3b      	ldr	r3, [r7, #32]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	f000 811c 	beq.w	800fe82 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800fc4a:	e002      	b.n	800fc52 <tcp_output+0x156>
 800fc4c:	6a3b      	ldr	r3, [r7, #32]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	623b      	str	r3, [r7, #32]
 800fc52:	6a3b      	ldr	r3, [r7, #32]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d1f8      	bne.n	800fc4c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800fc5a:	e112      	b.n	800fe82 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800fc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5e:	68db      	ldr	r3, [r3, #12]
 800fc60:	899b      	ldrh	r3, [r3, #12]
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7fa f825 	bl	8009cb4 <lwip_htons>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	b2db      	uxtb	r3, r3
 800fc6e:	f003 0304 	and.w	r3, r3, #4
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d006      	beq.n	800fc84 <tcp_output+0x188>
 800fc76:	4b43      	ldr	r3, [pc, #268]	; (800fd84 <tcp_output+0x288>)
 800fc78:	f240 5236 	movw	r2, #1334	; 0x536
 800fc7c:	4946      	ldr	r1, [pc, #280]	; (800fd98 <tcp_output+0x29c>)
 800fc7e:	4843      	ldr	r0, [pc, #268]	; (800fd8c <tcp_output+0x290>)
 800fc80:	f003 ff2a 	bl	8013ad8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d01f      	beq.n	800fccc <tcp_output+0x1d0>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	8b5b      	ldrh	r3, [r3, #26]
 800fc90:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d119      	bne.n	800fccc <tcp_output+0x1d0>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d00b      	beq.n	800fcb8 <tcp_output+0x1bc>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d110      	bne.n	800fccc <tcp_output+0x1d0>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcae:	891a      	ldrh	r2, [r3, #8]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d209      	bcs.n	800fccc <tcp_output+0x1d0>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d004      	beq.n	800fccc <tcp_output+0x1d0>
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fcc8:	2b08      	cmp	r3, #8
 800fcca:	d901      	bls.n	800fcd0 <tcp_output+0x1d4>
 800fccc:	2301      	movs	r3, #1
 800fcce:	e000      	b.n	800fcd2 <tcp_output+0x1d6>
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d106      	bne.n	800fce4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	8b5b      	ldrh	r3, [r3, #26]
 800fcda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	f000 80e4 	beq.w	800feac <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	7d1b      	ldrb	r3, [r3, #20]
 800fce8:	2b02      	cmp	r3, #2
 800fcea:	d00d      	beq.n	800fd08 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800fcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcee:	68db      	ldr	r3, [r3, #12]
 800fcf0:	899b      	ldrh	r3, [r3, #12]
 800fcf2:	b29c      	uxth	r4, r3
 800fcf4:	2010      	movs	r0, #16
 800fcf6:	f7f9 ffdd 	bl	8009cb4 <lwip_htons>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	4322      	orrs	r2, r4
 800fd04:	b292      	uxth	r2, r2
 800fd06:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800fd08:	697a      	ldr	r2, [r7, #20]
 800fd0a:	6879      	ldr	r1, [r7, #4]
 800fd0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd0e:	f000 f909 	bl	800ff24 <tcp_output_segment>
 800fd12:	4603      	mov	r3, r0
 800fd14:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800fd16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d009      	beq.n	800fd32 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	8b5b      	ldrh	r3, [r3, #26]
 800fd22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd26:	b29a      	uxth	r2, r3
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	835a      	strh	r2, [r3, #26]
      return err;
 800fd2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd30:	e0d3      	b.n	800feda <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800fd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd34:	681a      	ldr	r2, [r3, #0]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	7d1b      	ldrb	r3, [r3, #20]
 800fd3e:	2b02      	cmp	r3, #2
 800fd40:	d006      	beq.n	800fd50 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	8b5b      	ldrh	r3, [r3, #26]
 800fd46:	f023 0303 	bic.w	r3, r3, #3
 800fd4a:	b29a      	uxth	r2, r3
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fd50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd52:	68db      	ldr	r3, [r3, #12]
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7f9 ffc1 	bl	8009cde <lwip_htonl>
 800fd5c:	4604      	mov	r4, r0
 800fd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd60:	891b      	ldrh	r3, [r3, #8]
 800fd62:	461d      	mov	r5, r3
 800fd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd66:	68db      	ldr	r3, [r3, #12]
 800fd68:	899b      	ldrh	r3, [r3, #12]
 800fd6a:	b29b      	uxth	r3, r3
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7f9 ffa1 	bl	8009cb4 <lwip_htons>
 800fd72:	4603      	mov	r3, r0
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	f003 0303 	and.w	r3, r3, #3
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d00e      	beq.n	800fd9c <tcp_output+0x2a0>
 800fd7e:	2301      	movs	r3, #1
 800fd80:	e00d      	b.n	800fd9e <tcp_output+0x2a2>
 800fd82:	bf00      	nop
 800fd84:	080164cc 	.word	0x080164cc
 800fd88:	08016a10 	.word	0x08016a10
 800fd8c:	08016520 	.word	0x08016520
 800fd90:	08016a28 	.word	0x08016a28
 800fd94:	20008dd4 	.word	0x20008dd4
 800fd98:	08016a50 	.word	0x08016a50
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	442b      	add	r3, r5
 800fda0:	4423      	add	r3, r4
 800fda2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	1ad3      	subs	r3, r2, r3
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	da02      	bge.n	800fdb6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	68ba      	ldr	r2, [r7, #8]
 800fdb4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800fdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb8:	891b      	ldrh	r3, [r3, #8]
 800fdba:	461c      	mov	r4, r3
 800fdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbe:	68db      	ldr	r3, [r3, #12]
 800fdc0:	899b      	ldrh	r3, [r3, #12]
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7f9 ff75 	bl	8009cb4 <lwip_htons>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	f003 0303 	and.w	r3, r3, #3
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d001      	beq.n	800fdda <tcp_output+0x2de>
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	e000      	b.n	800fddc <tcp_output+0x2e0>
 800fdda:	2300      	movs	r3, #0
 800fddc:	4423      	add	r3, r4
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d049      	beq.n	800fe76 <tcp_output+0x37a>
      seg->next = NULL;
 800fde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde4:	2200      	movs	r2, #0
 800fde6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d105      	bne.n	800fdfc <tcp_output+0x300>
        pcb->unacked = seg;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdf4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800fdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf8:	623b      	str	r3, [r7, #32]
 800fdfa:	e03f      	b.n	800fe7c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800fdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfe:	68db      	ldr	r3, [r3, #12]
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7f9 ff6b 	bl	8009cde <lwip_htonl>
 800fe08:	4604      	mov	r4, r0
 800fe0a:	6a3b      	ldr	r3, [r7, #32]
 800fe0c:	68db      	ldr	r3, [r3, #12]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	4618      	mov	r0, r3
 800fe12:	f7f9 ff64 	bl	8009cde <lwip_htonl>
 800fe16:	4603      	mov	r3, r0
 800fe18:	1ae3      	subs	r3, r4, r3
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	da24      	bge.n	800fe68 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	3370      	adds	r3, #112	; 0x70
 800fe22:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fe24:	e002      	b.n	800fe2c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d011      	beq.n	800fe58 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fe34:	69fb      	ldr	r3, [r7, #28]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	68db      	ldr	r3, [r3, #12]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7f9 ff4e 	bl	8009cde <lwip_htonl>
 800fe42:	4604      	mov	r4, r0
 800fe44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7f9 ff47 	bl	8009cde <lwip_htonl>
 800fe50:	4603      	mov	r3, r0
 800fe52:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	dbe6      	blt.n	800fe26 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800fe58:	69fb      	ldr	r3, [r7, #28]
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800fe60:	69fb      	ldr	r3, [r7, #28]
 800fe62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe64:	601a      	str	r2, [r3, #0]
 800fe66:	e009      	b.n	800fe7c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800fe68:	6a3b      	ldr	r3, [r7, #32]
 800fe6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe6c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800fe6e:	6a3b      	ldr	r3, [r7, #32]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	623b      	str	r3, [r7, #32]
 800fe74:	e002      	b.n	800fe7c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800fe76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe78:	f7fc fc43 	bl	800c702 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe80:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800fe82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d012      	beq.n	800feae <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800fe88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8a:	68db      	ldr	r3, [r3, #12]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7f9 ff25 	bl	8009cde <lwip_htonl>
 800fe94:	4602      	mov	r2, r0
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe9a:	1ad3      	subs	r3, r2, r3
 800fe9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe9e:	8912      	ldrh	r2, [r2, #8]
 800fea0:	4413      	add	r3, r2
  while (seg != NULL &&
 800fea2:	69ba      	ldr	r2, [r7, #24]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	f4bf aed9 	bcs.w	800fc5c <tcp_output+0x160>
 800feaa:	e000      	b.n	800feae <tcp_output+0x3b2>
      break;
 800feac:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d108      	bne.n	800fec8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2200      	movs	r2, #0
 800feba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800febe:	e004      	b.n	800feca <tcp_output+0x3ce>
    goto output_done;
 800fec0:	bf00      	nop
 800fec2:	e002      	b.n	800feca <tcp_output+0x3ce>
    goto output_done;
 800fec4:	bf00      	nop
 800fec6:	e000      	b.n	800feca <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800fec8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	8b5b      	ldrh	r3, [r3, #26]
 800fece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fed2:	b29a      	uxth	r2, r3
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800fed8:	2300      	movs	r3, #0
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3728      	adds	r7, #40	; 0x28
 800fede:	46bd      	mov	sp, r7
 800fee0:	bdb0      	pop	{r4, r5, r7, pc}
 800fee2:	bf00      	nop

0800fee4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d106      	bne.n	800ff00 <tcp_output_segment_busy+0x1c>
 800fef2:	4b09      	ldr	r3, [pc, #36]	; (800ff18 <tcp_output_segment_busy+0x34>)
 800fef4:	f240 529a 	movw	r2, #1434	; 0x59a
 800fef8:	4908      	ldr	r1, [pc, #32]	; (800ff1c <tcp_output_segment_busy+0x38>)
 800fefa:	4809      	ldr	r0, [pc, #36]	; (800ff20 <tcp_output_segment_busy+0x3c>)
 800fefc:	f003 fdec 	bl	8013ad8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	7b9b      	ldrb	r3, [r3, #14]
 800ff06:	2b01      	cmp	r3, #1
 800ff08:	d001      	beq.n	800ff0e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	e000      	b.n	800ff10 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ff0e:	2300      	movs	r3, #0
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	080164cc 	.word	0x080164cc
 800ff1c:	08016a68 	.word	0x08016a68
 800ff20:	08016520 	.word	0x08016520

0800ff24 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ff24:	b5b0      	push	{r4, r5, r7, lr}
 800ff26:	b08c      	sub	sp, #48	; 0x30
 800ff28:	af04      	add	r7, sp, #16
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	60b9      	str	r1, [r7, #8]
 800ff2e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d106      	bne.n	800ff44 <tcp_output_segment+0x20>
 800ff36:	4b63      	ldr	r3, [pc, #396]	; (80100c4 <tcp_output_segment+0x1a0>)
 800ff38:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ff3c:	4962      	ldr	r1, [pc, #392]	; (80100c8 <tcp_output_segment+0x1a4>)
 800ff3e:	4863      	ldr	r0, [pc, #396]	; (80100cc <tcp_output_segment+0x1a8>)
 800ff40:	f003 fdca 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d106      	bne.n	800ff58 <tcp_output_segment+0x34>
 800ff4a:	4b5e      	ldr	r3, [pc, #376]	; (80100c4 <tcp_output_segment+0x1a0>)
 800ff4c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ff50:	495f      	ldr	r1, [pc, #380]	; (80100d0 <tcp_output_segment+0x1ac>)
 800ff52:	485e      	ldr	r0, [pc, #376]	; (80100cc <tcp_output_segment+0x1a8>)
 800ff54:	f003 fdc0 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d106      	bne.n	800ff6c <tcp_output_segment+0x48>
 800ff5e:	4b59      	ldr	r3, [pc, #356]	; (80100c4 <tcp_output_segment+0x1a0>)
 800ff60:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ff64:	495b      	ldr	r1, [pc, #364]	; (80100d4 <tcp_output_segment+0x1b0>)
 800ff66:	4859      	ldr	r0, [pc, #356]	; (80100cc <tcp_output_segment+0x1a8>)
 800ff68:	f003 fdb6 	bl	8013ad8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ff6c:	68f8      	ldr	r0, [r7, #12]
 800ff6e:	f7ff ffb9 	bl	800fee4 <tcp_output_segment_busy>
 800ff72:	4603      	mov	r3, r0
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d001      	beq.n	800ff7c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	e09f      	b.n	80100bc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	68dc      	ldr	r4, [r3, #12]
 800ff84:	4610      	mov	r0, r2
 800ff86:	f7f9 feaa 	bl	8009cde <lwip_htonl>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	68dc      	ldr	r4, [r3, #12]
 800ff96:	4610      	mov	r0, r2
 800ff98:	f7f9 fe8c 	bl	8009cb4 <lwip_htons>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa4:	68ba      	ldr	r2, [r7, #8]
 800ffa6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ffa8:	441a      	add	r2, r3
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	3314      	adds	r3, #20
 800ffb4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	7a9b      	ldrb	r3, [r3, #10]
 800ffba:	f003 0301 	and.w	r3, r3, #1
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d015      	beq.n	800ffee <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	3304      	adds	r3, #4
 800ffc6:	461a      	mov	r2, r3
 800ffc8:	6879      	ldr	r1, [r7, #4]
 800ffca:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ffce:	f7fc fe8f 	bl	800ccf0 <tcp_eff_send_mss_netif>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ffd6:	8b7b      	ldrh	r3, [r7, #26]
 800ffd8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7f9 fe7e 	bl	8009cde <lwip_htonl>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	69fb      	ldr	r3, [r7, #28]
 800ffe6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	3304      	adds	r3, #4
 800ffec:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	da02      	bge.n	800fffe <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	2200      	movs	r2, #0
 800fffc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010002:	2b00      	cmp	r3, #0
 8010004:	d10c      	bne.n	8010020 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010006:	4b34      	ldr	r3, [pc, #208]	; (80100d8 <tcp_output_segment+0x1b4>)
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	68db      	ldr	r3, [r3, #12]
 8010012:	685b      	ldr	r3, [r3, #4]
 8010014:	4618      	mov	r0, r3
 8010016:	f7f9 fe62 	bl	8009cde <lwip_htonl>
 801001a:	4602      	mov	r2, r0
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	68da      	ldr	r2, [r3, #12]
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	1ad3      	subs	r3, r2, r3
 801002c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	685b      	ldr	r3, [r3, #4]
 8010032:	8959      	ldrh	r1, [r3, #10]
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	8b3a      	ldrh	r2, [r7, #24]
 801003a:	1a8a      	subs	r2, r1, r2
 801003c:	b292      	uxth	r2, r2
 801003e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	8919      	ldrh	r1, [r3, #8]
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	8b3a      	ldrh	r2, [r7, #24]
 801004c:	1a8a      	subs	r2, r1, r2
 801004e:	b292      	uxth	r2, r2
 8010050:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	685b      	ldr	r3, [r3, #4]
 8010056:	68fa      	ldr	r2, [r7, #12]
 8010058:	68d2      	ldr	r2, [r2, #12]
 801005a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	68db      	ldr	r3, [r3, #12]
 8010060:	2200      	movs	r2, #0
 8010062:	741a      	strb	r2, [r3, #16]
 8010064:	2200      	movs	r2, #0
 8010066:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	f103 0214 	add.w	r2, r3, #20
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	7a9b      	ldrb	r3, [r3, #10]
 8010074:	009b      	lsls	r3, r3, #2
 8010076:	f003 0304 	and.w	r3, r3, #4
 801007a:	4413      	add	r3, r2
 801007c:	69fa      	ldr	r2, [r7, #28]
 801007e:	429a      	cmp	r2, r3
 8010080:	d006      	beq.n	8010090 <tcp_output_segment+0x16c>
 8010082:	4b10      	ldr	r3, [pc, #64]	; (80100c4 <tcp_output_segment+0x1a0>)
 8010084:	f240 621c 	movw	r2, #1564	; 0x61c
 8010088:	4914      	ldr	r1, [pc, #80]	; (80100dc <tcp_output_segment+0x1b8>)
 801008a:	4810      	ldr	r0, [pc, #64]	; (80100cc <tcp_output_segment+0x1a8>)
 801008c:	f003 fd24 	bl	8013ad8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	6858      	ldr	r0, [r3, #4]
 8010094:	68b9      	ldr	r1, [r7, #8]
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	1d1c      	adds	r4, r3, #4
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	7add      	ldrb	r5, [r3, #11]
 801009e:	68bb      	ldr	r3, [r7, #8]
 80100a0:	7a9b      	ldrb	r3, [r3, #10]
 80100a2:	687a      	ldr	r2, [r7, #4]
 80100a4:	9202      	str	r2, [sp, #8]
 80100a6:	2206      	movs	r2, #6
 80100a8:	9201      	str	r2, [sp, #4]
 80100aa:	9300      	str	r3, [sp, #0]
 80100ac:	462b      	mov	r3, r5
 80100ae:	4622      	mov	r2, r4
 80100b0:	f002 fca2 	bl	80129f8 <ip4_output_if>
 80100b4:	4603      	mov	r3, r0
 80100b6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80100b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3720      	adds	r7, #32
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bdb0      	pop	{r4, r5, r7, pc}
 80100c4:	080164cc 	.word	0x080164cc
 80100c8:	08016a90 	.word	0x08016a90
 80100cc:	08016520 	.word	0x08016520
 80100d0:	08016ab0 	.word	0x08016ab0
 80100d4:	08016ad0 	.word	0x08016ad0
 80100d8:	20008dc4 	.word	0x20008dc4
 80100dc:	08016af4 	.word	0x08016af4

080100e0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80100e0:	b5b0      	push	{r4, r5, r7, lr}
 80100e2:	b084      	sub	sp, #16
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d106      	bne.n	80100fc <tcp_rexmit_rto_prepare+0x1c>
 80100ee:	4b31      	ldr	r3, [pc, #196]	; (80101b4 <tcp_rexmit_rto_prepare+0xd4>)
 80100f0:	f240 6263 	movw	r2, #1635	; 0x663
 80100f4:	4930      	ldr	r1, [pc, #192]	; (80101b8 <tcp_rexmit_rto_prepare+0xd8>)
 80100f6:	4831      	ldr	r0, [pc, #196]	; (80101bc <tcp_rexmit_rto_prepare+0xdc>)
 80100f8:	f003 fcee 	bl	8013ad8 <iprintf>

  if (pcb->unacked == NULL) {
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010100:	2b00      	cmp	r3, #0
 8010102:	d102      	bne.n	801010a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010104:	f06f 0305 	mvn.w	r3, #5
 8010108:	e050      	b.n	80101ac <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801010e:	60fb      	str	r3, [r7, #12]
 8010110:	e00b      	b.n	801012a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010112:	68f8      	ldr	r0, [r7, #12]
 8010114:	f7ff fee6 	bl	800fee4 <tcp_output_segment_busy>
 8010118:	4603      	mov	r3, r0
 801011a:	2b00      	cmp	r3, #0
 801011c:	d002      	beq.n	8010124 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801011e:	f06f 0305 	mvn.w	r3, #5
 8010122:	e043      	b.n	80101ac <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	60fb      	str	r3, [r7, #12]
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d1ef      	bne.n	8010112 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010132:	68f8      	ldr	r0, [r7, #12]
 8010134:	f7ff fed6 	bl	800fee4 <tcp_output_segment_busy>
 8010138:	4603      	mov	r3, r0
 801013a:	2b00      	cmp	r3, #0
 801013c:	d002      	beq.n	8010144 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801013e:	f06f 0305 	mvn.w	r3, #5
 8010142:	e033      	b.n	80101ac <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2200      	movs	r2, #0
 8010158:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	8b5b      	ldrh	r3, [r3, #26]
 801015e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010162:	b29a      	uxth	r2, r3
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	68db      	ldr	r3, [r3, #12]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	4618      	mov	r0, r3
 8010170:	f7f9 fdb5 	bl	8009cde <lwip_htonl>
 8010174:	4604      	mov	r4, r0
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	891b      	ldrh	r3, [r3, #8]
 801017a:	461d      	mov	r5, r3
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	899b      	ldrh	r3, [r3, #12]
 8010182:	b29b      	uxth	r3, r3
 8010184:	4618      	mov	r0, r3
 8010186:	f7f9 fd95 	bl	8009cb4 <lwip_htons>
 801018a:	4603      	mov	r3, r0
 801018c:	b2db      	uxtb	r3, r3
 801018e:	f003 0303 	and.w	r3, r3, #3
 8010192:	2b00      	cmp	r3, #0
 8010194:	d001      	beq.n	801019a <tcp_rexmit_rto_prepare+0xba>
 8010196:	2301      	movs	r3, #1
 8010198:	e000      	b.n	801019c <tcp_rexmit_rto_prepare+0xbc>
 801019a:	2300      	movs	r3, #0
 801019c:	442b      	add	r3, r5
 801019e:	18e2      	adds	r2, r4, r3
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2200      	movs	r2, #0
 80101a8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80101aa:	2300      	movs	r3, #0
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3710      	adds	r7, #16
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bdb0      	pop	{r4, r5, r7, pc}
 80101b4:	080164cc 	.word	0x080164cc
 80101b8:	08016b08 	.word	0x08016b08
 80101bc:	08016520 	.word	0x08016520

080101c0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d106      	bne.n	80101dc <tcp_rexmit_rto_commit+0x1c>
 80101ce:	4b0d      	ldr	r3, [pc, #52]	; (8010204 <tcp_rexmit_rto_commit+0x44>)
 80101d0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80101d4:	490c      	ldr	r1, [pc, #48]	; (8010208 <tcp_rexmit_rto_commit+0x48>)
 80101d6:	480d      	ldr	r0, [pc, #52]	; (801020c <tcp_rexmit_rto_commit+0x4c>)
 80101d8:	f003 fc7e 	bl	8013ad8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80101e2:	2bff      	cmp	r3, #255	; 0xff
 80101e4:	d007      	beq.n	80101f6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80101ec:	3301      	adds	r3, #1
 80101ee:	b2da      	uxtb	r2, r3
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f7ff fc80 	bl	800fafc <tcp_output>
}
 80101fc:	bf00      	nop
 80101fe:	3708      	adds	r7, #8
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}
 8010204:	080164cc 	.word	0x080164cc
 8010208:	08016b2c 	.word	0x08016b2c
 801020c:	08016520 	.word	0x08016520

08010210 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b082      	sub	sp, #8
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d106      	bne.n	801022c <tcp_rexmit_rto+0x1c>
 801021e:	4b0a      	ldr	r3, [pc, #40]	; (8010248 <tcp_rexmit_rto+0x38>)
 8010220:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010224:	4909      	ldr	r1, [pc, #36]	; (801024c <tcp_rexmit_rto+0x3c>)
 8010226:	480a      	ldr	r0, [pc, #40]	; (8010250 <tcp_rexmit_rto+0x40>)
 8010228:	f003 fc56 	bl	8013ad8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f7ff ff57 	bl	80100e0 <tcp_rexmit_rto_prepare>
 8010232:	4603      	mov	r3, r0
 8010234:	2b00      	cmp	r3, #0
 8010236:	d102      	bne.n	801023e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f7ff ffc1 	bl	80101c0 <tcp_rexmit_rto_commit>
  }
}
 801023e:	bf00      	nop
 8010240:	3708      	adds	r7, #8
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}
 8010246:	bf00      	nop
 8010248:	080164cc 	.word	0x080164cc
 801024c:	08016b50 	.word	0x08016b50
 8010250:	08016520 	.word	0x08016520

08010254 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010254:	b590      	push	{r4, r7, lr}
 8010256:	b085      	sub	sp, #20
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d106      	bne.n	8010270 <tcp_rexmit+0x1c>
 8010262:	4b2f      	ldr	r3, [pc, #188]	; (8010320 <tcp_rexmit+0xcc>)
 8010264:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010268:	492e      	ldr	r1, [pc, #184]	; (8010324 <tcp_rexmit+0xd0>)
 801026a:	482f      	ldr	r0, [pc, #188]	; (8010328 <tcp_rexmit+0xd4>)
 801026c:	f003 fc34 	bl	8013ad8 <iprintf>

  if (pcb->unacked == NULL) {
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010274:	2b00      	cmp	r3, #0
 8010276:	d102      	bne.n	801027e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010278:	f06f 0305 	mvn.w	r3, #5
 801027c:	e04c      	b.n	8010318 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010282:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010284:	68b8      	ldr	r0, [r7, #8]
 8010286:	f7ff fe2d 	bl	800fee4 <tcp_output_segment_busy>
 801028a:	4603      	mov	r3, r0
 801028c:	2b00      	cmp	r3, #0
 801028e:	d002      	beq.n	8010296 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010290:	f06f 0305 	mvn.w	r3, #5
 8010294:	e040      	b.n	8010318 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	681a      	ldr	r2, [r3, #0]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	336c      	adds	r3, #108	; 0x6c
 80102a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80102a4:	e002      	b.n	80102ac <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d011      	beq.n	80102d8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	4618      	mov	r0, r3
 80102be:	f7f9 fd0e 	bl	8009cde <lwip_htonl>
 80102c2:	4604      	mov	r4, r0
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	68db      	ldr	r3, [r3, #12]
 80102c8:	685b      	ldr	r3, [r3, #4]
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7f9 fd07 	bl	8009cde <lwip_htonl>
 80102d0:	4603      	mov	r3, r0
 80102d2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	dbe6      	blt.n	80102a6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	681a      	ldr	r2, [r3, #0]
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	68ba      	ldr	r2, [r7, #8]
 80102e4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d103      	bne.n	80102f6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2200      	movs	r2, #0
 80102f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80102fc:	2bff      	cmp	r3, #255	; 0xff
 80102fe:	d007      	beq.n	8010310 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010306:	3301      	adds	r3, #1
 8010308:	b2da      	uxtb	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2200      	movs	r2, #0
 8010314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010316:	2300      	movs	r3, #0
}
 8010318:	4618      	mov	r0, r3
 801031a:	3714      	adds	r7, #20
 801031c:	46bd      	mov	sp, r7
 801031e:	bd90      	pop	{r4, r7, pc}
 8010320:	080164cc 	.word	0x080164cc
 8010324:	08016b6c 	.word	0x08016b6c
 8010328:	08016520 	.word	0x08016520

0801032c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d106      	bne.n	8010348 <tcp_rexmit_fast+0x1c>
 801033a:	4b2a      	ldr	r3, [pc, #168]	; (80103e4 <tcp_rexmit_fast+0xb8>)
 801033c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010340:	4929      	ldr	r1, [pc, #164]	; (80103e8 <tcp_rexmit_fast+0xbc>)
 8010342:	482a      	ldr	r0, [pc, #168]	; (80103ec <tcp_rexmit_fast+0xc0>)
 8010344:	f003 fbc8 	bl	8013ad8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801034c:	2b00      	cmp	r3, #0
 801034e:	d045      	beq.n	80103dc <tcp_rexmit_fast+0xb0>
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	8b5b      	ldrh	r3, [r3, #26]
 8010354:	f003 0304 	and.w	r3, r3, #4
 8010358:	2b00      	cmp	r3, #0
 801035a:	d13f      	bne.n	80103dc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f7ff ff79 	bl	8010254 <tcp_rexmit>
 8010362:	4603      	mov	r3, r0
 8010364:	2b00      	cmp	r3, #0
 8010366:	d139      	bne.n	80103dc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010374:	4293      	cmp	r3, r2
 8010376:	bf28      	it	cs
 8010378:	4613      	movcs	r3, r2
 801037a:	b29b      	uxth	r3, r3
 801037c:	2b00      	cmp	r3, #0
 801037e:	da00      	bge.n	8010382 <tcp_rexmit_fast+0x56>
 8010380:	3301      	adds	r3, #1
 8010382:	105b      	asrs	r3, r3, #1
 8010384:	b29a      	uxth	r2, r3
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010392:	461a      	mov	r2, r3
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010398:	005b      	lsls	r3, r3, #1
 801039a:	429a      	cmp	r2, r3
 801039c:	d206      	bcs.n	80103ac <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103a2:	005b      	lsls	r3, r3, #1
 80103a4:	b29a      	uxth	r2, r3
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103b6:	4619      	mov	r1, r3
 80103b8:	0049      	lsls	r1, r1, #1
 80103ba:	440b      	add	r3, r1
 80103bc:	b29b      	uxth	r3, r3
 80103be:	4413      	add	r3, r2
 80103c0:	b29a      	uxth	r2, r3
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	8b5b      	ldrh	r3, [r3, #26]
 80103cc:	f043 0304 	orr.w	r3, r3, #4
 80103d0:	b29a      	uxth	r2, r3
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2200      	movs	r2, #0
 80103da:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80103dc:	bf00      	nop
 80103de:	3708      	adds	r7, #8
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}
 80103e4:	080164cc 	.word	0x080164cc
 80103e8:	08016b84 	.word	0x08016b84
 80103ec:	08016520 	.word	0x08016520

080103f0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b086      	sub	sp, #24
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	607b      	str	r3, [r7, #4]
 80103fa:	460b      	mov	r3, r1
 80103fc:	817b      	strh	r3, [r7, #10]
 80103fe:	4613      	mov	r3, r2
 8010400:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010402:	897a      	ldrh	r2, [r7, #10]
 8010404:	893b      	ldrh	r3, [r7, #8]
 8010406:	4413      	add	r3, r2
 8010408:	b29b      	uxth	r3, r3
 801040a:	3314      	adds	r3, #20
 801040c:	b29b      	uxth	r3, r3
 801040e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010412:	4619      	mov	r1, r3
 8010414:	2022      	movs	r0, #34	; 0x22
 8010416:	f7fa fc0d 	bl	800ac34 <pbuf_alloc>
 801041a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d04d      	beq.n	80104be <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010422:	897b      	ldrh	r3, [r7, #10]
 8010424:	3313      	adds	r3, #19
 8010426:	697a      	ldr	r2, [r7, #20]
 8010428:	8952      	ldrh	r2, [r2, #10]
 801042a:	4293      	cmp	r3, r2
 801042c:	db06      	blt.n	801043c <tcp_output_alloc_header_common+0x4c>
 801042e:	4b26      	ldr	r3, [pc, #152]	; (80104c8 <tcp_output_alloc_header_common+0xd8>)
 8010430:	f240 7223 	movw	r2, #1827	; 0x723
 8010434:	4925      	ldr	r1, [pc, #148]	; (80104cc <tcp_output_alloc_header_common+0xdc>)
 8010436:	4826      	ldr	r0, [pc, #152]	; (80104d0 <tcp_output_alloc_header_common+0xe0>)
 8010438:	f003 fb4e 	bl	8013ad8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	685b      	ldr	r3, [r3, #4]
 8010440:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010442:	8c3b      	ldrh	r3, [r7, #32]
 8010444:	4618      	mov	r0, r3
 8010446:	f7f9 fc35 	bl	8009cb4 <lwip_htons>
 801044a:	4603      	mov	r3, r0
 801044c:	461a      	mov	r2, r3
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010454:	4618      	mov	r0, r3
 8010456:	f7f9 fc2d 	bl	8009cb4 <lwip_htons>
 801045a:	4603      	mov	r3, r0
 801045c:	461a      	mov	r2, r3
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	687a      	ldr	r2, [r7, #4]
 8010466:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010468:	68f8      	ldr	r0, [r7, #12]
 801046a:	f7f9 fc38 	bl	8009cde <lwip_htonl>
 801046e:	4602      	mov	r2, r0
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010474:	897b      	ldrh	r3, [r7, #10]
 8010476:	089b      	lsrs	r3, r3, #2
 8010478:	b29b      	uxth	r3, r3
 801047a:	3305      	adds	r3, #5
 801047c:	b29b      	uxth	r3, r3
 801047e:	031b      	lsls	r3, r3, #12
 8010480:	b29a      	uxth	r2, r3
 8010482:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010486:	b29b      	uxth	r3, r3
 8010488:	4313      	orrs	r3, r2
 801048a:	b29b      	uxth	r3, r3
 801048c:	4618      	mov	r0, r3
 801048e:	f7f9 fc11 	bl	8009cb4 <lwip_htons>
 8010492:	4603      	mov	r3, r0
 8010494:	461a      	mov	r2, r3
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801049a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801049c:	4618      	mov	r0, r3
 801049e:	f7f9 fc09 	bl	8009cb4 <lwip_htons>
 80104a2:	4603      	mov	r3, r0
 80104a4:	461a      	mov	r2, r3
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	2200      	movs	r2, #0
 80104ae:	741a      	strb	r2, [r3, #16]
 80104b0:	2200      	movs	r2, #0
 80104b2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	2200      	movs	r2, #0
 80104b8:	749a      	strb	r2, [r3, #18]
 80104ba:	2200      	movs	r2, #0
 80104bc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80104be:	697b      	ldr	r3, [r7, #20]
}
 80104c0:	4618      	mov	r0, r3
 80104c2:	3718      	adds	r7, #24
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	080164cc 	.word	0x080164cc
 80104cc:	08016ba4 	.word	0x08016ba4
 80104d0:	08016520 	.word	0x08016520

080104d4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80104d4:	b5b0      	push	{r4, r5, r7, lr}
 80104d6:	b08a      	sub	sp, #40	; 0x28
 80104d8:	af04      	add	r7, sp, #16
 80104da:	60f8      	str	r0, [r7, #12]
 80104dc:	607b      	str	r3, [r7, #4]
 80104de:	460b      	mov	r3, r1
 80104e0:	817b      	strh	r3, [r7, #10]
 80104e2:	4613      	mov	r3, r2
 80104e4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d106      	bne.n	80104fa <tcp_output_alloc_header+0x26>
 80104ec:	4b15      	ldr	r3, [pc, #84]	; (8010544 <tcp_output_alloc_header+0x70>)
 80104ee:	f240 7242 	movw	r2, #1858	; 0x742
 80104f2:	4915      	ldr	r1, [pc, #84]	; (8010548 <tcp_output_alloc_header+0x74>)
 80104f4:	4815      	ldr	r0, [pc, #84]	; (801054c <tcp_output_alloc_header+0x78>)
 80104f6:	f003 faef 	bl	8013ad8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	8adb      	ldrh	r3, [r3, #22]
 8010502:	68fa      	ldr	r2, [r7, #12]
 8010504:	8b12      	ldrh	r2, [r2, #24]
 8010506:	68f9      	ldr	r1, [r7, #12]
 8010508:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801050a:	893d      	ldrh	r5, [r7, #8]
 801050c:	897c      	ldrh	r4, [r7, #10]
 801050e:	9103      	str	r1, [sp, #12]
 8010510:	2110      	movs	r1, #16
 8010512:	9102      	str	r1, [sp, #8]
 8010514:	9201      	str	r2, [sp, #4]
 8010516:	9300      	str	r3, [sp, #0]
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	462a      	mov	r2, r5
 801051c:	4621      	mov	r1, r4
 801051e:	f7ff ff67 	bl	80103f0 <tcp_output_alloc_header_common>
 8010522:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010524:	697b      	ldr	r3, [r7, #20]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d006      	beq.n	8010538 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801052e:	68fa      	ldr	r2, [r7, #12]
 8010530:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010532:	441a      	add	r2, r3
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010538:	697b      	ldr	r3, [r7, #20]
}
 801053a:	4618      	mov	r0, r3
 801053c:	3718      	adds	r7, #24
 801053e:	46bd      	mov	sp, r7
 8010540:	bdb0      	pop	{r4, r5, r7, pc}
 8010542:	bf00      	nop
 8010544:	080164cc 	.word	0x080164cc
 8010548:	08016bd4 	.word	0x08016bd4
 801054c:	08016520 	.word	0x08016520

08010550 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b088      	sub	sp, #32
 8010554:	af00      	add	r7, sp, #0
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	4611      	mov	r1, r2
 801055c:	461a      	mov	r2, r3
 801055e:	460b      	mov	r3, r1
 8010560:	71fb      	strb	r3, [r7, #7]
 8010562:	4613      	mov	r3, r2
 8010564:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010566:	2300      	movs	r3, #0
 8010568:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d106      	bne.n	801057e <tcp_output_fill_options+0x2e>
 8010570:	4b13      	ldr	r3, [pc, #76]	; (80105c0 <tcp_output_fill_options+0x70>)
 8010572:	f240 7256 	movw	r2, #1878	; 0x756
 8010576:	4913      	ldr	r1, [pc, #76]	; (80105c4 <tcp_output_fill_options+0x74>)
 8010578:	4813      	ldr	r0, [pc, #76]	; (80105c8 <tcp_output_fill_options+0x78>)
 801057a:	f003 faad 	bl	8013ad8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010584:	69bb      	ldr	r3, [r7, #24]
 8010586:	3314      	adds	r3, #20
 8010588:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	f103 0214 	add.w	r2, r3, #20
 8010590:	8bfb      	ldrh	r3, [r7, #30]
 8010592:	009b      	lsls	r3, r3, #2
 8010594:	4619      	mov	r1, r3
 8010596:	79fb      	ldrb	r3, [r7, #7]
 8010598:	009b      	lsls	r3, r3, #2
 801059a:	f003 0304 	and.w	r3, r3, #4
 801059e:	440b      	add	r3, r1
 80105a0:	4413      	add	r3, r2
 80105a2:	697a      	ldr	r2, [r7, #20]
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d006      	beq.n	80105b6 <tcp_output_fill_options+0x66>
 80105a8:	4b05      	ldr	r3, [pc, #20]	; (80105c0 <tcp_output_fill_options+0x70>)
 80105aa:	f240 7275 	movw	r2, #1909	; 0x775
 80105ae:	4907      	ldr	r1, [pc, #28]	; (80105cc <tcp_output_fill_options+0x7c>)
 80105b0:	4805      	ldr	r0, [pc, #20]	; (80105c8 <tcp_output_fill_options+0x78>)
 80105b2:	f003 fa91 	bl	8013ad8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80105b6:	bf00      	nop
 80105b8:	3720      	adds	r7, #32
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	080164cc 	.word	0x080164cc
 80105c4:	08016bfc 	.word	0x08016bfc
 80105c8:	08016520 	.word	0x08016520
 80105cc:	08016af4 	.word	0x08016af4

080105d0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b08a      	sub	sp, #40	; 0x28
 80105d4:	af04      	add	r7, sp, #16
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	607a      	str	r2, [r7, #4]
 80105dc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d106      	bne.n	80105f2 <tcp_output_control_segment+0x22>
 80105e4:	4b1c      	ldr	r3, [pc, #112]	; (8010658 <tcp_output_control_segment+0x88>)
 80105e6:	f240 7287 	movw	r2, #1927	; 0x787
 80105ea:	491c      	ldr	r1, [pc, #112]	; (801065c <tcp_output_control_segment+0x8c>)
 80105ec:	481c      	ldr	r0, [pc, #112]	; (8010660 <tcp_output_control_segment+0x90>)
 80105ee:	f003 fa73 	bl	8013ad8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80105f2:	683a      	ldr	r2, [r7, #0]
 80105f4:	6879      	ldr	r1, [r7, #4]
 80105f6:	68f8      	ldr	r0, [r7, #12]
 80105f8:	f7fe ff40 	bl	800f47c <tcp_route>
 80105fc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d102      	bne.n	801060a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010604:	23fc      	movs	r3, #252	; 0xfc
 8010606:	75fb      	strb	r3, [r7, #23]
 8010608:	e01c      	b.n	8010644 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d006      	beq.n	801061e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	7adb      	ldrb	r3, [r3, #11]
 8010614:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	7a9b      	ldrb	r3, [r3, #10]
 801061a:	757b      	strb	r3, [r7, #21]
 801061c:	e003      	b.n	8010626 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801061e:	23ff      	movs	r3, #255	; 0xff
 8010620:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010622:	2300      	movs	r3, #0
 8010624:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010626:	7dba      	ldrb	r2, [r7, #22]
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	9302      	str	r3, [sp, #8]
 801062c:	2306      	movs	r3, #6
 801062e:	9301      	str	r3, [sp, #4]
 8010630:	7d7b      	ldrb	r3, [r7, #21]
 8010632:	9300      	str	r3, [sp, #0]
 8010634:	4613      	mov	r3, r2
 8010636:	683a      	ldr	r2, [r7, #0]
 8010638:	6879      	ldr	r1, [r7, #4]
 801063a:	68b8      	ldr	r0, [r7, #8]
 801063c:	f002 f9dc 	bl	80129f8 <ip4_output_if>
 8010640:	4603      	mov	r3, r0
 8010642:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010644:	68b8      	ldr	r0, [r7, #8]
 8010646:	f7fa fdd9 	bl	800b1fc <pbuf_free>
  return err;
 801064a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801064e:	4618      	mov	r0, r3
 8010650:	3718      	adds	r7, #24
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}
 8010656:	bf00      	nop
 8010658:	080164cc 	.word	0x080164cc
 801065c:	08016c24 	.word	0x08016c24
 8010660:	08016520 	.word	0x08016520

08010664 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010664:	b590      	push	{r4, r7, lr}
 8010666:	b08b      	sub	sp, #44	; 0x2c
 8010668:	af04      	add	r7, sp, #16
 801066a:	60f8      	str	r0, [r7, #12]
 801066c:	60b9      	str	r1, [r7, #8]
 801066e:	607a      	str	r2, [r7, #4]
 8010670:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d106      	bne.n	8010686 <tcp_rst+0x22>
 8010678:	4b1f      	ldr	r3, [pc, #124]	; (80106f8 <tcp_rst+0x94>)
 801067a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801067e:	491f      	ldr	r1, [pc, #124]	; (80106fc <tcp_rst+0x98>)
 8010680:	481f      	ldr	r0, [pc, #124]	; (8010700 <tcp_rst+0x9c>)
 8010682:	f003 fa29 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010688:	2b00      	cmp	r3, #0
 801068a:	d106      	bne.n	801069a <tcp_rst+0x36>
 801068c:	4b1a      	ldr	r3, [pc, #104]	; (80106f8 <tcp_rst+0x94>)
 801068e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010692:	491c      	ldr	r1, [pc, #112]	; (8010704 <tcp_rst+0xa0>)
 8010694:	481a      	ldr	r0, [pc, #104]	; (8010700 <tcp_rst+0x9c>)
 8010696:	f003 fa1f 	bl	8013ad8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801069a:	2300      	movs	r3, #0
 801069c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801069e:	f246 0308 	movw	r3, #24584	; 0x6008
 80106a2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80106a4:	7dfb      	ldrb	r3, [r7, #23]
 80106a6:	b29c      	uxth	r4, r3
 80106a8:	68b8      	ldr	r0, [r7, #8]
 80106aa:	f7f9 fb18 	bl	8009cde <lwip_htonl>
 80106ae:	4602      	mov	r2, r0
 80106b0:	8abb      	ldrh	r3, [r7, #20]
 80106b2:	9303      	str	r3, [sp, #12]
 80106b4:	2314      	movs	r3, #20
 80106b6:	9302      	str	r3, [sp, #8]
 80106b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80106ba:	9301      	str	r3, [sp, #4]
 80106bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80106be:	9300      	str	r3, [sp, #0]
 80106c0:	4613      	mov	r3, r2
 80106c2:	2200      	movs	r2, #0
 80106c4:	4621      	mov	r1, r4
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f7ff fe92 	bl	80103f0 <tcp_output_alloc_header_common>
 80106cc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d00c      	beq.n	80106ee <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80106d4:	7dfb      	ldrb	r3, [r7, #23]
 80106d6:	2200      	movs	r2, #0
 80106d8:	6939      	ldr	r1, [r7, #16]
 80106da:	68f8      	ldr	r0, [r7, #12]
 80106dc:	f7ff ff38 	bl	8010550 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80106e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e2:	683a      	ldr	r2, [r7, #0]
 80106e4:	6939      	ldr	r1, [r7, #16]
 80106e6:	68f8      	ldr	r0, [r7, #12]
 80106e8:	f7ff ff72 	bl	80105d0 <tcp_output_control_segment>
 80106ec:	e000      	b.n	80106f0 <tcp_rst+0x8c>
    return;
 80106ee:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80106f0:	371c      	adds	r7, #28
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd90      	pop	{r4, r7, pc}
 80106f6:	bf00      	nop
 80106f8:	080164cc 	.word	0x080164cc
 80106fc:	08016c50 	.word	0x08016c50
 8010700:	08016520 	.word	0x08016520
 8010704:	08016c6c 	.word	0x08016c6c

08010708 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010708:	b590      	push	{r4, r7, lr}
 801070a:	b087      	sub	sp, #28
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010710:	2300      	movs	r3, #0
 8010712:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010714:	2300      	movs	r3, #0
 8010716:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d106      	bne.n	801072c <tcp_send_empty_ack+0x24>
 801071e:	4b28      	ldr	r3, [pc, #160]	; (80107c0 <tcp_send_empty_ack+0xb8>)
 8010720:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010724:	4927      	ldr	r1, [pc, #156]	; (80107c4 <tcp_send_empty_ack+0xbc>)
 8010726:	4828      	ldr	r0, [pc, #160]	; (80107c8 <tcp_send_empty_ack+0xc0>)
 8010728:	f003 f9d6 	bl	8013ad8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801072c:	7dfb      	ldrb	r3, [r7, #23]
 801072e:	009b      	lsls	r3, r3, #2
 8010730:	b2db      	uxtb	r3, r3
 8010732:	f003 0304 	and.w	r3, r3, #4
 8010736:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010738:	7d7b      	ldrb	r3, [r7, #21]
 801073a:	b29c      	uxth	r4, r3
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010740:	4618      	mov	r0, r3
 8010742:	f7f9 facc 	bl	8009cde <lwip_htonl>
 8010746:	4603      	mov	r3, r0
 8010748:	2200      	movs	r2, #0
 801074a:	4621      	mov	r1, r4
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f7ff fec1 	bl	80104d4 <tcp_output_alloc_header>
 8010752:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d109      	bne.n	801076e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	8b5b      	ldrh	r3, [r3, #26]
 801075e:	f043 0303 	orr.w	r3, r3, #3
 8010762:	b29a      	uxth	r2, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010768:	f06f 0301 	mvn.w	r3, #1
 801076c:	e023      	b.n	80107b6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801076e:	7dbb      	ldrb	r3, [r7, #22]
 8010770:	7dfa      	ldrb	r2, [r7, #23]
 8010772:	6939      	ldr	r1, [r7, #16]
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f7ff feeb 	bl	8010550 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801077a:	687a      	ldr	r2, [r7, #4]
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	3304      	adds	r3, #4
 8010780:	6939      	ldr	r1, [r7, #16]
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f7ff ff24 	bl	80105d0 <tcp_output_control_segment>
 8010788:	4603      	mov	r3, r0
 801078a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801078c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d007      	beq.n	80107a4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	8b5b      	ldrh	r3, [r3, #26]
 8010798:	f043 0303 	orr.w	r3, r3, #3
 801079c:	b29a      	uxth	r2, r3
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	835a      	strh	r2, [r3, #26]
 80107a2:	e006      	b.n	80107b2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	8b5b      	ldrh	r3, [r3, #26]
 80107a8:	f023 0303 	bic.w	r3, r3, #3
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80107b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	371c      	adds	r7, #28
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd90      	pop	{r4, r7, pc}
 80107be:	bf00      	nop
 80107c0:	080164cc 	.word	0x080164cc
 80107c4:	08016c88 	.word	0x08016c88
 80107c8:	08016520 	.word	0x08016520

080107cc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80107cc:	b590      	push	{r4, r7, lr}
 80107ce:	b087      	sub	sp, #28
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80107d4:	2300      	movs	r3, #0
 80107d6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d106      	bne.n	80107ec <tcp_keepalive+0x20>
 80107de:	4b18      	ldr	r3, [pc, #96]	; (8010840 <tcp_keepalive+0x74>)
 80107e0:	f640 0224 	movw	r2, #2084	; 0x824
 80107e4:	4917      	ldr	r1, [pc, #92]	; (8010844 <tcp_keepalive+0x78>)
 80107e6:	4818      	ldr	r0, [pc, #96]	; (8010848 <tcp_keepalive+0x7c>)
 80107e8:	f003 f976 	bl	8013ad8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80107ec:	7dfb      	ldrb	r3, [r7, #23]
 80107ee:	b29c      	uxth	r4, r3
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107f4:	3b01      	subs	r3, #1
 80107f6:	4618      	mov	r0, r3
 80107f8:	f7f9 fa71 	bl	8009cde <lwip_htonl>
 80107fc:	4603      	mov	r3, r0
 80107fe:	2200      	movs	r2, #0
 8010800:	4621      	mov	r1, r4
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f7ff fe66 	bl	80104d4 <tcp_output_alloc_header>
 8010808:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d102      	bne.n	8010816 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010810:	f04f 33ff 	mov.w	r3, #4294967295
 8010814:	e010      	b.n	8010838 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010816:	7dfb      	ldrb	r3, [r7, #23]
 8010818:	2200      	movs	r2, #0
 801081a:	6939      	ldr	r1, [r7, #16]
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f7ff fe97 	bl	8010550 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	3304      	adds	r3, #4
 8010828:	6939      	ldr	r1, [r7, #16]
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f7ff fed0 	bl	80105d0 <tcp_output_control_segment>
 8010830:	4603      	mov	r3, r0
 8010832:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010834:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010838:	4618      	mov	r0, r3
 801083a:	371c      	adds	r7, #28
 801083c:	46bd      	mov	sp, r7
 801083e:	bd90      	pop	{r4, r7, pc}
 8010840:	080164cc 	.word	0x080164cc
 8010844:	08016ca8 	.word	0x08016ca8
 8010848:	08016520 	.word	0x08016520

0801084c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801084c:	b590      	push	{r4, r7, lr}
 801084e:	b08b      	sub	sp, #44	; 0x2c
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010854:	2300      	movs	r3, #0
 8010856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d106      	bne.n	801086e <tcp_zero_window_probe+0x22>
 8010860:	4b4c      	ldr	r3, [pc, #304]	; (8010994 <tcp_zero_window_probe+0x148>)
 8010862:	f640 024f 	movw	r2, #2127	; 0x84f
 8010866:	494c      	ldr	r1, [pc, #304]	; (8010998 <tcp_zero_window_probe+0x14c>)
 8010868:	484c      	ldr	r0, [pc, #304]	; (801099c <tcp_zero_window_probe+0x150>)
 801086a:	f003 f935 	bl	8013ad8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010872:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010874:	6a3b      	ldr	r3, [r7, #32]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d101      	bne.n	801087e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801087a:	2300      	movs	r3, #0
 801087c:	e086      	b.n	801098c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010884:	2bff      	cmp	r3, #255	; 0xff
 8010886:	d007      	beq.n	8010898 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801088e:	3301      	adds	r3, #1
 8010890:	b2da      	uxtb	r2, r3
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010898:	6a3b      	ldr	r3, [r7, #32]
 801089a:	68db      	ldr	r3, [r3, #12]
 801089c:	899b      	ldrh	r3, [r3, #12]
 801089e:	b29b      	uxth	r3, r3
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7f9 fa07 	bl	8009cb4 <lwip_htons>
 80108a6:	4603      	mov	r3, r0
 80108a8:	b2db      	uxtb	r3, r3
 80108aa:	f003 0301 	and.w	r3, r3, #1
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d005      	beq.n	80108be <tcp_zero_window_probe+0x72>
 80108b2:	6a3b      	ldr	r3, [r7, #32]
 80108b4:	891b      	ldrh	r3, [r3, #8]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d101      	bne.n	80108be <tcp_zero_window_probe+0x72>
 80108ba:	2301      	movs	r3, #1
 80108bc:	e000      	b.n	80108c0 <tcp_zero_window_probe+0x74>
 80108be:	2300      	movs	r3, #0
 80108c0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80108c2:	7ffb      	ldrb	r3, [r7, #31]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	bf0c      	ite	eq
 80108c8:	2301      	moveq	r3, #1
 80108ca:	2300      	movne	r3, #0
 80108cc:	b2db      	uxtb	r3, r3
 80108ce:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80108d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108d4:	b299      	uxth	r1, r3
 80108d6:	6a3b      	ldr	r3, [r7, #32]
 80108d8:	68db      	ldr	r3, [r3, #12]
 80108da:	685b      	ldr	r3, [r3, #4]
 80108dc:	8bba      	ldrh	r2, [r7, #28]
 80108de:	6878      	ldr	r0, [r7, #4]
 80108e0:	f7ff fdf8 	bl	80104d4 <tcp_output_alloc_header>
 80108e4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d102      	bne.n	80108f2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80108ec:	f04f 33ff 	mov.w	r3, #4294967295
 80108f0:	e04c      	b.n	801098c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80108f2:	69bb      	ldr	r3, [r7, #24]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80108f8:	7ffb      	ldrb	r3, [r7, #31]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d011      	beq.n	8010922 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80108fe:	697b      	ldr	r3, [r7, #20]
 8010900:	899b      	ldrh	r3, [r3, #12]
 8010902:	b29b      	uxth	r3, r3
 8010904:	b21b      	sxth	r3, r3
 8010906:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801090a:	b21c      	sxth	r4, r3
 801090c:	2011      	movs	r0, #17
 801090e:	f7f9 f9d1 	bl	8009cb4 <lwip_htons>
 8010912:	4603      	mov	r3, r0
 8010914:	b21b      	sxth	r3, r3
 8010916:	4323      	orrs	r3, r4
 8010918:	b21b      	sxth	r3, r3
 801091a:	b29a      	uxth	r2, r3
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	819a      	strh	r2, [r3, #12]
 8010920:	e010      	b.n	8010944 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010922:	69bb      	ldr	r3, [r7, #24]
 8010924:	685b      	ldr	r3, [r3, #4]
 8010926:	3314      	adds	r3, #20
 8010928:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801092a:	6a3b      	ldr	r3, [r7, #32]
 801092c:	6858      	ldr	r0, [r3, #4]
 801092e:	6a3b      	ldr	r3, [r7, #32]
 8010930:	685b      	ldr	r3, [r3, #4]
 8010932:	891a      	ldrh	r2, [r3, #8]
 8010934:	6a3b      	ldr	r3, [r7, #32]
 8010936:	891b      	ldrh	r3, [r3, #8]
 8010938:	1ad3      	subs	r3, r2, r3
 801093a:	b29b      	uxth	r3, r3
 801093c:	2201      	movs	r2, #1
 801093e:	6939      	ldr	r1, [r7, #16]
 8010940:	f7fa fe56 	bl	800b5f0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010944:	6a3b      	ldr	r3, [r7, #32]
 8010946:	68db      	ldr	r3, [r3, #12]
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	4618      	mov	r0, r3
 801094c:	f7f9 f9c7 	bl	8009cde <lwip_htonl>
 8010950:	4603      	mov	r3, r0
 8010952:	3301      	adds	r3, #1
 8010954:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	2b00      	cmp	r3, #0
 8010960:	da02      	bge.n	8010968 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	68fa      	ldr	r2, [r7, #12]
 8010966:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801096c:	2200      	movs	r2, #0
 801096e:	69b9      	ldr	r1, [r7, #24]
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f7ff fded 	bl	8010550 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	3304      	adds	r3, #4
 801097c:	69b9      	ldr	r1, [r7, #24]
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f7ff fe26 	bl	80105d0 <tcp_output_control_segment>
 8010984:	4603      	mov	r3, r0
 8010986:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010988:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801098c:	4618      	mov	r0, r3
 801098e:	372c      	adds	r7, #44	; 0x2c
 8010990:	46bd      	mov	sp, r7
 8010992:	bd90      	pop	{r4, r7, pc}
 8010994:	080164cc 	.word	0x080164cc
 8010998:	08016cc4 	.word	0x08016cc4
 801099c:	08016520 	.word	0x08016520

080109a0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b082      	sub	sp, #8
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80109a8:	f7fa ff10 	bl	800b7cc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80109ac:	4b0a      	ldr	r3, [pc, #40]	; (80109d8 <tcpip_tcp_timer+0x38>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d103      	bne.n	80109bc <tcpip_tcp_timer+0x1c>
 80109b4:	4b09      	ldr	r3, [pc, #36]	; (80109dc <tcpip_tcp_timer+0x3c>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d005      	beq.n	80109c8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80109bc:	2200      	movs	r2, #0
 80109be:	4908      	ldr	r1, [pc, #32]	; (80109e0 <tcpip_tcp_timer+0x40>)
 80109c0:	20fa      	movs	r0, #250	; 0xfa
 80109c2:	f000 f8f3 	bl	8010bac <sys_timeout>
 80109c6:	e003      	b.n	80109d0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80109c8:	4b06      	ldr	r3, [pc, #24]	; (80109e4 <tcpip_tcp_timer+0x44>)
 80109ca:	2200      	movs	r2, #0
 80109cc:	601a      	str	r2, [r3, #0]
  }
}
 80109ce:	bf00      	nop
 80109d0:	bf00      	nop
 80109d2:	3708      	adds	r7, #8
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}
 80109d8:	20008dc0 	.word	0x20008dc0
 80109dc:	20008dd0 	.word	0x20008dd0
 80109e0:	080109a1 	.word	0x080109a1
 80109e4:	20000114 	.word	0x20000114

080109e8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80109ec:	4b0a      	ldr	r3, [pc, #40]	; (8010a18 <tcp_timer_needed+0x30>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d10f      	bne.n	8010a14 <tcp_timer_needed+0x2c>
 80109f4:	4b09      	ldr	r3, [pc, #36]	; (8010a1c <tcp_timer_needed+0x34>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d103      	bne.n	8010a04 <tcp_timer_needed+0x1c>
 80109fc:	4b08      	ldr	r3, [pc, #32]	; (8010a20 <tcp_timer_needed+0x38>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d007      	beq.n	8010a14 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010a04:	4b04      	ldr	r3, [pc, #16]	; (8010a18 <tcp_timer_needed+0x30>)
 8010a06:	2201      	movs	r2, #1
 8010a08:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	4905      	ldr	r1, [pc, #20]	; (8010a24 <tcp_timer_needed+0x3c>)
 8010a0e:	20fa      	movs	r0, #250	; 0xfa
 8010a10:	f000 f8cc 	bl	8010bac <sys_timeout>
  }
}
 8010a14:	bf00      	nop
 8010a16:	bd80      	pop	{r7, pc}
 8010a18:	20000114 	.word	0x20000114
 8010a1c:	20008dc0 	.word	0x20008dc0
 8010a20:	20008dd0 	.word	0x20008dd0
 8010a24:	080109a1 	.word	0x080109a1

08010a28 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b086      	sub	sp, #24
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	60f8      	str	r0, [r7, #12]
 8010a30:	60b9      	str	r1, [r7, #8]
 8010a32:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010a34:	2006      	movs	r0, #6
 8010a36:	f7f9 fda3 	bl	800a580 <memp_malloc>
 8010a3a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d109      	bne.n	8010a56 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d151      	bne.n	8010aec <sys_timeout_abs+0xc4>
 8010a48:	4b2a      	ldr	r3, [pc, #168]	; (8010af4 <sys_timeout_abs+0xcc>)
 8010a4a:	22be      	movs	r2, #190	; 0xbe
 8010a4c:	492a      	ldr	r1, [pc, #168]	; (8010af8 <sys_timeout_abs+0xd0>)
 8010a4e:	482b      	ldr	r0, [pc, #172]	; (8010afc <sys_timeout_abs+0xd4>)
 8010a50:	f003 f842 	bl	8013ad8 <iprintf>
    return;
 8010a54:	e04a      	b.n	8010aec <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010a56:	693b      	ldr	r3, [r7, #16]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	68ba      	ldr	r2, [r7, #8]
 8010a60:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	687a      	ldr	r2, [r7, #4]
 8010a66:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	68fa      	ldr	r2, [r7, #12]
 8010a6c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010a6e:	4b24      	ldr	r3, [pc, #144]	; (8010b00 <sys_timeout_abs+0xd8>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d103      	bne.n	8010a7e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010a76:	4a22      	ldr	r2, [pc, #136]	; (8010b00 <sys_timeout_abs+0xd8>)
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	6013      	str	r3, [r2, #0]
    return;
 8010a7c:	e037      	b.n	8010aee <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	685a      	ldr	r2, [r3, #4]
 8010a82:	4b1f      	ldr	r3, [pc, #124]	; (8010b00 <sys_timeout_abs+0xd8>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	1ad3      	subs	r3, r2, r3
 8010a8a:	0fdb      	lsrs	r3, r3, #31
 8010a8c:	f003 0301 	and.w	r3, r3, #1
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d007      	beq.n	8010aa6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010a96:	4b1a      	ldr	r3, [pc, #104]	; (8010b00 <sys_timeout_abs+0xd8>)
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010a9e:	4a18      	ldr	r2, [pc, #96]	; (8010b00 <sys_timeout_abs+0xd8>)
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	6013      	str	r3, [r2, #0]
 8010aa4:	e023      	b.n	8010aee <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010aa6:	4b16      	ldr	r3, [pc, #88]	; (8010b00 <sys_timeout_abs+0xd8>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	617b      	str	r3, [r7, #20]
 8010aac:	e01a      	b.n	8010ae4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d00b      	beq.n	8010ace <sys_timeout_abs+0xa6>
 8010ab6:	693b      	ldr	r3, [r7, #16]
 8010ab8:	685a      	ldr	r2, [r3, #4]
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	1ad3      	subs	r3, r2, r3
 8010ac2:	0fdb      	lsrs	r3, r3, #31
 8010ac4:	f003 0301 	and.w	r3, r3, #1
 8010ac8:	b2db      	uxtb	r3, r3
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d007      	beq.n	8010ade <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	681a      	ldr	r2, [r3, #0]
 8010ad2:	693b      	ldr	r3, [r7, #16]
 8010ad4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010ad6:	697b      	ldr	r3, [r7, #20]
 8010ad8:	693a      	ldr	r2, [r7, #16]
 8010ada:	601a      	str	r2, [r3, #0]
        break;
 8010adc:	e007      	b.n	8010aee <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	617b      	str	r3, [r7, #20]
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d1e1      	bne.n	8010aae <sys_timeout_abs+0x86>
 8010aea:	e000      	b.n	8010aee <sys_timeout_abs+0xc6>
    return;
 8010aec:	bf00      	nop
      }
    }
  }
}
 8010aee:	3718      	adds	r7, #24
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	08016ce8 	.word	0x08016ce8
 8010af8:	08016d1c 	.word	0x08016d1c
 8010afc:	08016d5c 	.word	0x08016d5c
 8010b00:	2000010c 	.word	0x2000010c

08010b04 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b086      	sub	sp, #24
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	4798      	blx	r3

  now = sys_now();
 8010b16:	f7f9 f83f 	bl	8009b98 <sys_now>
 8010b1a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	4b0f      	ldr	r3, [pc, #60]	; (8010b60 <lwip_cyclic_timer+0x5c>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	4413      	add	r3, r2
 8010b26:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010b28:	68fa      	ldr	r2, [r7, #12]
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	1ad3      	subs	r3, r2, r3
 8010b2e:	0fdb      	lsrs	r3, r3, #31
 8010b30:	f003 0301 	and.w	r3, r3, #1
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d009      	beq.n	8010b4e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	681a      	ldr	r2, [r3, #0]
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	4413      	add	r3, r2
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	4907      	ldr	r1, [pc, #28]	; (8010b64 <lwip_cyclic_timer+0x60>)
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7ff ff6e 	bl	8010a28 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010b4c:	e004      	b.n	8010b58 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010b4e:	687a      	ldr	r2, [r7, #4]
 8010b50:	4904      	ldr	r1, [pc, #16]	; (8010b64 <lwip_cyclic_timer+0x60>)
 8010b52:	68f8      	ldr	r0, [r7, #12]
 8010b54:	f7ff ff68 	bl	8010a28 <sys_timeout_abs>
}
 8010b58:	bf00      	nop
 8010b5a:	3718      	adds	r7, #24
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd80      	pop	{r7, pc}
 8010b60:	20000110 	.word	0x20000110
 8010b64:	08010b05 	.word	0x08010b05

08010b68 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010b6e:	2301      	movs	r3, #1
 8010b70:	607b      	str	r3, [r7, #4]
 8010b72:	e00e      	b.n	8010b92 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010b74:	4a0b      	ldr	r2, [pc, #44]	; (8010ba4 <sys_timeouts_init+0x3c>)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	00db      	lsls	r3, r3, #3
 8010b80:	4a08      	ldr	r2, [pc, #32]	; (8010ba4 <sys_timeouts_init+0x3c>)
 8010b82:	4413      	add	r3, r2
 8010b84:	461a      	mov	r2, r3
 8010b86:	4908      	ldr	r1, [pc, #32]	; (8010ba8 <sys_timeouts_init+0x40>)
 8010b88:	f000 f810 	bl	8010bac <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	3301      	adds	r3, #1
 8010b90:	607b      	str	r3, [r7, #4]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2b02      	cmp	r3, #2
 8010b96:	d9ed      	bls.n	8010b74 <sys_timeouts_init+0xc>
  }
}
 8010b98:	bf00      	nop
 8010b9a:	bf00      	nop
 8010b9c:	3708      	adds	r7, #8
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}
 8010ba2:	bf00      	nop
 8010ba4:	080178d0 	.word	0x080178d0
 8010ba8:	08010b05 	.word	0x08010b05

08010bac <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b086      	sub	sp, #24
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	60f8      	str	r0, [r7, #12]
 8010bb4:	60b9      	str	r1, [r7, #8]
 8010bb6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010bbe:	d306      	bcc.n	8010bce <sys_timeout+0x22>
 8010bc0:	4b0a      	ldr	r3, [pc, #40]	; (8010bec <sys_timeout+0x40>)
 8010bc2:	f240 1229 	movw	r2, #297	; 0x129
 8010bc6:	490a      	ldr	r1, [pc, #40]	; (8010bf0 <sys_timeout+0x44>)
 8010bc8:	480a      	ldr	r0, [pc, #40]	; (8010bf4 <sys_timeout+0x48>)
 8010bca:	f002 ff85 	bl	8013ad8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010bce:	f7f8 ffe3 	bl	8009b98 <sys_now>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	4413      	add	r3, r2
 8010bd8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010bda:	687a      	ldr	r2, [r7, #4]
 8010bdc:	68b9      	ldr	r1, [r7, #8]
 8010bde:	6978      	ldr	r0, [r7, #20]
 8010be0:	f7ff ff22 	bl	8010a28 <sys_timeout_abs>
#endif
}
 8010be4:	bf00      	nop
 8010be6:	3718      	adds	r7, #24
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}
 8010bec:	08016ce8 	.word	0x08016ce8
 8010bf0:	08016d84 	.word	0x08016d84
 8010bf4:	08016d5c 	.word	0x08016d5c

08010bf8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010bfc:	f002 fffa 	bl	8013bf4 <rand>
 8010c00:	4603      	mov	r3, r0
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010c0e:	b29a      	uxth	r2, r3
 8010c10:	4b01      	ldr	r3, [pc, #4]	; (8010c18 <udp_init+0x20>)
 8010c12:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010c14:	bf00      	nop
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	20000014 	.word	0x20000014

08010c1c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b083      	sub	sp, #12
 8010c20:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8010c22:	2300      	movs	r3, #0
 8010c24:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010c26:	4b17      	ldr	r3, [pc, #92]	; (8010c84 <udp_new_port+0x68>)
 8010c28:	881b      	ldrh	r3, [r3, #0]
 8010c2a:	1c5a      	adds	r2, r3, #1
 8010c2c:	b291      	uxth	r1, r2
 8010c2e:	4a15      	ldr	r2, [pc, #84]	; (8010c84 <udp_new_port+0x68>)
 8010c30:	8011      	strh	r1, [r2, #0]
 8010c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d103      	bne.n	8010c42 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8010c3a:	4b12      	ldr	r3, [pc, #72]	; (8010c84 <udp_new_port+0x68>)
 8010c3c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010c40:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c42:	4b11      	ldr	r3, [pc, #68]	; (8010c88 <udp_new_port+0x6c>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	603b      	str	r3, [r7, #0]
 8010c48:	e011      	b.n	8010c6e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	8a5a      	ldrh	r2, [r3, #18]
 8010c4e:	4b0d      	ldr	r3, [pc, #52]	; (8010c84 <udp_new_port+0x68>)
 8010c50:	881b      	ldrh	r3, [r3, #0]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d108      	bne.n	8010c68 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010c56:	88fb      	ldrh	r3, [r7, #6]
 8010c58:	3301      	adds	r3, #1
 8010c5a:	80fb      	strh	r3, [r7, #6]
 8010c5c:	88fb      	ldrh	r3, [r7, #6]
 8010c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010c62:	d3e0      	bcc.n	8010c26 <udp_new_port+0xa>
        return 0;
 8010c64:	2300      	movs	r3, #0
 8010c66:	e007      	b.n	8010c78 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	68db      	ldr	r3, [r3, #12]
 8010c6c:	603b      	str	r3, [r7, #0]
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d1ea      	bne.n	8010c4a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010c74:	4b03      	ldr	r3, [pc, #12]	; (8010c84 <udp_new_port+0x68>)
 8010c76:	881b      	ldrh	r3, [r3, #0]
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	370c      	adds	r7, #12
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c82:	4770      	bx	lr
 8010c84:	20000014 	.word	0x20000014
 8010c88:	20008dd8 	.word	0x20008dd8

08010c8c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	60f8      	str	r0, [r7, #12]
 8010c94:	60b9      	str	r1, [r7, #8]
 8010c96:	4613      	mov	r3, r2
 8010c98:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d105      	bne.n	8010cac <udp_input_local_match+0x20>
 8010ca0:	4b27      	ldr	r3, [pc, #156]	; (8010d40 <udp_input_local_match+0xb4>)
 8010ca2:	2287      	movs	r2, #135	; 0x87
 8010ca4:	4927      	ldr	r1, [pc, #156]	; (8010d44 <udp_input_local_match+0xb8>)
 8010ca6:	4828      	ldr	r0, [pc, #160]	; (8010d48 <udp_input_local_match+0xbc>)
 8010ca8:	f002 ff16 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d105      	bne.n	8010cbe <udp_input_local_match+0x32>
 8010cb2:	4b23      	ldr	r3, [pc, #140]	; (8010d40 <udp_input_local_match+0xb4>)
 8010cb4:	2288      	movs	r2, #136	; 0x88
 8010cb6:	4925      	ldr	r1, [pc, #148]	; (8010d4c <udp_input_local_match+0xc0>)
 8010cb8:	4823      	ldr	r0, [pc, #140]	; (8010d48 <udp_input_local_match+0xbc>)
 8010cba:	f002 ff0d 	bl	8013ad8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	7a1b      	ldrb	r3, [r3, #8]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d00b      	beq.n	8010cde <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	7a1a      	ldrb	r2, [r3, #8]
 8010cca:	4b21      	ldr	r3, [pc, #132]	; (8010d50 <udp_input_local_match+0xc4>)
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d001      	beq.n	8010cde <udp_input_local_match+0x52>
    return 0;
 8010cda:	2300      	movs	r3, #0
 8010cdc:	e02b      	b.n	8010d36 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010cde:	79fb      	ldrb	r3, [r7, #7]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d018      	beq.n	8010d16 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d013      	beq.n	8010d12 <udp_input_local_match+0x86>
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d00f      	beq.n	8010d12 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010cf2:	4b17      	ldr	r3, [pc, #92]	; (8010d50 <udp_input_local_match+0xc4>)
 8010cf4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cfa:	d00a      	beq.n	8010d12 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	681a      	ldr	r2, [r3, #0]
 8010d00:	4b13      	ldr	r3, [pc, #76]	; (8010d50 <udp_input_local_match+0xc4>)
 8010d02:	695b      	ldr	r3, [r3, #20]
 8010d04:	405a      	eors	r2, r3
 8010d06:	68bb      	ldr	r3, [r7, #8]
 8010d08:	3308      	adds	r3, #8
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d110      	bne.n	8010d34 <udp_input_local_match+0xa8>
          return 1;
 8010d12:	2301      	movs	r3, #1
 8010d14:	e00f      	b.n	8010d36 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d009      	beq.n	8010d30 <udp_input_local_match+0xa4>
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d005      	beq.n	8010d30 <udp_input_local_match+0xa4>
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	681a      	ldr	r2, [r3, #0]
 8010d28:	4b09      	ldr	r3, [pc, #36]	; (8010d50 <udp_input_local_match+0xc4>)
 8010d2a:	695b      	ldr	r3, [r3, #20]
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d101      	bne.n	8010d34 <udp_input_local_match+0xa8>
        return 1;
 8010d30:	2301      	movs	r3, #1
 8010d32:	e000      	b.n	8010d36 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010d34:	2300      	movs	r3, #0
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3710      	adds	r7, #16
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	08016dd0 	.word	0x08016dd0
 8010d44:	08016e00 	.word	0x08016e00
 8010d48:	08016e24 	.word	0x08016e24
 8010d4c:	08016e4c 	.word	0x08016e4c
 8010d50:	20003cd4 	.word	0x20003cd4

08010d54 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010d54:	b590      	push	{r4, r7, lr}
 8010d56:	b08d      	sub	sp, #52	; 0x34
 8010d58:	af02      	add	r7, sp, #8
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d105      	bne.n	8010d74 <udp_input+0x20>
 8010d68:	4b7c      	ldr	r3, [pc, #496]	; (8010f5c <udp_input+0x208>)
 8010d6a:	22cf      	movs	r2, #207	; 0xcf
 8010d6c:	497c      	ldr	r1, [pc, #496]	; (8010f60 <udp_input+0x20c>)
 8010d6e:	487d      	ldr	r0, [pc, #500]	; (8010f64 <udp_input+0x210>)
 8010d70:	f002 feb2 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010d74:	683b      	ldr	r3, [r7, #0]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d105      	bne.n	8010d86 <udp_input+0x32>
 8010d7a:	4b78      	ldr	r3, [pc, #480]	; (8010f5c <udp_input+0x208>)
 8010d7c:	22d0      	movs	r2, #208	; 0xd0
 8010d7e:	497a      	ldr	r1, [pc, #488]	; (8010f68 <udp_input+0x214>)
 8010d80:	4878      	ldr	r0, [pc, #480]	; (8010f64 <udp_input+0x210>)
 8010d82:	f002 fea9 	bl	8013ad8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	895b      	ldrh	r3, [r3, #10]
 8010d8a:	2b07      	cmp	r3, #7
 8010d8c:	d803      	bhi.n	8010d96 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010d8e:	6878      	ldr	r0, [r7, #4]
 8010d90:	f7fa fa34 	bl	800b1fc <pbuf_free>
    goto end;
 8010d94:	e0de      	b.n	8010f54 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	685b      	ldr	r3, [r3, #4]
 8010d9a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010d9c:	4b73      	ldr	r3, [pc, #460]	; (8010f6c <udp_input+0x218>)
 8010d9e:	695b      	ldr	r3, [r3, #20]
 8010da0:	4a72      	ldr	r2, [pc, #456]	; (8010f6c <udp_input+0x218>)
 8010da2:	6812      	ldr	r2, [r2, #0]
 8010da4:	4611      	mov	r1, r2
 8010da6:	4618      	mov	r0, r3
 8010da8:	f001 fefe 	bl	8012ba8 <ip4_addr_isbroadcast_u32>
 8010dac:	4603      	mov	r3, r0
 8010dae:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	881b      	ldrh	r3, [r3, #0]
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7f8 ff7c 	bl	8009cb4 <lwip_htons>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	885b      	ldrh	r3, [r3, #2]
 8010dc4:	b29b      	uxth	r3, r3
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7f8 ff74 	bl	8009cb4 <lwip_htons>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ddc:	4b64      	ldr	r3, [pc, #400]	; (8010f70 <udp_input+0x21c>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	627b      	str	r3, [r7, #36]	; 0x24
 8010de2:	e054      	b.n	8010e8e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de6:	8a5b      	ldrh	r3, [r3, #18]
 8010de8:	89fa      	ldrh	r2, [r7, #14]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d14a      	bne.n	8010e84 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010dee:	7cfb      	ldrb	r3, [r7, #19]
 8010df0:	461a      	mov	r2, r3
 8010df2:	6839      	ldr	r1, [r7, #0]
 8010df4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010df6:	f7ff ff49 	bl	8010c8c <udp_input_local_match>
 8010dfa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d041      	beq.n	8010e84 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e02:	7c1b      	ldrb	r3, [r3, #16]
 8010e04:	f003 0304 	and.w	r3, r3, #4
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d11d      	bne.n	8010e48 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010e0c:	69fb      	ldr	r3, [r7, #28]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d102      	bne.n	8010e18 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e14:	61fb      	str	r3, [r7, #28]
 8010e16:	e017      	b.n	8010e48 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010e18:	7cfb      	ldrb	r3, [r7, #19]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d014      	beq.n	8010e48 <udp_input+0xf4>
 8010e1e:	4b53      	ldr	r3, [pc, #332]	; (8010f6c <udp_input+0x218>)
 8010e20:	695b      	ldr	r3, [r3, #20]
 8010e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e26:	d10f      	bne.n	8010e48 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010e28:	69fb      	ldr	r3, [r7, #28]
 8010e2a:	681a      	ldr	r2, [r3, #0]
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	3304      	adds	r3, #4
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d008      	beq.n	8010e48 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e38:	681a      	ldr	r2, [r3, #0]
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	3304      	adds	r3, #4
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d101      	bne.n	8010e48 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e46:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4a:	8a9b      	ldrh	r3, [r3, #20]
 8010e4c:	8a3a      	ldrh	r2, [r7, #16]
 8010e4e:	429a      	cmp	r2, r3
 8010e50:	d118      	bne.n	8010e84 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e54:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d005      	beq.n	8010e66 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5c:	685a      	ldr	r2, [r3, #4]
 8010e5e:	4b43      	ldr	r3, [pc, #268]	; (8010f6c <udp_input+0x218>)
 8010e60:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d10e      	bne.n	8010e84 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010e66:	6a3b      	ldr	r3, [r7, #32]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d014      	beq.n	8010e96 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6e:	68da      	ldr	r2, [r3, #12]
 8010e70:	6a3b      	ldr	r3, [r7, #32]
 8010e72:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010e74:	4b3e      	ldr	r3, [pc, #248]	; (8010f70 <udp_input+0x21c>)
 8010e76:	681a      	ldr	r2, [r3, #0]
 8010e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010e7c:	4a3c      	ldr	r2, [pc, #240]	; (8010f70 <udp_input+0x21c>)
 8010e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e80:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010e82:	e008      	b.n	8010e96 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e86:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8010e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d1a7      	bne.n	8010de4 <udp_input+0x90>
 8010e94:	e000      	b.n	8010e98 <udp_input+0x144>
        break;
 8010e96:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d101      	bne.n	8010ea2 <udp_input+0x14e>
    pcb = uncon_pcb;
 8010e9e:	69fb      	ldr	r3, [r7, #28]
 8010ea0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d002      	beq.n	8010eae <udp_input+0x15a>
    for_us = 1;
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	76fb      	strb	r3, [r7, #27]
 8010eac:	e00a      	b.n	8010ec4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	3304      	adds	r3, #4
 8010eb2:	681a      	ldr	r2, [r3, #0]
 8010eb4:	4b2d      	ldr	r3, [pc, #180]	; (8010f6c <udp_input+0x218>)
 8010eb6:	695b      	ldr	r3, [r3, #20]
 8010eb8:	429a      	cmp	r2, r3
 8010eba:	bf0c      	ite	eq
 8010ebc:	2301      	moveq	r3, #1
 8010ebe:	2300      	movne	r3, #0
 8010ec0:	b2db      	uxtb	r3, r3
 8010ec2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010ec4:	7efb      	ldrb	r3, [r7, #27]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d041      	beq.n	8010f4e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010eca:	2108      	movs	r1, #8
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f7fa f90f 	bl	800b0f0 <pbuf_remove_header>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d00a      	beq.n	8010eee <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010ed8:	4b20      	ldr	r3, [pc, #128]	; (8010f5c <udp_input+0x208>)
 8010eda:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010ede:	4925      	ldr	r1, [pc, #148]	; (8010f74 <udp_input+0x220>)
 8010ee0:	4820      	ldr	r0, [pc, #128]	; (8010f64 <udp_input+0x210>)
 8010ee2:	f002 fdf9 	bl	8013ad8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f7fa f988 	bl	800b1fc <pbuf_free>
      goto end;
 8010eec:	e032      	b.n	8010f54 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d012      	beq.n	8010f1a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef6:	699b      	ldr	r3, [r3, #24]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d00a      	beq.n	8010f12 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efe:	699c      	ldr	r4, [r3, #24]
 8010f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f02:	69d8      	ldr	r0, [r3, #28]
 8010f04:	8a3b      	ldrh	r3, [r7, #16]
 8010f06:	9300      	str	r3, [sp, #0]
 8010f08:	4b1b      	ldr	r3, [pc, #108]	; (8010f78 <udp_input+0x224>)
 8010f0a:	687a      	ldr	r2, [r7, #4]
 8010f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f0e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010f10:	e021      	b.n	8010f56 <udp_input+0x202>
        pbuf_free(p);
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f7fa f972 	bl	800b1fc <pbuf_free>
        goto end;
 8010f18:	e01c      	b.n	8010f54 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8010f1a:	7cfb      	ldrb	r3, [r7, #19]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d112      	bne.n	8010f46 <udp_input+0x1f2>
 8010f20:	4b12      	ldr	r3, [pc, #72]	; (8010f6c <udp_input+0x218>)
 8010f22:	695b      	ldr	r3, [r3, #20]
 8010f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f28:	2be0      	cmp	r3, #224	; 0xe0
 8010f2a:	d00c      	beq.n	8010f46 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010f2c:	4b0f      	ldr	r3, [pc, #60]	; (8010f6c <udp_input+0x218>)
 8010f2e:	899b      	ldrh	r3, [r3, #12]
 8010f30:	3308      	adds	r3, #8
 8010f32:	b29b      	uxth	r3, r3
 8010f34:	b21b      	sxth	r3, r3
 8010f36:	4619      	mov	r1, r3
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f7fa f94c 	bl	800b1d6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010f3e:	2103      	movs	r1, #3
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f001 fb11 	bl	8012568 <icmp_dest_unreach>
      pbuf_free(p);
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f7fa f958 	bl	800b1fc <pbuf_free>
  return;
 8010f4c:	e003      	b.n	8010f56 <udp_input+0x202>
    pbuf_free(p);
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f7fa f954 	bl	800b1fc <pbuf_free>
  return;
 8010f54:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8010f56:	372c      	adds	r7, #44	; 0x2c
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd90      	pop	{r4, r7, pc}
 8010f5c:	08016dd0 	.word	0x08016dd0
 8010f60:	08016e74 	.word	0x08016e74
 8010f64:	08016e24 	.word	0x08016e24
 8010f68:	08016e8c 	.word	0x08016e8c
 8010f6c:	20003cd4 	.word	0x20003cd4
 8010f70:	20008dd8 	.word	0x20008dd8
 8010f74:	08016ea8 	.word	0x08016ea8
 8010f78:	20003ce4 	.word	0x20003ce4

08010f7c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b088      	sub	sp, #32
 8010f80:	af02      	add	r7, sp, #8
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	607a      	str	r2, [r7, #4]
 8010f88:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d109      	bne.n	8010fa4 <udp_sendto+0x28>
 8010f90:	4b23      	ldr	r3, [pc, #140]	; (8011020 <udp_sendto+0xa4>)
 8010f92:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010f96:	4923      	ldr	r1, [pc, #140]	; (8011024 <udp_sendto+0xa8>)
 8010f98:	4823      	ldr	r0, [pc, #140]	; (8011028 <udp_sendto+0xac>)
 8010f9a:	f002 fd9d 	bl	8013ad8 <iprintf>
 8010f9e:	f06f 030f 	mvn.w	r3, #15
 8010fa2:	e038      	b.n	8011016 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d109      	bne.n	8010fbe <udp_sendto+0x42>
 8010faa:	4b1d      	ldr	r3, [pc, #116]	; (8011020 <udp_sendto+0xa4>)
 8010fac:	f240 2219 	movw	r2, #537	; 0x219
 8010fb0:	491e      	ldr	r1, [pc, #120]	; (801102c <udp_sendto+0xb0>)
 8010fb2:	481d      	ldr	r0, [pc, #116]	; (8011028 <udp_sendto+0xac>)
 8010fb4:	f002 fd90 	bl	8013ad8 <iprintf>
 8010fb8:	f06f 030f 	mvn.w	r3, #15
 8010fbc:	e02b      	b.n	8011016 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d109      	bne.n	8010fd8 <udp_sendto+0x5c>
 8010fc4:	4b16      	ldr	r3, [pc, #88]	; (8011020 <udp_sendto+0xa4>)
 8010fc6:	f240 221a 	movw	r2, #538	; 0x21a
 8010fca:	4919      	ldr	r1, [pc, #100]	; (8011030 <udp_sendto+0xb4>)
 8010fcc:	4816      	ldr	r0, [pc, #88]	; (8011028 <udp_sendto+0xac>)
 8010fce:	f002 fd83 	bl	8013ad8 <iprintf>
 8010fd2:	f06f 030f 	mvn.w	r3, #15
 8010fd6:	e01e      	b.n	8011016 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	7a1b      	ldrb	r3, [r3, #8]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d006      	beq.n	8010fee <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	7a1b      	ldrb	r3, [r3, #8]
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7f9 fdc9 	bl	800ab7c <netif_get_by_index>
 8010fea:	6178      	str	r0, [r7, #20]
 8010fec:	e003      	b.n	8010ff6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f001 fb44 	bl	801267c <ip4_route>
 8010ff4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d102      	bne.n	8011002 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8010ffc:	f06f 0303 	mvn.w	r3, #3
 8011000:	e009      	b.n	8011016 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8011002:	887a      	ldrh	r2, [r7, #2]
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	9300      	str	r3, [sp, #0]
 8011008:	4613      	mov	r3, r2
 801100a:	687a      	ldr	r2, [r7, #4]
 801100c:	68b9      	ldr	r1, [r7, #8]
 801100e:	68f8      	ldr	r0, [r7, #12]
 8011010:	f000 f810 	bl	8011034 <udp_sendto_if>
 8011014:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011016:	4618      	mov	r0, r3
 8011018:	3718      	adds	r7, #24
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	08016dd0 	.word	0x08016dd0
 8011024:	08016ef4 	.word	0x08016ef4
 8011028:	08016e24 	.word	0x08016e24
 801102c:	08016f0c 	.word	0x08016f0c
 8011030:	08016f28 	.word	0x08016f28

08011034 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b088      	sub	sp, #32
 8011038:	af02      	add	r7, sp, #8
 801103a:	60f8      	str	r0, [r7, #12]
 801103c:	60b9      	str	r1, [r7, #8]
 801103e:	607a      	str	r2, [r7, #4]
 8011040:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d109      	bne.n	801105c <udp_sendto_if+0x28>
 8011048:	4b2e      	ldr	r3, [pc, #184]	; (8011104 <udp_sendto_if+0xd0>)
 801104a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801104e:	492e      	ldr	r1, [pc, #184]	; (8011108 <udp_sendto_if+0xd4>)
 8011050:	482e      	ldr	r0, [pc, #184]	; (801110c <udp_sendto_if+0xd8>)
 8011052:	f002 fd41 	bl	8013ad8 <iprintf>
 8011056:	f06f 030f 	mvn.w	r3, #15
 801105a:	e04f      	b.n	80110fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d109      	bne.n	8011076 <udp_sendto_if+0x42>
 8011062:	4b28      	ldr	r3, [pc, #160]	; (8011104 <udp_sendto_if+0xd0>)
 8011064:	f240 2281 	movw	r2, #641	; 0x281
 8011068:	4929      	ldr	r1, [pc, #164]	; (8011110 <udp_sendto_if+0xdc>)
 801106a:	4828      	ldr	r0, [pc, #160]	; (801110c <udp_sendto_if+0xd8>)
 801106c:	f002 fd34 	bl	8013ad8 <iprintf>
 8011070:	f06f 030f 	mvn.w	r3, #15
 8011074:	e042      	b.n	80110fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d109      	bne.n	8011090 <udp_sendto_if+0x5c>
 801107c:	4b21      	ldr	r3, [pc, #132]	; (8011104 <udp_sendto_if+0xd0>)
 801107e:	f240 2282 	movw	r2, #642	; 0x282
 8011082:	4924      	ldr	r1, [pc, #144]	; (8011114 <udp_sendto_if+0xe0>)
 8011084:	4821      	ldr	r0, [pc, #132]	; (801110c <udp_sendto_if+0xd8>)
 8011086:	f002 fd27 	bl	8013ad8 <iprintf>
 801108a:	f06f 030f 	mvn.w	r3, #15
 801108e:	e035      	b.n	80110fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011090:	6a3b      	ldr	r3, [r7, #32]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d109      	bne.n	80110aa <udp_sendto_if+0x76>
 8011096:	4b1b      	ldr	r3, [pc, #108]	; (8011104 <udp_sendto_if+0xd0>)
 8011098:	f240 2283 	movw	r2, #643	; 0x283
 801109c:	491e      	ldr	r1, [pc, #120]	; (8011118 <udp_sendto_if+0xe4>)
 801109e:	481b      	ldr	r0, [pc, #108]	; (801110c <udp_sendto_if+0xd8>)
 80110a0:	f002 fd1a 	bl	8013ad8 <iprintf>
 80110a4:	f06f 030f 	mvn.w	r3, #15
 80110a8:	e028      	b.n	80110fc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d009      	beq.n	80110c4 <udp_sendto_if+0x90>
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d005      	beq.n	80110c4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80110c0:	2be0      	cmp	r3, #224	; 0xe0
 80110c2:	d103      	bne.n	80110cc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80110c4:	6a3b      	ldr	r3, [r7, #32]
 80110c6:	3304      	adds	r3, #4
 80110c8:	617b      	str	r3, [r7, #20]
 80110ca:	e00b      	b.n	80110e4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	6a3b      	ldr	r3, [r7, #32]
 80110d2:	3304      	adds	r3, #4
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d002      	beq.n	80110e0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80110da:	f06f 0303 	mvn.w	r3, #3
 80110de:	e00d      	b.n	80110fc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80110e4:	887a      	ldrh	r2, [r7, #2]
 80110e6:	697b      	ldr	r3, [r7, #20]
 80110e8:	9301      	str	r3, [sp, #4]
 80110ea:	6a3b      	ldr	r3, [r7, #32]
 80110ec:	9300      	str	r3, [sp, #0]
 80110ee:	4613      	mov	r3, r2
 80110f0:	687a      	ldr	r2, [r7, #4]
 80110f2:	68b9      	ldr	r1, [r7, #8]
 80110f4:	68f8      	ldr	r0, [r7, #12]
 80110f6:	f000 f811 	bl	801111c <udp_sendto_if_src>
 80110fa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3718      	adds	r7, #24
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}
 8011104:	08016dd0 	.word	0x08016dd0
 8011108:	08016f44 	.word	0x08016f44
 801110c:	08016e24 	.word	0x08016e24
 8011110:	08016f60 	.word	0x08016f60
 8011114:	08016f7c 	.word	0x08016f7c
 8011118:	08016f9c 	.word	0x08016f9c

0801111c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b08c      	sub	sp, #48	; 0x30
 8011120:	af04      	add	r7, sp, #16
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	607a      	str	r2, [r7, #4]
 8011128:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d109      	bne.n	8011144 <udp_sendto_if_src+0x28>
 8011130:	4b65      	ldr	r3, [pc, #404]	; (80112c8 <udp_sendto_if_src+0x1ac>)
 8011132:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011136:	4965      	ldr	r1, [pc, #404]	; (80112cc <udp_sendto_if_src+0x1b0>)
 8011138:	4865      	ldr	r0, [pc, #404]	; (80112d0 <udp_sendto_if_src+0x1b4>)
 801113a:	f002 fccd 	bl	8013ad8 <iprintf>
 801113e:	f06f 030f 	mvn.w	r3, #15
 8011142:	e0bc      	b.n	80112be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d109      	bne.n	801115e <udp_sendto_if_src+0x42>
 801114a:	4b5f      	ldr	r3, [pc, #380]	; (80112c8 <udp_sendto_if_src+0x1ac>)
 801114c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011150:	4960      	ldr	r1, [pc, #384]	; (80112d4 <udp_sendto_if_src+0x1b8>)
 8011152:	485f      	ldr	r0, [pc, #380]	; (80112d0 <udp_sendto_if_src+0x1b4>)
 8011154:	f002 fcc0 	bl	8013ad8 <iprintf>
 8011158:	f06f 030f 	mvn.w	r3, #15
 801115c:	e0af      	b.n	80112be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d109      	bne.n	8011178 <udp_sendto_if_src+0x5c>
 8011164:	4b58      	ldr	r3, [pc, #352]	; (80112c8 <udp_sendto_if_src+0x1ac>)
 8011166:	f240 22d3 	movw	r2, #723	; 0x2d3
 801116a:	495b      	ldr	r1, [pc, #364]	; (80112d8 <udp_sendto_if_src+0x1bc>)
 801116c:	4858      	ldr	r0, [pc, #352]	; (80112d0 <udp_sendto_if_src+0x1b4>)
 801116e:	f002 fcb3 	bl	8013ad8 <iprintf>
 8011172:	f06f 030f 	mvn.w	r3, #15
 8011176:	e0a2      	b.n	80112be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117a:	2b00      	cmp	r3, #0
 801117c:	d109      	bne.n	8011192 <udp_sendto_if_src+0x76>
 801117e:	4b52      	ldr	r3, [pc, #328]	; (80112c8 <udp_sendto_if_src+0x1ac>)
 8011180:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011184:	4955      	ldr	r1, [pc, #340]	; (80112dc <udp_sendto_if_src+0x1c0>)
 8011186:	4852      	ldr	r0, [pc, #328]	; (80112d0 <udp_sendto_if_src+0x1b4>)
 8011188:	f002 fca6 	bl	8013ad8 <iprintf>
 801118c:	f06f 030f 	mvn.w	r3, #15
 8011190:	e095      	b.n	80112be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011194:	2b00      	cmp	r3, #0
 8011196:	d109      	bne.n	80111ac <udp_sendto_if_src+0x90>
 8011198:	4b4b      	ldr	r3, [pc, #300]	; (80112c8 <udp_sendto_if_src+0x1ac>)
 801119a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801119e:	4950      	ldr	r1, [pc, #320]	; (80112e0 <udp_sendto_if_src+0x1c4>)
 80111a0:	484b      	ldr	r0, [pc, #300]	; (80112d0 <udp_sendto_if_src+0x1b4>)
 80111a2:	f002 fc99 	bl	8013ad8 <iprintf>
 80111a6:	f06f 030f 	mvn.w	r3, #15
 80111aa:	e088      	b.n	80112be <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	8a5b      	ldrh	r3, [r3, #18]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d10f      	bne.n	80111d4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80111b4:	68f9      	ldr	r1, [r7, #12]
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	8a5b      	ldrh	r3, [r3, #18]
 80111ba:	461a      	mov	r2, r3
 80111bc:	68f8      	ldr	r0, [r7, #12]
 80111be:	f000 f893 	bl	80112e8 <udp_bind>
 80111c2:	4603      	mov	r3, r0
 80111c4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80111c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d002      	beq.n	80111d4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80111ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80111d2:	e074      	b.n	80112be <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	891b      	ldrh	r3, [r3, #8]
 80111d8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80111dc:	4293      	cmp	r3, r2
 80111de:	d902      	bls.n	80111e6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80111e0:	f04f 33ff 	mov.w	r3, #4294967295
 80111e4:	e06b      	b.n	80112be <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80111e6:	2108      	movs	r1, #8
 80111e8:	68b8      	ldr	r0, [r7, #8]
 80111ea:	f7f9 ff71 	bl	800b0d0 <pbuf_add_header>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d015      	beq.n	8011220 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80111f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80111f8:	2108      	movs	r1, #8
 80111fa:	2022      	movs	r0, #34	; 0x22
 80111fc:	f7f9 fd1a 	bl	800ac34 <pbuf_alloc>
 8011200:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011202:	69fb      	ldr	r3, [r7, #28]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d102      	bne.n	801120e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011208:	f04f 33ff 	mov.w	r3, #4294967295
 801120c:	e057      	b.n	80112be <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	891b      	ldrh	r3, [r3, #8]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d006      	beq.n	8011224 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011216:	68b9      	ldr	r1, [r7, #8]
 8011218:	69f8      	ldr	r0, [r7, #28]
 801121a:	f7fa f907 	bl	800b42c <pbuf_chain>
 801121e:	e001      	b.n	8011224 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011224:	69fb      	ldr	r3, [r7, #28]
 8011226:	895b      	ldrh	r3, [r3, #10]
 8011228:	2b07      	cmp	r3, #7
 801122a:	d806      	bhi.n	801123a <udp_sendto_if_src+0x11e>
 801122c:	4b26      	ldr	r3, [pc, #152]	; (80112c8 <udp_sendto_if_src+0x1ac>)
 801122e:	f240 320d 	movw	r2, #781	; 0x30d
 8011232:	492c      	ldr	r1, [pc, #176]	; (80112e4 <udp_sendto_if_src+0x1c8>)
 8011234:	4826      	ldr	r0, [pc, #152]	; (80112d0 <udp_sendto_if_src+0x1b4>)
 8011236:	f002 fc4f 	bl	8013ad8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	8a5b      	ldrh	r3, [r3, #18]
 8011244:	4618      	mov	r0, r3
 8011246:	f7f8 fd35 	bl	8009cb4 <lwip_htons>
 801124a:	4603      	mov	r3, r0
 801124c:	461a      	mov	r2, r3
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011252:	887b      	ldrh	r3, [r7, #2]
 8011254:	4618      	mov	r0, r3
 8011256:	f7f8 fd2d 	bl	8009cb4 <lwip_htons>
 801125a:	4603      	mov	r3, r0
 801125c:	461a      	mov	r2, r3
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	2200      	movs	r2, #0
 8011266:	719a      	strb	r2, [r3, #6]
 8011268:	2200      	movs	r2, #0
 801126a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801126c:	69fb      	ldr	r3, [r7, #28]
 801126e:	891b      	ldrh	r3, [r3, #8]
 8011270:	4618      	mov	r0, r3
 8011272:	f7f8 fd1f 	bl	8009cb4 <lwip_htons>
 8011276:	4603      	mov	r3, r0
 8011278:	461a      	mov	r2, r3
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801127e:	2311      	movs	r3, #17
 8011280:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	7adb      	ldrb	r3, [r3, #11]
 8011286:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	7a9b      	ldrb	r3, [r3, #10]
 801128c:	7cb9      	ldrb	r1, [r7, #18]
 801128e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011290:	9202      	str	r2, [sp, #8]
 8011292:	7cfa      	ldrb	r2, [r7, #19]
 8011294:	9201      	str	r2, [sp, #4]
 8011296:	9300      	str	r3, [sp, #0]
 8011298:	460b      	mov	r3, r1
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801129e:	69f8      	ldr	r0, [r7, #28]
 80112a0:	f001 fbd4 	bl	8012a4c <ip4_output_if_src>
 80112a4:	4603      	mov	r3, r0
 80112a6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80112a8:	69fa      	ldr	r2, [r7, #28]
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d004      	beq.n	80112ba <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80112b0:	69f8      	ldr	r0, [r7, #28]
 80112b2:	f7f9 ffa3 	bl	800b1fc <pbuf_free>
    q = NULL;
 80112b6:	2300      	movs	r3, #0
 80112b8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80112ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3720      	adds	r7, #32
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	08016dd0 	.word	0x08016dd0
 80112cc:	08016fbc 	.word	0x08016fbc
 80112d0:	08016e24 	.word	0x08016e24
 80112d4:	08016fdc 	.word	0x08016fdc
 80112d8:	08016ffc 	.word	0x08016ffc
 80112dc:	08017020 	.word	0x08017020
 80112e0:	08017044 	.word	0x08017044
 80112e4:	08017068 	.word	0x08017068

080112e8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b086      	sub	sp, #24
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	60f8      	str	r0, [r7, #12]
 80112f0:	60b9      	str	r1, [r7, #8]
 80112f2:	4613      	mov	r3, r2
 80112f4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d101      	bne.n	8011300 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80112fc:	4b39      	ldr	r3, [pc, #228]	; (80113e4 <udp_bind+0xfc>)
 80112fe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d109      	bne.n	801131a <udp_bind+0x32>
 8011306:	4b38      	ldr	r3, [pc, #224]	; (80113e8 <udp_bind+0x100>)
 8011308:	f240 32b7 	movw	r2, #951	; 0x3b7
 801130c:	4937      	ldr	r1, [pc, #220]	; (80113ec <udp_bind+0x104>)
 801130e:	4838      	ldr	r0, [pc, #224]	; (80113f0 <udp_bind+0x108>)
 8011310:	f002 fbe2 	bl	8013ad8 <iprintf>
 8011314:	f06f 030f 	mvn.w	r3, #15
 8011318:	e060      	b.n	80113dc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801131a:	2300      	movs	r3, #0
 801131c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801131e:	4b35      	ldr	r3, [pc, #212]	; (80113f4 <udp_bind+0x10c>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	617b      	str	r3, [r7, #20]
 8011324:	e009      	b.n	801133a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011326:	68fa      	ldr	r2, [r7, #12]
 8011328:	697b      	ldr	r3, [r7, #20]
 801132a:	429a      	cmp	r2, r3
 801132c:	d102      	bne.n	8011334 <udp_bind+0x4c>
      rebind = 1;
 801132e:	2301      	movs	r3, #1
 8011330:	74fb      	strb	r3, [r7, #19]
      break;
 8011332:	e005      	b.n	8011340 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011334:	697b      	ldr	r3, [r7, #20]
 8011336:	68db      	ldr	r3, [r3, #12]
 8011338:	617b      	str	r3, [r7, #20]
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d1f2      	bne.n	8011326 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011340:	88fb      	ldrh	r3, [r7, #6]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d109      	bne.n	801135a <udp_bind+0x72>
    port = udp_new_port();
 8011346:	f7ff fc69 	bl	8010c1c <udp_new_port>
 801134a:	4603      	mov	r3, r0
 801134c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801134e:	88fb      	ldrh	r3, [r7, #6]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d12c      	bne.n	80113ae <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011354:	f06f 0307 	mvn.w	r3, #7
 8011358:	e040      	b.n	80113dc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801135a:	4b26      	ldr	r3, [pc, #152]	; (80113f4 <udp_bind+0x10c>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	617b      	str	r3, [r7, #20]
 8011360:	e022      	b.n	80113a8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011362:	68fa      	ldr	r2, [r7, #12]
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	429a      	cmp	r2, r3
 8011368:	d01b      	beq.n	80113a2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	8a5b      	ldrh	r3, [r3, #18]
 801136e:	88fa      	ldrh	r2, [r7, #6]
 8011370:	429a      	cmp	r2, r3
 8011372:	d116      	bne.n	80113a2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011374:	697b      	ldr	r3, [r7, #20]
 8011376:	681a      	ldr	r2, [r3, #0]
 8011378:	68bb      	ldr	r3, [r7, #8]
 801137a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801137c:	429a      	cmp	r2, r3
 801137e:	d00d      	beq.n	801139c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d00a      	beq.n	801139c <udp_bind+0xb4>
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d006      	beq.n	801139c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801138e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011390:	2b00      	cmp	r3, #0
 8011392:	d003      	beq.n	801139c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d102      	bne.n	80113a2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801139c:	f06f 0307 	mvn.w	r3, #7
 80113a0:	e01c      	b.n	80113dc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	68db      	ldr	r3, [r3, #12]
 80113a6:	617b      	str	r3, [r7, #20]
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d1d9      	bne.n	8011362 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d002      	beq.n	80113ba <udp_bind+0xd2>
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	e000      	b.n	80113bc <udp_bind+0xd4>
 80113ba:	2300      	movs	r3, #0
 80113bc:	68fa      	ldr	r2, [r7, #12]
 80113be:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	88fa      	ldrh	r2, [r7, #6]
 80113c4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80113c6:	7cfb      	ldrb	r3, [r7, #19]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d106      	bne.n	80113da <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80113cc:	4b09      	ldr	r3, [pc, #36]	; (80113f4 <udp_bind+0x10c>)
 80113ce:	681a      	ldr	r2, [r3, #0]
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80113d4:	4a07      	ldr	r2, [pc, #28]	; (80113f4 <udp_bind+0x10c>)
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80113da:	2300      	movs	r3, #0
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3718      	adds	r7, #24
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}
 80113e4:	080178e8 	.word	0x080178e8
 80113e8:	08016dd0 	.word	0x08016dd0
 80113ec:	08017098 	.word	0x08017098
 80113f0:	08016e24 	.word	0x08016e24
 80113f4:	20008dd8 	.word	0x20008dd8

080113f8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	60f8      	str	r0, [r7, #12]
 8011400:	60b9      	str	r1, [r7, #8]
 8011402:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d107      	bne.n	801141a <udp_recv+0x22>
 801140a:	4b08      	ldr	r3, [pc, #32]	; (801142c <udp_recv+0x34>)
 801140c:	f240 428a 	movw	r2, #1162	; 0x48a
 8011410:	4907      	ldr	r1, [pc, #28]	; (8011430 <udp_recv+0x38>)
 8011412:	4808      	ldr	r0, [pc, #32]	; (8011434 <udp_recv+0x3c>)
 8011414:	f002 fb60 	bl	8013ad8 <iprintf>
 8011418:	e005      	b.n	8011426 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	68ba      	ldr	r2, [r7, #8]
 801141e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	687a      	ldr	r2, [r7, #4]
 8011424:	61da      	str	r2, [r3, #28]
}
 8011426:	3710      	adds	r7, #16
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}
 801142c:	08016dd0 	.word	0x08016dd0
 8011430:	08017104 	.word	0x08017104
 8011434:	08016e24 	.word	0x08016e24

08011438 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801143e:	2000      	movs	r0, #0
 8011440:	f7f9 f89e 	bl	800a580 <memp_malloc>
 8011444:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d007      	beq.n	801145c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801144c:	2220      	movs	r2, #32
 801144e:	2100      	movs	r1, #0
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f002 fb39 	bl	8013ac8 <memset>
    pcb->ttl = UDP_TTL;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	22ff      	movs	r2, #255	; 0xff
 801145a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801145c:	687b      	ldr	r3, [r7, #4]
}
 801145e:	4618      	mov	r0, r3
 8011460:	3708      	adds	r7, #8
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
	...

08011468 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011468:	b480      	push	{r7}
 801146a:	b085      	sub	sp, #20
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d01e      	beq.n	80114b6 <udp_netif_ip_addr_changed+0x4e>
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d01a      	beq.n	80114b6 <udp_netif_ip_addr_changed+0x4e>
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d017      	beq.n	80114b6 <udp_netif_ip_addr_changed+0x4e>
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d013      	beq.n	80114b6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801148e:	4b0d      	ldr	r3, [pc, #52]	; (80114c4 <udp_netif_ip_addr_changed+0x5c>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	60fb      	str	r3, [r7, #12]
 8011494:	e00c      	b.n	80114b0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d103      	bne.n	80114aa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	60fb      	str	r3, [r7, #12]
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d1ef      	bne.n	8011496 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80114b6:	bf00      	nop
 80114b8:	3714      	adds	r7, #20
 80114ba:	46bd      	mov	sp, r7
 80114bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop
 80114c4:	20008dd8 	.word	0x20008dd8

080114c8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80114d0:	4915      	ldr	r1, [pc, #84]	; (8011528 <etharp_free_entry+0x60>)
 80114d2:	687a      	ldr	r2, [r7, #4]
 80114d4:	4613      	mov	r3, r2
 80114d6:	005b      	lsls	r3, r3, #1
 80114d8:	4413      	add	r3, r2
 80114da:	00db      	lsls	r3, r3, #3
 80114dc:	440b      	add	r3, r1
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d013      	beq.n	801150c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80114e4:	4910      	ldr	r1, [pc, #64]	; (8011528 <etharp_free_entry+0x60>)
 80114e6:	687a      	ldr	r2, [r7, #4]
 80114e8:	4613      	mov	r3, r2
 80114ea:	005b      	lsls	r3, r3, #1
 80114ec:	4413      	add	r3, r2
 80114ee:	00db      	lsls	r3, r3, #3
 80114f0:	440b      	add	r3, r1
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7f9 fe81 	bl	800b1fc <pbuf_free>
    arp_table[i].q = NULL;
 80114fa:	490b      	ldr	r1, [pc, #44]	; (8011528 <etharp_free_entry+0x60>)
 80114fc:	687a      	ldr	r2, [r7, #4]
 80114fe:	4613      	mov	r3, r2
 8011500:	005b      	lsls	r3, r3, #1
 8011502:	4413      	add	r3, r2
 8011504:	00db      	lsls	r3, r3, #3
 8011506:	440b      	add	r3, r1
 8011508:	2200      	movs	r2, #0
 801150a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801150c:	4906      	ldr	r1, [pc, #24]	; (8011528 <etharp_free_entry+0x60>)
 801150e:	687a      	ldr	r2, [r7, #4]
 8011510:	4613      	mov	r3, r2
 8011512:	005b      	lsls	r3, r3, #1
 8011514:	4413      	add	r3, r2
 8011516:	00db      	lsls	r3, r3, #3
 8011518:	440b      	add	r3, r1
 801151a:	3314      	adds	r3, #20
 801151c:	2200      	movs	r2, #0
 801151e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011520:	bf00      	nop
 8011522:	3708      	adds	r7, #8
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}
 8011528:	20000118 	.word	0x20000118

0801152c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b082      	sub	sp, #8
 8011530:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011532:	2300      	movs	r3, #0
 8011534:	607b      	str	r3, [r7, #4]
 8011536:	e096      	b.n	8011666 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011538:	494f      	ldr	r1, [pc, #316]	; (8011678 <etharp_tmr+0x14c>)
 801153a:	687a      	ldr	r2, [r7, #4]
 801153c:	4613      	mov	r3, r2
 801153e:	005b      	lsls	r3, r3, #1
 8011540:	4413      	add	r3, r2
 8011542:	00db      	lsls	r3, r3, #3
 8011544:	440b      	add	r3, r1
 8011546:	3314      	adds	r3, #20
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801154c:	78fb      	ldrb	r3, [r7, #3]
 801154e:	2b00      	cmp	r3, #0
 8011550:	f000 8086 	beq.w	8011660 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011554:	4948      	ldr	r1, [pc, #288]	; (8011678 <etharp_tmr+0x14c>)
 8011556:	687a      	ldr	r2, [r7, #4]
 8011558:	4613      	mov	r3, r2
 801155a:	005b      	lsls	r3, r3, #1
 801155c:	4413      	add	r3, r2
 801155e:	00db      	lsls	r3, r3, #3
 8011560:	440b      	add	r3, r1
 8011562:	3312      	adds	r3, #18
 8011564:	881b      	ldrh	r3, [r3, #0]
 8011566:	3301      	adds	r3, #1
 8011568:	b298      	uxth	r0, r3
 801156a:	4943      	ldr	r1, [pc, #268]	; (8011678 <etharp_tmr+0x14c>)
 801156c:	687a      	ldr	r2, [r7, #4]
 801156e:	4613      	mov	r3, r2
 8011570:	005b      	lsls	r3, r3, #1
 8011572:	4413      	add	r3, r2
 8011574:	00db      	lsls	r3, r3, #3
 8011576:	440b      	add	r3, r1
 8011578:	3312      	adds	r3, #18
 801157a:	4602      	mov	r2, r0
 801157c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801157e:	493e      	ldr	r1, [pc, #248]	; (8011678 <etharp_tmr+0x14c>)
 8011580:	687a      	ldr	r2, [r7, #4]
 8011582:	4613      	mov	r3, r2
 8011584:	005b      	lsls	r3, r3, #1
 8011586:	4413      	add	r3, r2
 8011588:	00db      	lsls	r3, r3, #3
 801158a:	440b      	add	r3, r1
 801158c:	3312      	adds	r3, #18
 801158e:	881b      	ldrh	r3, [r3, #0]
 8011590:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011594:	d215      	bcs.n	80115c2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011596:	4938      	ldr	r1, [pc, #224]	; (8011678 <etharp_tmr+0x14c>)
 8011598:	687a      	ldr	r2, [r7, #4]
 801159a:	4613      	mov	r3, r2
 801159c:	005b      	lsls	r3, r3, #1
 801159e:	4413      	add	r3, r2
 80115a0:	00db      	lsls	r3, r3, #3
 80115a2:	440b      	add	r3, r1
 80115a4:	3314      	adds	r3, #20
 80115a6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80115a8:	2b01      	cmp	r3, #1
 80115aa:	d10e      	bne.n	80115ca <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80115ac:	4932      	ldr	r1, [pc, #200]	; (8011678 <etharp_tmr+0x14c>)
 80115ae:	687a      	ldr	r2, [r7, #4]
 80115b0:	4613      	mov	r3, r2
 80115b2:	005b      	lsls	r3, r3, #1
 80115b4:	4413      	add	r3, r2
 80115b6:	00db      	lsls	r3, r3, #3
 80115b8:	440b      	add	r3, r1
 80115ba:	3312      	adds	r3, #18
 80115bc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80115be:	2b04      	cmp	r3, #4
 80115c0:	d903      	bls.n	80115ca <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80115c2:	6878      	ldr	r0, [r7, #4]
 80115c4:	f7ff ff80 	bl	80114c8 <etharp_free_entry>
 80115c8:	e04a      	b.n	8011660 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80115ca:	492b      	ldr	r1, [pc, #172]	; (8011678 <etharp_tmr+0x14c>)
 80115cc:	687a      	ldr	r2, [r7, #4]
 80115ce:	4613      	mov	r3, r2
 80115d0:	005b      	lsls	r3, r3, #1
 80115d2:	4413      	add	r3, r2
 80115d4:	00db      	lsls	r3, r3, #3
 80115d6:	440b      	add	r3, r1
 80115d8:	3314      	adds	r3, #20
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	2b03      	cmp	r3, #3
 80115de:	d10a      	bne.n	80115f6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80115e0:	4925      	ldr	r1, [pc, #148]	; (8011678 <etharp_tmr+0x14c>)
 80115e2:	687a      	ldr	r2, [r7, #4]
 80115e4:	4613      	mov	r3, r2
 80115e6:	005b      	lsls	r3, r3, #1
 80115e8:	4413      	add	r3, r2
 80115ea:	00db      	lsls	r3, r3, #3
 80115ec:	440b      	add	r3, r1
 80115ee:	3314      	adds	r3, #20
 80115f0:	2204      	movs	r2, #4
 80115f2:	701a      	strb	r2, [r3, #0]
 80115f4:	e034      	b.n	8011660 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80115f6:	4920      	ldr	r1, [pc, #128]	; (8011678 <etharp_tmr+0x14c>)
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	4613      	mov	r3, r2
 80115fc:	005b      	lsls	r3, r3, #1
 80115fe:	4413      	add	r3, r2
 8011600:	00db      	lsls	r3, r3, #3
 8011602:	440b      	add	r3, r1
 8011604:	3314      	adds	r3, #20
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	2b04      	cmp	r3, #4
 801160a:	d10a      	bne.n	8011622 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801160c:	491a      	ldr	r1, [pc, #104]	; (8011678 <etharp_tmr+0x14c>)
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	4613      	mov	r3, r2
 8011612:	005b      	lsls	r3, r3, #1
 8011614:	4413      	add	r3, r2
 8011616:	00db      	lsls	r3, r3, #3
 8011618:	440b      	add	r3, r1
 801161a:	3314      	adds	r3, #20
 801161c:	2202      	movs	r2, #2
 801161e:	701a      	strb	r2, [r3, #0]
 8011620:	e01e      	b.n	8011660 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011622:	4915      	ldr	r1, [pc, #84]	; (8011678 <etharp_tmr+0x14c>)
 8011624:	687a      	ldr	r2, [r7, #4]
 8011626:	4613      	mov	r3, r2
 8011628:	005b      	lsls	r3, r3, #1
 801162a:	4413      	add	r3, r2
 801162c:	00db      	lsls	r3, r3, #3
 801162e:	440b      	add	r3, r1
 8011630:	3314      	adds	r3, #20
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	2b01      	cmp	r3, #1
 8011636:	d113      	bne.n	8011660 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011638:	490f      	ldr	r1, [pc, #60]	; (8011678 <etharp_tmr+0x14c>)
 801163a:	687a      	ldr	r2, [r7, #4]
 801163c:	4613      	mov	r3, r2
 801163e:	005b      	lsls	r3, r3, #1
 8011640:	4413      	add	r3, r2
 8011642:	00db      	lsls	r3, r3, #3
 8011644:	440b      	add	r3, r1
 8011646:	3308      	adds	r3, #8
 8011648:	6818      	ldr	r0, [r3, #0]
 801164a:	687a      	ldr	r2, [r7, #4]
 801164c:	4613      	mov	r3, r2
 801164e:	005b      	lsls	r3, r3, #1
 8011650:	4413      	add	r3, r2
 8011652:	00db      	lsls	r3, r3, #3
 8011654:	4a08      	ldr	r2, [pc, #32]	; (8011678 <etharp_tmr+0x14c>)
 8011656:	4413      	add	r3, r2
 8011658:	3304      	adds	r3, #4
 801165a:	4619      	mov	r1, r3
 801165c:	f000 fe6e 	bl	801233c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	3301      	adds	r3, #1
 8011664:	607b      	str	r3, [r7, #4]
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2b09      	cmp	r3, #9
 801166a:	f77f af65 	ble.w	8011538 <etharp_tmr+0xc>
      }
    }
  }
}
 801166e:	bf00      	nop
 8011670:	bf00      	nop
 8011672:	3708      	adds	r7, #8
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}
 8011678:	20000118 	.word	0x20000118

0801167c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b08a      	sub	sp, #40	; 0x28
 8011680:	af00      	add	r7, sp, #0
 8011682:	60f8      	str	r0, [r7, #12]
 8011684:	460b      	mov	r3, r1
 8011686:	607a      	str	r2, [r7, #4]
 8011688:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801168a:	230a      	movs	r3, #10
 801168c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801168e:	230a      	movs	r3, #10
 8011690:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011692:	230a      	movs	r3, #10
 8011694:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011696:	2300      	movs	r3, #0
 8011698:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801169a:	230a      	movs	r3, #10
 801169c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801169e:	2300      	movs	r3, #0
 80116a0:	83bb      	strh	r3, [r7, #28]
 80116a2:	2300      	movs	r3, #0
 80116a4:	837b      	strh	r3, [r7, #26]
 80116a6:	2300      	movs	r3, #0
 80116a8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80116aa:	2300      	movs	r3, #0
 80116ac:	843b      	strh	r3, [r7, #32]
 80116ae:	e0ae      	b.n	801180e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80116b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80116b4:	49a6      	ldr	r1, [pc, #664]	; (8011950 <etharp_find_entry+0x2d4>)
 80116b6:	4613      	mov	r3, r2
 80116b8:	005b      	lsls	r3, r3, #1
 80116ba:	4413      	add	r3, r2
 80116bc:	00db      	lsls	r3, r3, #3
 80116be:	440b      	add	r3, r1
 80116c0:	3314      	adds	r3, #20
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80116c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80116ca:	2b0a      	cmp	r3, #10
 80116cc:	d105      	bne.n	80116da <etharp_find_entry+0x5e>
 80116ce:	7dfb      	ldrb	r3, [r7, #23]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d102      	bne.n	80116da <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80116d4:	8c3b      	ldrh	r3, [r7, #32]
 80116d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80116d8:	e095      	b.n	8011806 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80116da:	7dfb      	ldrb	r3, [r7, #23]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	f000 8092 	beq.w	8011806 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80116e2:	7dfb      	ldrb	r3, [r7, #23]
 80116e4:	2b01      	cmp	r3, #1
 80116e6:	d009      	beq.n	80116fc <etharp_find_entry+0x80>
 80116e8:	7dfb      	ldrb	r3, [r7, #23]
 80116ea:	2b01      	cmp	r3, #1
 80116ec:	d806      	bhi.n	80116fc <etharp_find_entry+0x80>
 80116ee:	4b99      	ldr	r3, [pc, #612]	; (8011954 <etharp_find_entry+0x2d8>)
 80116f0:	f240 1223 	movw	r2, #291	; 0x123
 80116f4:	4998      	ldr	r1, [pc, #608]	; (8011958 <etharp_find_entry+0x2dc>)
 80116f6:	4899      	ldr	r0, [pc, #612]	; (801195c <etharp_find_entry+0x2e0>)
 80116f8:	f002 f9ee 	bl	8013ad8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d020      	beq.n	8011744 <etharp_find_entry+0xc8>
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	6819      	ldr	r1, [r3, #0]
 8011706:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801170a:	4891      	ldr	r0, [pc, #580]	; (8011950 <etharp_find_entry+0x2d4>)
 801170c:	4613      	mov	r3, r2
 801170e:	005b      	lsls	r3, r3, #1
 8011710:	4413      	add	r3, r2
 8011712:	00db      	lsls	r3, r3, #3
 8011714:	4403      	add	r3, r0
 8011716:	3304      	adds	r3, #4
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	4299      	cmp	r1, r3
 801171c:	d112      	bne.n	8011744 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d00c      	beq.n	801173e <etharp_find_entry+0xc2>
 8011724:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011728:	4989      	ldr	r1, [pc, #548]	; (8011950 <etharp_find_entry+0x2d4>)
 801172a:	4613      	mov	r3, r2
 801172c:	005b      	lsls	r3, r3, #1
 801172e:	4413      	add	r3, r2
 8011730:	00db      	lsls	r3, r3, #3
 8011732:	440b      	add	r3, r1
 8011734:	3308      	adds	r3, #8
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	687a      	ldr	r2, [r7, #4]
 801173a:	429a      	cmp	r2, r3
 801173c:	d102      	bne.n	8011744 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801173e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011742:	e100      	b.n	8011946 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011744:	7dfb      	ldrb	r3, [r7, #23]
 8011746:	2b01      	cmp	r3, #1
 8011748:	d140      	bne.n	80117cc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801174a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801174e:	4980      	ldr	r1, [pc, #512]	; (8011950 <etharp_find_entry+0x2d4>)
 8011750:	4613      	mov	r3, r2
 8011752:	005b      	lsls	r3, r3, #1
 8011754:	4413      	add	r3, r2
 8011756:	00db      	lsls	r3, r3, #3
 8011758:	440b      	add	r3, r1
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d01a      	beq.n	8011796 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011760:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011764:	497a      	ldr	r1, [pc, #488]	; (8011950 <etharp_find_entry+0x2d4>)
 8011766:	4613      	mov	r3, r2
 8011768:	005b      	lsls	r3, r3, #1
 801176a:	4413      	add	r3, r2
 801176c:	00db      	lsls	r3, r3, #3
 801176e:	440b      	add	r3, r1
 8011770:	3312      	adds	r3, #18
 8011772:	881b      	ldrh	r3, [r3, #0]
 8011774:	8bba      	ldrh	r2, [r7, #28]
 8011776:	429a      	cmp	r2, r3
 8011778:	d845      	bhi.n	8011806 <etharp_find_entry+0x18a>
            old_queue = i;
 801177a:	8c3b      	ldrh	r3, [r7, #32]
 801177c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801177e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011782:	4973      	ldr	r1, [pc, #460]	; (8011950 <etharp_find_entry+0x2d4>)
 8011784:	4613      	mov	r3, r2
 8011786:	005b      	lsls	r3, r3, #1
 8011788:	4413      	add	r3, r2
 801178a:	00db      	lsls	r3, r3, #3
 801178c:	440b      	add	r3, r1
 801178e:	3312      	adds	r3, #18
 8011790:	881b      	ldrh	r3, [r3, #0]
 8011792:	83bb      	strh	r3, [r7, #28]
 8011794:	e037      	b.n	8011806 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011796:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801179a:	496d      	ldr	r1, [pc, #436]	; (8011950 <etharp_find_entry+0x2d4>)
 801179c:	4613      	mov	r3, r2
 801179e:	005b      	lsls	r3, r3, #1
 80117a0:	4413      	add	r3, r2
 80117a2:	00db      	lsls	r3, r3, #3
 80117a4:	440b      	add	r3, r1
 80117a6:	3312      	adds	r3, #18
 80117a8:	881b      	ldrh	r3, [r3, #0]
 80117aa:	8b7a      	ldrh	r2, [r7, #26]
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d82a      	bhi.n	8011806 <etharp_find_entry+0x18a>
            old_pending = i;
 80117b0:	8c3b      	ldrh	r3, [r7, #32]
 80117b2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80117b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117b8:	4965      	ldr	r1, [pc, #404]	; (8011950 <etharp_find_entry+0x2d4>)
 80117ba:	4613      	mov	r3, r2
 80117bc:	005b      	lsls	r3, r3, #1
 80117be:	4413      	add	r3, r2
 80117c0:	00db      	lsls	r3, r3, #3
 80117c2:	440b      	add	r3, r1
 80117c4:	3312      	adds	r3, #18
 80117c6:	881b      	ldrh	r3, [r3, #0]
 80117c8:	837b      	strh	r3, [r7, #26]
 80117ca:	e01c      	b.n	8011806 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80117cc:	7dfb      	ldrb	r3, [r7, #23]
 80117ce:	2b01      	cmp	r3, #1
 80117d0:	d919      	bls.n	8011806 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80117d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117d6:	495e      	ldr	r1, [pc, #376]	; (8011950 <etharp_find_entry+0x2d4>)
 80117d8:	4613      	mov	r3, r2
 80117da:	005b      	lsls	r3, r3, #1
 80117dc:	4413      	add	r3, r2
 80117de:	00db      	lsls	r3, r3, #3
 80117e0:	440b      	add	r3, r1
 80117e2:	3312      	adds	r3, #18
 80117e4:	881b      	ldrh	r3, [r3, #0]
 80117e6:	8b3a      	ldrh	r2, [r7, #24]
 80117e8:	429a      	cmp	r2, r3
 80117ea:	d80c      	bhi.n	8011806 <etharp_find_entry+0x18a>
            old_stable = i;
 80117ec:	8c3b      	ldrh	r3, [r7, #32]
 80117ee:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80117f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117f4:	4956      	ldr	r1, [pc, #344]	; (8011950 <etharp_find_entry+0x2d4>)
 80117f6:	4613      	mov	r3, r2
 80117f8:	005b      	lsls	r3, r3, #1
 80117fa:	4413      	add	r3, r2
 80117fc:	00db      	lsls	r3, r3, #3
 80117fe:	440b      	add	r3, r1
 8011800:	3312      	adds	r3, #18
 8011802:	881b      	ldrh	r3, [r3, #0]
 8011804:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011806:	8c3b      	ldrh	r3, [r7, #32]
 8011808:	3301      	adds	r3, #1
 801180a:	b29b      	uxth	r3, r3
 801180c:	843b      	strh	r3, [r7, #32]
 801180e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011812:	2b09      	cmp	r3, #9
 8011814:	f77f af4c 	ble.w	80116b0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011818:	7afb      	ldrb	r3, [r7, #11]
 801181a:	f003 0302 	and.w	r3, r3, #2
 801181e:	2b00      	cmp	r3, #0
 8011820:	d108      	bne.n	8011834 <etharp_find_entry+0x1b8>
 8011822:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011826:	2b0a      	cmp	r3, #10
 8011828:	d107      	bne.n	801183a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801182a:	7afb      	ldrb	r3, [r7, #11]
 801182c:	f003 0301 	and.w	r3, r3, #1
 8011830:	2b00      	cmp	r3, #0
 8011832:	d102      	bne.n	801183a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011834:	f04f 33ff 	mov.w	r3, #4294967295
 8011838:	e085      	b.n	8011946 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801183a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801183e:	2b09      	cmp	r3, #9
 8011840:	dc02      	bgt.n	8011848 <etharp_find_entry+0x1cc>
    i = empty;
 8011842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011844:	843b      	strh	r3, [r7, #32]
 8011846:	e039      	b.n	80118bc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011848:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801184c:	2b09      	cmp	r3, #9
 801184e:	dc14      	bgt.n	801187a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011850:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011852:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011854:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011858:	493d      	ldr	r1, [pc, #244]	; (8011950 <etharp_find_entry+0x2d4>)
 801185a:	4613      	mov	r3, r2
 801185c:	005b      	lsls	r3, r3, #1
 801185e:	4413      	add	r3, r2
 8011860:	00db      	lsls	r3, r3, #3
 8011862:	440b      	add	r3, r1
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d018      	beq.n	801189c <etharp_find_entry+0x220>
 801186a:	4b3a      	ldr	r3, [pc, #232]	; (8011954 <etharp_find_entry+0x2d8>)
 801186c:	f240 126d 	movw	r2, #365	; 0x16d
 8011870:	493b      	ldr	r1, [pc, #236]	; (8011960 <etharp_find_entry+0x2e4>)
 8011872:	483a      	ldr	r0, [pc, #232]	; (801195c <etharp_find_entry+0x2e0>)
 8011874:	f002 f930 	bl	8013ad8 <iprintf>
 8011878:	e010      	b.n	801189c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801187a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801187e:	2b09      	cmp	r3, #9
 8011880:	dc02      	bgt.n	8011888 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011882:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011884:	843b      	strh	r3, [r7, #32]
 8011886:	e009      	b.n	801189c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011888:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801188c:	2b09      	cmp	r3, #9
 801188e:	dc02      	bgt.n	8011896 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011890:	8bfb      	ldrh	r3, [r7, #30]
 8011892:	843b      	strh	r3, [r7, #32]
 8011894:	e002      	b.n	801189c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011896:	f04f 33ff 	mov.w	r3, #4294967295
 801189a:	e054      	b.n	8011946 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801189c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80118a0:	2b09      	cmp	r3, #9
 80118a2:	dd06      	ble.n	80118b2 <etharp_find_entry+0x236>
 80118a4:	4b2b      	ldr	r3, [pc, #172]	; (8011954 <etharp_find_entry+0x2d8>)
 80118a6:	f240 127f 	movw	r2, #383	; 0x17f
 80118aa:	492e      	ldr	r1, [pc, #184]	; (8011964 <etharp_find_entry+0x2e8>)
 80118ac:	482b      	ldr	r0, [pc, #172]	; (801195c <etharp_find_entry+0x2e0>)
 80118ae:	f002 f913 	bl	8013ad8 <iprintf>
    etharp_free_entry(i);
 80118b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7ff fe06 	bl	80114c8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80118bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80118c0:	2b09      	cmp	r3, #9
 80118c2:	dd06      	ble.n	80118d2 <etharp_find_entry+0x256>
 80118c4:	4b23      	ldr	r3, [pc, #140]	; (8011954 <etharp_find_entry+0x2d8>)
 80118c6:	f240 1283 	movw	r2, #387	; 0x183
 80118ca:	4926      	ldr	r1, [pc, #152]	; (8011964 <etharp_find_entry+0x2e8>)
 80118cc:	4823      	ldr	r0, [pc, #140]	; (801195c <etharp_find_entry+0x2e0>)
 80118ce:	f002 f903 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80118d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118d6:	491e      	ldr	r1, [pc, #120]	; (8011950 <etharp_find_entry+0x2d4>)
 80118d8:	4613      	mov	r3, r2
 80118da:	005b      	lsls	r3, r3, #1
 80118dc:	4413      	add	r3, r2
 80118de:	00db      	lsls	r3, r3, #3
 80118e0:	440b      	add	r3, r1
 80118e2:	3314      	adds	r3, #20
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d006      	beq.n	80118f8 <etharp_find_entry+0x27c>
 80118ea:	4b1a      	ldr	r3, [pc, #104]	; (8011954 <etharp_find_entry+0x2d8>)
 80118ec:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80118f0:	491d      	ldr	r1, [pc, #116]	; (8011968 <etharp_find_entry+0x2ec>)
 80118f2:	481a      	ldr	r0, [pc, #104]	; (801195c <etharp_find_entry+0x2e0>)
 80118f4:	f002 f8f0 	bl	8013ad8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d00b      	beq.n	8011916 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80118fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	6819      	ldr	r1, [r3, #0]
 8011906:	4812      	ldr	r0, [pc, #72]	; (8011950 <etharp_find_entry+0x2d4>)
 8011908:	4613      	mov	r3, r2
 801190a:	005b      	lsls	r3, r3, #1
 801190c:	4413      	add	r3, r2
 801190e:	00db      	lsls	r3, r3, #3
 8011910:	4403      	add	r3, r0
 8011912:	3304      	adds	r3, #4
 8011914:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011916:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801191a:	490d      	ldr	r1, [pc, #52]	; (8011950 <etharp_find_entry+0x2d4>)
 801191c:	4613      	mov	r3, r2
 801191e:	005b      	lsls	r3, r3, #1
 8011920:	4413      	add	r3, r2
 8011922:	00db      	lsls	r3, r3, #3
 8011924:	440b      	add	r3, r1
 8011926:	3312      	adds	r3, #18
 8011928:	2200      	movs	r2, #0
 801192a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801192c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011930:	4907      	ldr	r1, [pc, #28]	; (8011950 <etharp_find_entry+0x2d4>)
 8011932:	4613      	mov	r3, r2
 8011934:	005b      	lsls	r3, r3, #1
 8011936:	4413      	add	r3, r2
 8011938:	00db      	lsls	r3, r3, #3
 801193a:	440b      	add	r3, r1
 801193c:	3308      	adds	r3, #8
 801193e:	687a      	ldr	r2, [r7, #4]
 8011940:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011942:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011946:	4618      	mov	r0, r3
 8011948:	3728      	adds	r7, #40	; 0x28
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}
 801194e:	bf00      	nop
 8011950:	20000118 	.word	0x20000118
 8011954:	08017134 	.word	0x08017134
 8011958:	0801716c 	.word	0x0801716c
 801195c:	080171ac 	.word	0x080171ac
 8011960:	080171d4 	.word	0x080171d4
 8011964:	080171ec 	.word	0x080171ec
 8011968:	08017200 	.word	0x08017200

0801196c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b088      	sub	sp, #32
 8011970:	af02      	add	r7, sp, #8
 8011972:	60f8      	str	r0, [r7, #12]
 8011974:	60b9      	str	r1, [r7, #8]
 8011976:	607a      	str	r2, [r7, #4]
 8011978:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011980:	2b06      	cmp	r3, #6
 8011982:	d006      	beq.n	8011992 <etharp_update_arp_entry+0x26>
 8011984:	4b48      	ldr	r3, [pc, #288]	; (8011aa8 <etharp_update_arp_entry+0x13c>)
 8011986:	f240 12a9 	movw	r2, #425	; 0x1a9
 801198a:	4948      	ldr	r1, [pc, #288]	; (8011aac <etharp_update_arp_entry+0x140>)
 801198c:	4848      	ldr	r0, [pc, #288]	; (8011ab0 <etharp_update_arp_entry+0x144>)
 801198e:	f002 f8a3 	bl	8013ad8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d012      	beq.n	80119be <etharp_update_arp_entry+0x52>
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d00e      	beq.n	80119be <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	68f9      	ldr	r1, [r7, #12]
 80119a6:	4618      	mov	r0, r3
 80119a8:	f001 f8fe 	bl	8012ba8 <ip4_addr_isbroadcast_u32>
 80119ac:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d105      	bne.n	80119be <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80119ba:	2be0      	cmp	r3, #224	; 0xe0
 80119bc:	d102      	bne.n	80119c4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80119be:	f06f 030f 	mvn.w	r3, #15
 80119c2:	e06c      	b.n	8011a9e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80119c4:	78fb      	ldrb	r3, [r7, #3]
 80119c6:	68fa      	ldr	r2, [r7, #12]
 80119c8:	4619      	mov	r1, r3
 80119ca:	68b8      	ldr	r0, [r7, #8]
 80119cc:	f7ff fe56 	bl	801167c <etharp_find_entry>
 80119d0:	4603      	mov	r3, r0
 80119d2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80119d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	da02      	bge.n	80119e2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80119dc:	8afb      	ldrh	r3, [r7, #22]
 80119de:	b25b      	sxtb	r3, r3
 80119e0:	e05d      	b.n	8011a9e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80119e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80119e6:	4933      	ldr	r1, [pc, #204]	; (8011ab4 <etharp_update_arp_entry+0x148>)
 80119e8:	4613      	mov	r3, r2
 80119ea:	005b      	lsls	r3, r3, #1
 80119ec:	4413      	add	r3, r2
 80119ee:	00db      	lsls	r3, r3, #3
 80119f0:	440b      	add	r3, r1
 80119f2:	3314      	adds	r3, #20
 80119f4:	2202      	movs	r2, #2
 80119f6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80119f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80119fc:	492d      	ldr	r1, [pc, #180]	; (8011ab4 <etharp_update_arp_entry+0x148>)
 80119fe:	4613      	mov	r3, r2
 8011a00:	005b      	lsls	r3, r3, #1
 8011a02:	4413      	add	r3, r2
 8011a04:	00db      	lsls	r3, r3, #3
 8011a06:	440b      	add	r3, r1
 8011a08:	3308      	adds	r3, #8
 8011a0a:	68fa      	ldr	r2, [r7, #12]
 8011a0c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011a0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a12:	4613      	mov	r3, r2
 8011a14:	005b      	lsls	r3, r3, #1
 8011a16:	4413      	add	r3, r2
 8011a18:	00db      	lsls	r3, r3, #3
 8011a1a:	3308      	adds	r3, #8
 8011a1c:	4a25      	ldr	r2, [pc, #148]	; (8011ab4 <etharp_update_arp_entry+0x148>)
 8011a1e:	4413      	add	r3, r2
 8011a20:	3304      	adds	r3, #4
 8011a22:	2206      	movs	r2, #6
 8011a24:	6879      	ldr	r1, [r7, #4]
 8011a26:	4618      	mov	r0, r3
 8011a28:	f002 f840 	bl	8013aac <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011a2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a30:	4920      	ldr	r1, [pc, #128]	; (8011ab4 <etharp_update_arp_entry+0x148>)
 8011a32:	4613      	mov	r3, r2
 8011a34:	005b      	lsls	r3, r3, #1
 8011a36:	4413      	add	r3, r2
 8011a38:	00db      	lsls	r3, r3, #3
 8011a3a:	440b      	add	r3, r1
 8011a3c:	3312      	adds	r3, #18
 8011a3e:	2200      	movs	r2, #0
 8011a40:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011a42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a46:	491b      	ldr	r1, [pc, #108]	; (8011ab4 <etharp_update_arp_entry+0x148>)
 8011a48:	4613      	mov	r3, r2
 8011a4a:	005b      	lsls	r3, r3, #1
 8011a4c:	4413      	add	r3, r2
 8011a4e:	00db      	lsls	r3, r3, #3
 8011a50:	440b      	add	r3, r1
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d021      	beq.n	8011a9c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011a58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a5c:	4915      	ldr	r1, [pc, #84]	; (8011ab4 <etharp_update_arp_entry+0x148>)
 8011a5e:	4613      	mov	r3, r2
 8011a60:	005b      	lsls	r3, r3, #1
 8011a62:	4413      	add	r3, r2
 8011a64:	00db      	lsls	r3, r3, #3
 8011a66:	440b      	add	r3, r1
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011a6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011a70:	4910      	ldr	r1, [pc, #64]	; (8011ab4 <etharp_update_arp_entry+0x148>)
 8011a72:	4613      	mov	r3, r2
 8011a74:	005b      	lsls	r3, r3, #1
 8011a76:	4413      	add	r3, r2
 8011a78:	00db      	lsls	r3, r3, #3
 8011a7a:	440b      	add	r3, r1
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011a8a:	9300      	str	r3, [sp, #0]
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6939      	ldr	r1, [r7, #16]
 8011a90:	68f8      	ldr	r0, [r7, #12]
 8011a92:	f001 ff91 	bl	80139b8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011a96:	6938      	ldr	r0, [r7, #16]
 8011a98:	f7f9 fbb0 	bl	800b1fc <pbuf_free>
  }
  return ERR_OK;
 8011a9c:	2300      	movs	r3, #0
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3718      	adds	r7, #24
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	08017134 	.word	0x08017134
 8011aac:	0801722c 	.word	0x0801722c
 8011ab0:	080171ac 	.word	0x080171ac
 8011ab4:	20000118 	.word	0x20000118

08011ab8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	60fb      	str	r3, [r7, #12]
 8011ac4:	e01e      	b.n	8011b04 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011ac6:	4913      	ldr	r1, [pc, #76]	; (8011b14 <etharp_cleanup_netif+0x5c>)
 8011ac8:	68fa      	ldr	r2, [r7, #12]
 8011aca:	4613      	mov	r3, r2
 8011acc:	005b      	lsls	r3, r3, #1
 8011ace:	4413      	add	r3, r2
 8011ad0:	00db      	lsls	r3, r3, #3
 8011ad2:	440b      	add	r3, r1
 8011ad4:	3314      	adds	r3, #20
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011ada:	7afb      	ldrb	r3, [r7, #11]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d00e      	beq.n	8011afe <etharp_cleanup_netif+0x46>
 8011ae0:	490c      	ldr	r1, [pc, #48]	; (8011b14 <etharp_cleanup_netif+0x5c>)
 8011ae2:	68fa      	ldr	r2, [r7, #12]
 8011ae4:	4613      	mov	r3, r2
 8011ae6:	005b      	lsls	r3, r3, #1
 8011ae8:	4413      	add	r3, r2
 8011aea:	00db      	lsls	r3, r3, #3
 8011aec:	440b      	add	r3, r1
 8011aee:	3308      	adds	r3, #8
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d102      	bne.n	8011afe <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011af8:	68f8      	ldr	r0, [r7, #12]
 8011afa:	f7ff fce5 	bl	80114c8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	3301      	adds	r3, #1
 8011b02:	60fb      	str	r3, [r7, #12]
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	2b09      	cmp	r3, #9
 8011b08:	dddd      	ble.n	8011ac6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011b0a:	bf00      	nop
 8011b0c:	bf00      	nop
 8011b0e:	3710      	adds	r7, #16
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}
 8011b14:	20000118 	.word	0x20000118

08011b18 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011b18:	b5b0      	push	{r4, r5, r7, lr}
 8011b1a:	b08a      	sub	sp, #40	; 0x28
 8011b1c:	af04      	add	r7, sp, #16
 8011b1e:	6078      	str	r0, [r7, #4]
 8011b20:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d107      	bne.n	8011b38 <etharp_input+0x20>
 8011b28:	4b3d      	ldr	r3, [pc, #244]	; (8011c20 <etharp_input+0x108>)
 8011b2a:	f240 228a 	movw	r2, #650	; 0x28a
 8011b2e:	493d      	ldr	r1, [pc, #244]	; (8011c24 <etharp_input+0x10c>)
 8011b30:	483d      	ldr	r0, [pc, #244]	; (8011c28 <etharp_input+0x110>)
 8011b32:	f001 ffd1 	bl	8013ad8 <iprintf>
 8011b36:	e06f      	b.n	8011c18 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	881b      	ldrh	r3, [r3, #0]
 8011b42:	b29b      	uxth	r3, r3
 8011b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b48:	d10c      	bne.n	8011b64 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011b4e:	2b06      	cmp	r3, #6
 8011b50:	d108      	bne.n	8011b64 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011b56:	2b04      	cmp	r3, #4
 8011b58:	d104      	bne.n	8011b64 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	885b      	ldrh	r3, [r3, #2]
 8011b5e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011b60:	2b08      	cmp	r3, #8
 8011b62:	d003      	beq.n	8011b6c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f7f9 fb49 	bl	800b1fc <pbuf_free>
    return;
 8011b6a:	e055      	b.n	8011c18 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	330e      	adds	r3, #14
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011b74:	693b      	ldr	r3, [r7, #16]
 8011b76:	3318      	adds	r3, #24
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	3304      	adds	r3, #4
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d102      	bne.n	8011b8c <etharp_input+0x74>
    for_us = 0;
 8011b86:	2300      	movs	r3, #0
 8011b88:	75fb      	strb	r3, [r7, #23]
 8011b8a:	e009      	b.n	8011ba0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011b8c:	68ba      	ldr	r2, [r7, #8]
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	3304      	adds	r3, #4
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	429a      	cmp	r2, r3
 8011b96:	bf0c      	ite	eq
 8011b98:	2301      	moveq	r3, #1
 8011b9a:	2300      	movne	r3, #0
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011ba0:	693b      	ldr	r3, [r7, #16]
 8011ba2:	f103 0208 	add.w	r2, r3, #8
 8011ba6:	7dfb      	ldrb	r3, [r7, #23]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d001      	beq.n	8011bb0 <etharp_input+0x98>
 8011bac:	2301      	movs	r3, #1
 8011bae:	e000      	b.n	8011bb2 <etharp_input+0x9a>
 8011bb0:	2302      	movs	r3, #2
 8011bb2:	f107 010c 	add.w	r1, r7, #12
 8011bb6:	6838      	ldr	r0, [r7, #0]
 8011bb8:	f7ff fed8 	bl	801196c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	88db      	ldrh	r3, [r3, #6]
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bc6:	d003      	beq.n	8011bd0 <etharp_input+0xb8>
 8011bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011bcc:	d01e      	beq.n	8011c0c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011bce:	e020      	b.n	8011c12 <etharp_input+0xfa>
      if (for_us) {
 8011bd0:	7dfb      	ldrb	r3, [r7, #23]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d01c      	beq.n	8011c10 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011bec:	693a      	ldr	r2, [r7, #16]
 8011bee:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011bf0:	2102      	movs	r1, #2
 8011bf2:	9103      	str	r1, [sp, #12]
 8011bf4:	f107 010c 	add.w	r1, r7, #12
 8011bf8:	9102      	str	r1, [sp, #8]
 8011bfa:	9201      	str	r2, [sp, #4]
 8011bfc:	9300      	str	r3, [sp, #0]
 8011bfe:	462b      	mov	r3, r5
 8011c00:	4622      	mov	r2, r4
 8011c02:	4601      	mov	r1, r0
 8011c04:	6838      	ldr	r0, [r7, #0]
 8011c06:	f000 faeb 	bl	80121e0 <etharp_raw>
      break;
 8011c0a:	e001      	b.n	8011c10 <etharp_input+0xf8>
      break;
 8011c0c:	bf00      	nop
 8011c0e:	e000      	b.n	8011c12 <etharp_input+0xfa>
      break;
 8011c10:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f7f9 faf2 	bl	800b1fc <pbuf_free>
}
 8011c18:	3718      	adds	r7, #24
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8011c1e:	bf00      	nop
 8011c20:	08017134 	.word	0x08017134
 8011c24:	08017284 	.word	0x08017284
 8011c28:	080171ac 	.word	0x080171ac

08011c2c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b086      	sub	sp, #24
 8011c30:	af02      	add	r7, sp, #8
 8011c32:	60f8      	str	r0, [r7, #12]
 8011c34:	60b9      	str	r1, [r7, #8]
 8011c36:	4613      	mov	r3, r2
 8011c38:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011c3a:	79fa      	ldrb	r2, [r7, #7]
 8011c3c:	4944      	ldr	r1, [pc, #272]	; (8011d50 <etharp_output_to_arp_index+0x124>)
 8011c3e:	4613      	mov	r3, r2
 8011c40:	005b      	lsls	r3, r3, #1
 8011c42:	4413      	add	r3, r2
 8011c44:	00db      	lsls	r3, r3, #3
 8011c46:	440b      	add	r3, r1
 8011c48:	3314      	adds	r3, #20
 8011c4a:	781b      	ldrb	r3, [r3, #0]
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d806      	bhi.n	8011c5e <etharp_output_to_arp_index+0x32>
 8011c50:	4b40      	ldr	r3, [pc, #256]	; (8011d54 <etharp_output_to_arp_index+0x128>)
 8011c52:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011c56:	4940      	ldr	r1, [pc, #256]	; (8011d58 <etharp_output_to_arp_index+0x12c>)
 8011c58:	4840      	ldr	r0, [pc, #256]	; (8011d5c <etharp_output_to_arp_index+0x130>)
 8011c5a:	f001 ff3d 	bl	8013ad8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011c5e:	79fa      	ldrb	r2, [r7, #7]
 8011c60:	493b      	ldr	r1, [pc, #236]	; (8011d50 <etharp_output_to_arp_index+0x124>)
 8011c62:	4613      	mov	r3, r2
 8011c64:	005b      	lsls	r3, r3, #1
 8011c66:	4413      	add	r3, r2
 8011c68:	00db      	lsls	r3, r3, #3
 8011c6a:	440b      	add	r3, r1
 8011c6c:	3314      	adds	r3, #20
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d153      	bne.n	8011d1c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011c74:	79fa      	ldrb	r2, [r7, #7]
 8011c76:	4936      	ldr	r1, [pc, #216]	; (8011d50 <etharp_output_to_arp_index+0x124>)
 8011c78:	4613      	mov	r3, r2
 8011c7a:	005b      	lsls	r3, r3, #1
 8011c7c:	4413      	add	r3, r2
 8011c7e:	00db      	lsls	r3, r3, #3
 8011c80:	440b      	add	r3, r1
 8011c82:	3312      	adds	r3, #18
 8011c84:	881b      	ldrh	r3, [r3, #0]
 8011c86:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011c8a:	d919      	bls.n	8011cc0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011c8c:	79fa      	ldrb	r2, [r7, #7]
 8011c8e:	4613      	mov	r3, r2
 8011c90:	005b      	lsls	r3, r3, #1
 8011c92:	4413      	add	r3, r2
 8011c94:	00db      	lsls	r3, r3, #3
 8011c96:	4a2e      	ldr	r2, [pc, #184]	; (8011d50 <etharp_output_to_arp_index+0x124>)
 8011c98:	4413      	add	r3, r2
 8011c9a:	3304      	adds	r3, #4
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	68f8      	ldr	r0, [r7, #12]
 8011ca0:	f000 fb4c 	bl	801233c <etharp_request>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d138      	bne.n	8011d1c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011caa:	79fa      	ldrb	r2, [r7, #7]
 8011cac:	4928      	ldr	r1, [pc, #160]	; (8011d50 <etharp_output_to_arp_index+0x124>)
 8011cae:	4613      	mov	r3, r2
 8011cb0:	005b      	lsls	r3, r3, #1
 8011cb2:	4413      	add	r3, r2
 8011cb4:	00db      	lsls	r3, r3, #3
 8011cb6:	440b      	add	r3, r1
 8011cb8:	3314      	adds	r3, #20
 8011cba:	2203      	movs	r2, #3
 8011cbc:	701a      	strb	r2, [r3, #0]
 8011cbe:	e02d      	b.n	8011d1c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011cc0:	79fa      	ldrb	r2, [r7, #7]
 8011cc2:	4923      	ldr	r1, [pc, #140]	; (8011d50 <etharp_output_to_arp_index+0x124>)
 8011cc4:	4613      	mov	r3, r2
 8011cc6:	005b      	lsls	r3, r3, #1
 8011cc8:	4413      	add	r3, r2
 8011cca:	00db      	lsls	r3, r3, #3
 8011ccc:	440b      	add	r3, r1
 8011cce:	3312      	adds	r3, #18
 8011cd0:	881b      	ldrh	r3, [r3, #0]
 8011cd2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011cd6:	d321      	bcc.n	8011d1c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011cd8:	79fa      	ldrb	r2, [r7, #7]
 8011cda:	4613      	mov	r3, r2
 8011cdc:	005b      	lsls	r3, r3, #1
 8011cde:	4413      	add	r3, r2
 8011ce0:	00db      	lsls	r3, r3, #3
 8011ce2:	4a1b      	ldr	r2, [pc, #108]	; (8011d50 <etharp_output_to_arp_index+0x124>)
 8011ce4:	4413      	add	r3, r2
 8011ce6:	1d19      	adds	r1, r3, #4
 8011ce8:	79fa      	ldrb	r2, [r7, #7]
 8011cea:	4613      	mov	r3, r2
 8011cec:	005b      	lsls	r3, r3, #1
 8011cee:	4413      	add	r3, r2
 8011cf0:	00db      	lsls	r3, r3, #3
 8011cf2:	3308      	adds	r3, #8
 8011cf4:	4a16      	ldr	r2, [pc, #88]	; (8011d50 <etharp_output_to_arp_index+0x124>)
 8011cf6:	4413      	add	r3, r2
 8011cf8:	3304      	adds	r3, #4
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	68f8      	ldr	r0, [r7, #12]
 8011cfe:	f000 fafb 	bl	80122f8 <etharp_request_dst>
 8011d02:	4603      	mov	r3, r0
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d109      	bne.n	8011d1c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011d08:	79fa      	ldrb	r2, [r7, #7]
 8011d0a:	4911      	ldr	r1, [pc, #68]	; (8011d50 <etharp_output_to_arp_index+0x124>)
 8011d0c:	4613      	mov	r3, r2
 8011d0e:	005b      	lsls	r3, r3, #1
 8011d10:	4413      	add	r3, r2
 8011d12:	00db      	lsls	r3, r3, #3
 8011d14:	440b      	add	r3, r1
 8011d16:	3314      	adds	r3, #20
 8011d18:	2203      	movs	r2, #3
 8011d1a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8011d22:	79fa      	ldrb	r2, [r7, #7]
 8011d24:	4613      	mov	r3, r2
 8011d26:	005b      	lsls	r3, r3, #1
 8011d28:	4413      	add	r3, r2
 8011d2a:	00db      	lsls	r3, r3, #3
 8011d2c:	3308      	adds	r3, #8
 8011d2e:	4a08      	ldr	r2, [pc, #32]	; (8011d50 <etharp_output_to_arp_index+0x124>)
 8011d30:	4413      	add	r3, r2
 8011d32:	3304      	adds	r3, #4
 8011d34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011d38:	9200      	str	r2, [sp, #0]
 8011d3a:	460a      	mov	r2, r1
 8011d3c:	68b9      	ldr	r1, [r7, #8]
 8011d3e:	68f8      	ldr	r0, [r7, #12]
 8011d40:	f001 fe3a 	bl	80139b8 <ethernet_output>
 8011d44:	4603      	mov	r3, r0
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3710      	adds	r7, #16
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
 8011d4e:	bf00      	nop
 8011d50:	20000118 	.word	0x20000118
 8011d54:	08017134 	.word	0x08017134
 8011d58:	080172a4 	.word	0x080172a4
 8011d5c:	080171ac 	.word	0x080171ac

08011d60 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b08a      	sub	sp, #40	; 0x28
 8011d64:	af02      	add	r7, sp, #8
 8011d66:	60f8      	str	r0, [r7, #12]
 8011d68:	60b9      	str	r1, [r7, #8]
 8011d6a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d106      	bne.n	8011d84 <etharp_output+0x24>
 8011d76:	4b73      	ldr	r3, [pc, #460]	; (8011f44 <etharp_output+0x1e4>)
 8011d78:	f240 321e 	movw	r2, #798	; 0x31e
 8011d7c:	4972      	ldr	r1, [pc, #456]	; (8011f48 <etharp_output+0x1e8>)
 8011d7e:	4873      	ldr	r0, [pc, #460]	; (8011f4c <etharp_output+0x1ec>)
 8011d80:	f001 feaa 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d106      	bne.n	8011d98 <etharp_output+0x38>
 8011d8a:	4b6e      	ldr	r3, [pc, #440]	; (8011f44 <etharp_output+0x1e4>)
 8011d8c:	f240 321f 	movw	r2, #799	; 0x31f
 8011d90:	496f      	ldr	r1, [pc, #444]	; (8011f50 <etharp_output+0x1f0>)
 8011d92:	486e      	ldr	r0, [pc, #440]	; (8011f4c <etharp_output+0x1ec>)
 8011d94:	f001 fea0 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d106      	bne.n	8011dac <etharp_output+0x4c>
 8011d9e:	4b69      	ldr	r3, [pc, #420]	; (8011f44 <etharp_output+0x1e4>)
 8011da0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011da4:	496b      	ldr	r1, [pc, #428]	; (8011f54 <etharp_output+0x1f4>)
 8011da6:	4869      	ldr	r0, [pc, #420]	; (8011f4c <etharp_output+0x1ec>)
 8011da8:	f001 fe96 	bl	8013ad8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	68f9      	ldr	r1, [r7, #12]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f000 fef8 	bl	8012ba8 <ip4_addr_isbroadcast_u32>
 8011db8:	4603      	mov	r3, r0
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d002      	beq.n	8011dc4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011dbe:	4b66      	ldr	r3, [pc, #408]	; (8011f58 <etharp_output+0x1f8>)
 8011dc0:	61fb      	str	r3, [r7, #28]
 8011dc2:	e0af      	b.n	8011f24 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011dcc:	2be0      	cmp	r3, #224	; 0xe0
 8011dce:	d118      	bne.n	8011e02 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011dd0:	2301      	movs	r3, #1
 8011dd2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011dd8:	235e      	movs	r3, #94	; 0x5e
 8011dda:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	3301      	adds	r3, #1
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011de6:	b2db      	uxtb	r3, r3
 8011de8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	3302      	adds	r3, #2
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	3303      	adds	r3, #3
 8011df6:	781b      	ldrb	r3, [r3, #0]
 8011df8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011dfa:	f107 0310 	add.w	r3, r7, #16
 8011dfe:	61fb      	str	r3, [r7, #28]
 8011e00:	e090      	b.n	8011f24 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681a      	ldr	r2, [r3, #0]
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	3304      	adds	r3, #4
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	405a      	eors	r2, r3
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	3308      	adds	r3, #8
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	4013      	ands	r3, r2
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d012      	beq.n	8011e40 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011e20:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011e24:	4293      	cmp	r3, r2
 8011e26:	d00b      	beq.n	8011e40 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	330c      	adds	r3, #12
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d003      	beq.n	8011e3a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	330c      	adds	r3, #12
 8011e36:	61bb      	str	r3, [r7, #24]
 8011e38:	e002      	b.n	8011e40 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011e3a:	f06f 0303 	mvn.w	r3, #3
 8011e3e:	e07d      	b.n	8011f3c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011e40:	4b46      	ldr	r3, [pc, #280]	; (8011f5c <etharp_output+0x1fc>)
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	4619      	mov	r1, r3
 8011e46:	4a46      	ldr	r2, [pc, #280]	; (8011f60 <etharp_output+0x200>)
 8011e48:	460b      	mov	r3, r1
 8011e4a:	005b      	lsls	r3, r3, #1
 8011e4c:	440b      	add	r3, r1
 8011e4e:	00db      	lsls	r3, r3, #3
 8011e50:	4413      	add	r3, r2
 8011e52:	3314      	adds	r3, #20
 8011e54:	781b      	ldrb	r3, [r3, #0]
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	d925      	bls.n	8011ea6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011e5a:	4b40      	ldr	r3, [pc, #256]	; (8011f5c <etharp_output+0x1fc>)
 8011e5c:	781b      	ldrb	r3, [r3, #0]
 8011e5e:	4619      	mov	r1, r3
 8011e60:	4a3f      	ldr	r2, [pc, #252]	; (8011f60 <etharp_output+0x200>)
 8011e62:	460b      	mov	r3, r1
 8011e64:	005b      	lsls	r3, r3, #1
 8011e66:	440b      	add	r3, r1
 8011e68:	00db      	lsls	r3, r3, #3
 8011e6a:	4413      	add	r3, r2
 8011e6c:	3308      	adds	r3, #8
 8011e6e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011e70:	68fa      	ldr	r2, [r7, #12]
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d117      	bne.n	8011ea6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011e76:	69bb      	ldr	r3, [r7, #24]
 8011e78:	681a      	ldr	r2, [r3, #0]
 8011e7a:	4b38      	ldr	r3, [pc, #224]	; (8011f5c <etharp_output+0x1fc>)
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	4618      	mov	r0, r3
 8011e80:	4937      	ldr	r1, [pc, #220]	; (8011f60 <etharp_output+0x200>)
 8011e82:	4603      	mov	r3, r0
 8011e84:	005b      	lsls	r3, r3, #1
 8011e86:	4403      	add	r3, r0
 8011e88:	00db      	lsls	r3, r3, #3
 8011e8a:	440b      	add	r3, r1
 8011e8c:	3304      	adds	r3, #4
 8011e8e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d108      	bne.n	8011ea6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011e94:	4b31      	ldr	r3, [pc, #196]	; (8011f5c <etharp_output+0x1fc>)
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	461a      	mov	r2, r3
 8011e9a:	68b9      	ldr	r1, [r7, #8]
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f7ff fec5 	bl	8011c2c <etharp_output_to_arp_index>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	e04a      	b.n	8011f3c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	75fb      	strb	r3, [r7, #23]
 8011eaa:	e031      	b.n	8011f10 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011eac:	7dfa      	ldrb	r2, [r7, #23]
 8011eae:	492c      	ldr	r1, [pc, #176]	; (8011f60 <etharp_output+0x200>)
 8011eb0:	4613      	mov	r3, r2
 8011eb2:	005b      	lsls	r3, r3, #1
 8011eb4:	4413      	add	r3, r2
 8011eb6:	00db      	lsls	r3, r3, #3
 8011eb8:	440b      	add	r3, r1
 8011eba:	3314      	adds	r3, #20
 8011ebc:	781b      	ldrb	r3, [r3, #0]
 8011ebe:	2b01      	cmp	r3, #1
 8011ec0:	d923      	bls.n	8011f0a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011ec2:	7dfa      	ldrb	r2, [r7, #23]
 8011ec4:	4926      	ldr	r1, [pc, #152]	; (8011f60 <etharp_output+0x200>)
 8011ec6:	4613      	mov	r3, r2
 8011ec8:	005b      	lsls	r3, r3, #1
 8011eca:	4413      	add	r3, r2
 8011ecc:	00db      	lsls	r3, r3, #3
 8011ece:	440b      	add	r3, r1
 8011ed0:	3308      	adds	r3, #8
 8011ed2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011ed4:	68fa      	ldr	r2, [r7, #12]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d117      	bne.n	8011f0a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011eda:	69bb      	ldr	r3, [r7, #24]
 8011edc:	6819      	ldr	r1, [r3, #0]
 8011ede:	7dfa      	ldrb	r2, [r7, #23]
 8011ee0:	481f      	ldr	r0, [pc, #124]	; (8011f60 <etharp_output+0x200>)
 8011ee2:	4613      	mov	r3, r2
 8011ee4:	005b      	lsls	r3, r3, #1
 8011ee6:	4413      	add	r3, r2
 8011ee8:	00db      	lsls	r3, r3, #3
 8011eea:	4403      	add	r3, r0
 8011eec:	3304      	adds	r3, #4
 8011eee:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011ef0:	4299      	cmp	r1, r3
 8011ef2:	d10a      	bne.n	8011f0a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011ef4:	4a19      	ldr	r2, [pc, #100]	; (8011f5c <etharp_output+0x1fc>)
 8011ef6:	7dfb      	ldrb	r3, [r7, #23]
 8011ef8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011efa:	7dfb      	ldrb	r3, [r7, #23]
 8011efc:	461a      	mov	r2, r3
 8011efe:	68b9      	ldr	r1, [r7, #8]
 8011f00:	68f8      	ldr	r0, [r7, #12]
 8011f02:	f7ff fe93 	bl	8011c2c <etharp_output_to_arp_index>
 8011f06:	4603      	mov	r3, r0
 8011f08:	e018      	b.n	8011f3c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011f0a:	7dfb      	ldrb	r3, [r7, #23]
 8011f0c:	3301      	adds	r3, #1
 8011f0e:	75fb      	strb	r3, [r7, #23]
 8011f10:	7dfb      	ldrb	r3, [r7, #23]
 8011f12:	2b09      	cmp	r3, #9
 8011f14:	d9ca      	bls.n	8011eac <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011f16:	68ba      	ldr	r2, [r7, #8]
 8011f18:	69b9      	ldr	r1, [r7, #24]
 8011f1a:	68f8      	ldr	r0, [r7, #12]
 8011f1c:	f000 f822 	bl	8011f64 <etharp_query>
 8011f20:	4603      	mov	r3, r0
 8011f22:	e00b      	b.n	8011f3c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011f2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011f2e:	9300      	str	r3, [sp, #0]
 8011f30:	69fb      	ldr	r3, [r7, #28]
 8011f32:	68b9      	ldr	r1, [r7, #8]
 8011f34:	68f8      	ldr	r0, [r7, #12]
 8011f36:	f001 fd3f 	bl	80139b8 <ethernet_output>
 8011f3a:	4603      	mov	r3, r0
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3720      	adds	r7, #32
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}
 8011f44:	08017134 	.word	0x08017134
 8011f48:	08017284 	.word	0x08017284
 8011f4c:	080171ac 	.word	0x080171ac
 8011f50:	080172d4 	.word	0x080172d4
 8011f54:	08017274 	.word	0x08017274
 8011f58:	080178ec 	.word	0x080178ec
 8011f5c:	20000208 	.word	0x20000208
 8011f60:	20000118 	.word	0x20000118

08011f64 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b08c      	sub	sp, #48	; 0x30
 8011f68:	af02      	add	r7, sp, #8
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	3326      	adds	r3, #38	; 0x26
 8011f74:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011f76:	23ff      	movs	r3, #255	; 0xff
 8011f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	68f9      	ldr	r1, [r7, #12]
 8011f86:	4618      	mov	r0, r3
 8011f88:	f000 fe0e 	bl	8012ba8 <ip4_addr_isbroadcast_u32>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d10c      	bne.n	8011fac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011f9a:	2be0      	cmp	r3, #224	; 0xe0
 8011f9c:	d006      	beq.n	8011fac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011f9e:	68bb      	ldr	r3, [r7, #8]
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d003      	beq.n	8011fac <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011fa4:	68bb      	ldr	r3, [r7, #8]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d102      	bne.n	8011fb2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011fac:	f06f 030f 	mvn.w	r3, #15
 8011fb0:	e101      	b.n	80121b6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011fb2:	68fa      	ldr	r2, [r7, #12]
 8011fb4:	2101      	movs	r1, #1
 8011fb6:	68b8      	ldr	r0, [r7, #8]
 8011fb8:	f7ff fb60 	bl	801167c <etharp_find_entry>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011fc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	da02      	bge.n	8011fce <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011fc8:	8a7b      	ldrh	r3, [r7, #18]
 8011fca:	b25b      	sxtb	r3, r3
 8011fcc:	e0f3      	b.n	80121b6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011fce:	8a7b      	ldrh	r3, [r7, #18]
 8011fd0:	2b7e      	cmp	r3, #126	; 0x7e
 8011fd2:	d906      	bls.n	8011fe2 <etharp_query+0x7e>
 8011fd4:	4b7a      	ldr	r3, [pc, #488]	; (80121c0 <etharp_query+0x25c>)
 8011fd6:	f240 32c1 	movw	r2, #961	; 0x3c1
 8011fda:	497a      	ldr	r1, [pc, #488]	; (80121c4 <etharp_query+0x260>)
 8011fdc:	487a      	ldr	r0, [pc, #488]	; (80121c8 <etharp_query+0x264>)
 8011fde:	f001 fd7b 	bl	8013ad8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011fe2:	8a7b      	ldrh	r3, [r7, #18]
 8011fe4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011fe6:	7c7a      	ldrb	r2, [r7, #17]
 8011fe8:	4978      	ldr	r1, [pc, #480]	; (80121cc <etharp_query+0x268>)
 8011fea:	4613      	mov	r3, r2
 8011fec:	005b      	lsls	r3, r3, #1
 8011fee:	4413      	add	r3, r2
 8011ff0:	00db      	lsls	r3, r3, #3
 8011ff2:	440b      	add	r3, r1
 8011ff4:	3314      	adds	r3, #20
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d115      	bne.n	8012028 <etharp_query+0xc4>
    is_new_entry = 1;
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012000:	7c7a      	ldrb	r2, [r7, #17]
 8012002:	4972      	ldr	r1, [pc, #456]	; (80121cc <etharp_query+0x268>)
 8012004:	4613      	mov	r3, r2
 8012006:	005b      	lsls	r3, r3, #1
 8012008:	4413      	add	r3, r2
 801200a:	00db      	lsls	r3, r3, #3
 801200c:	440b      	add	r3, r1
 801200e:	3314      	adds	r3, #20
 8012010:	2201      	movs	r2, #1
 8012012:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012014:	7c7a      	ldrb	r2, [r7, #17]
 8012016:	496d      	ldr	r1, [pc, #436]	; (80121cc <etharp_query+0x268>)
 8012018:	4613      	mov	r3, r2
 801201a:	005b      	lsls	r3, r3, #1
 801201c:	4413      	add	r3, r2
 801201e:	00db      	lsls	r3, r3, #3
 8012020:	440b      	add	r3, r1
 8012022:	3308      	adds	r3, #8
 8012024:	68fa      	ldr	r2, [r7, #12]
 8012026:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012028:	7c7a      	ldrb	r2, [r7, #17]
 801202a:	4968      	ldr	r1, [pc, #416]	; (80121cc <etharp_query+0x268>)
 801202c:	4613      	mov	r3, r2
 801202e:	005b      	lsls	r3, r3, #1
 8012030:	4413      	add	r3, r2
 8012032:	00db      	lsls	r3, r3, #3
 8012034:	440b      	add	r3, r1
 8012036:	3314      	adds	r3, #20
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	2b01      	cmp	r3, #1
 801203c:	d011      	beq.n	8012062 <etharp_query+0xfe>
 801203e:	7c7a      	ldrb	r2, [r7, #17]
 8012040:	4962      	ldr	r1, [pc, #392]	; (80121cc <etharp_query+0x268>)
 8012042:	4613      	mov	r3, r2
 8012044:	005b      	lsls	r3, r3, #1
 8012046:	4413      	add	r3, r2
 8012048:	00db      	lsls	r3, r3, #3
 801204a:	440b      	add	r3, r1
 801204c:	3314      	adds	r3, #20
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	2b01      	cmp	r3, #1
 8012052:	d806      	bhi.n	8012062 <etharp_query+0xfe>
 8012054:	4b5a      	ldr	r3, [pc, #360]	; (80121c0 <etharp_query+0x25c>)
 8012056:	f240 32cd 	movw	r2, #973	; 0x3cd
 801205a:	495d      	ldr	r1, [pc, #372]	; (80121d0 <etharp_query+0x26c>)
 801205c:	485a      	ldr	r0, [pc, #360]	; (80121c8 <etharp_query+0x264>)
 801205e:	f001 fd3b 	bl	8013ad8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012062:	6a3b      	ldr	r3, [r7, #32]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d102      	bne.n	801206e <etharp_query+0x10a>
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d10c      	bne.n	8012088 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801206e:	68b9      	ldr	r1, [r7, #8]
 8012070:	68f8      	ldr	r0, [r7, #12]
 8012072:	f000 f963 	bl	801233c <etharp_request>
 8012076:	4603      	mov	r3, r0
 8012078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d102      	bne.n	8012088 <etharp_query+0x124>
      return result;
 8012082:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012086:	e096      	b.n	80121b6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d106      	bne.n	801209c <etharp_query+0x138>
 801208e:	4b4c      	ldr	r3, [pc, #304]	; (80121c0 <etharp_query+0x25c>)
 8012090:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012094:	494f      	ldr	r1, [pc, #316]	; (80121d4 <etharp_query+0x270>)
 8012096:	484c      	ldr	r0, [pc, #304]	; (80121c8 <etharp_query+0x264>)
 8012098:	f001 fd1e 	bl	8013ad8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801209c:	7c7a      	ldrb	r2, [r7, #17]
 801209e:	494b      	ldr	r1, [pc, #300]	; (80121cc <etharp_query+0x268>)
 80120a0:	4613      	mov	r3, r2
 80120a2:	005b      	lsls	r3, r3, #1
 80120a4:	4413      	add	r3, r2
 80120a6:	00db      	lsls	r3, r3, #3
 80120a8:	440b      	add	r3, r1
 80120aa:	3314      	adds	r3, #20
 80120ac:	781b      	ldrb	r3, [r3, #0]
 80120ae:	2b01      	cmp	r3, #1
 80120b0:	d917      	bls.n	80120e2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80120b2:	4a49      	ldr	r2, [pc, #292]	; (80121d8 <etharp_query+0x274>)
 80120b4:	7c7b      	ldrb	r3, [r7, #17]
 80120b6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80120b8:	7c7a      	ldrb	r2, [r7, #17]
 80120ba:	4613      	mov	r3, r2
 80120bc:	005b      	lsls	r3, r3, #1
 80120be:	4413      	add	r3, r2
 80120c0:	00db      	lsls	r3, r3, #3
 80120c2:	3308      	adds	r3, #8
 80120c4:	4a41      	ldr	r2, [pc, #260]	; (80121cc <etharp_query+0x268>)
 80120c6:	4413      	add	r3, r2
 80120c8:	3304      	adds	r3, #4
 80120ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80120ce:	9200      	str	r2, [sp, #0]
 80120d0:	697a      	ldr	r2, [r7, #20]
 80120d2:	6879      	ldr	r1, [r7, #4]
 80120d4:	68f8      	ldr	r0, [r7, #12]
 80120d6:	f001 fc6f 	bl	80139b8 <ethernet_output>
 80120da:	4603      	mov	r3, r0
 80120dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80120e0:	e067      	b.n	80121b2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80120e2:	7c7a      	ldrb	r2, [r7, #17]
 80120e4:	4939      	ldr	r1, [pc, #228]	; (80121cc <etharp_query+0x268>)
 80120e6:	4613      	mov	r3, r2
 80120e8:	005b      	lsls	r3, r3, #1
 80120ea:	4413      	add	r3, r2
 80120ec:	00db      	lsls	r3, r3, #3
 80120ee:	440b      	add	r3, r1
 80120f0:	3314      	adds	r3, #20
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	2b01      	cmp	r3, #1
 80120f6:	d15c      	bne.n	80121b2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80120f8:	2300      	movs	r3, #0
 80120fa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012100:	e01c      	b.n	801213c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012102:	69fb      	ldr	r3, [r7, #28]
 8012104:	895a      	ldrh	r2, [r3, #10]
 8012106:	69fb      	ldr	r3, [r7, #28]
 8012108:	891b      	ldrh	r3, [r3, #8]
 801210a:	429a      	cmp	r2, r3
 801210c:	d10a      	bne.n	8012124 <etharp_query+0x1c0>
 801210e:	69fb      	ldr	r3, [r7, #28]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d006      	beq.n	8012124 <etharp_query+0x1c0>
 8012116:	4b2a      	ldr	r3, [pc, #168]	; (80121c0 <etharp_query+0x25c>)
 8012118:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801211c:	492f      	ldr	r1, [pc, #188]	; (80121dc <etharp_query+0x278>)
 801211e:	482a      	ldr	r0, [pc, #168]	; (80121c8 <etharp_query+0x264>)
 8012120:	f001 fcda 	bl	8013ad8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012124:	69fb      	ldr	r3, [r7, #28]
 8012126:	7b1b      	ldrb	r3, [r3, #12]
 8012128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801212c:	2b00      	cmp	r3, #0
 801212e:	d002      	beq.n	8012136 <etharp_query+0x1d2>
        copy_needed = 1;
 8012130:	2301      	movs	r3, #1
 8012132:	61bb      	str	r3, [r7, #24]
        break;
 8012134:	e005      	b.n	8012142 <etharp_query+0x1de>
      }
      p = p->next;
 8012136:	69fb      	ldr	r3, [r7, #28]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801213c:	69fb      	ldr	r3, [r7, #28]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d1df      	bne.n	8012102 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012142:	69bb      	ldr	r3, [r7, #24]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d007      	beq.n	8012158 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012148:	687a      	ldr	r2, [r7, #4]
 801214a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801214e:	200e      	movs	r0, #14
 8012150:	f7f9 fac0 	bl	800b6d4 <pbuf_clone>
 8012154:	61f8      	str	r0, [r7, #28]
 8012156:	e004      	b.n	8012162 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801215c:	69f8      	ldr	r0, [r7, #28]
 801215e:	f7f9 f8ed 	bl	800b33c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012162:	69fb      	ldr	r3, [r7, #28]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d021      	beq.n	80121ac <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012168:	7c7a      	ldrb	r2, [r7, #17]
 801216a:	4918      	ldr	r1, [pc, #96]	; (80121cc <etharp_query+0x268>)
 801216c:	4613      	mov	r3, r2
 801216e:	005b      	lsls	r3, r3, #1
 8012170:	4413      	add	r3, r2
 8012172:	00db      	lsls	r3, r3, #3
 8012174:	440b      	add	r3, r1
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d00a      	beq.n	8012192 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801217c:	7c7a      	ldrb	r2, [r7, #17]
 801217e:	4913      	ldr	r1, [pc, #76]	; (80121cc <etharp_query+0x268>)
 8012180:	4613      	mov	r3, r2
 8012182:	005b      	lsls	r3, r3, #1
 8012184:	4413      	add	r3, r2
 8012186:	00db      	lsls	r3, r3, #3
 8012188:	440b      	add	r3, r1
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	4618      	mov	r0, r3
 801218e:	f7f9 f835 	bl	800b1fc <pbuf_free>
      }
      arp_table[i].q = p;
 8012192:	7c7a      	ldrb	r2, [r7, #17]
 8012194:	490d      	ldr	r1, [pc, #52]	; (80121cc <etharp_query+0x268>)
 8012196:	4613      	mov	r3, r2
 8012198:	005b      	lsls	r3, r3, #1
 801219a:	4413      	add	r3, r2
 801219c:	00db      	lsls	r3, r3, #3
 801219e:	440b      	add	r3, r1
 80121a0:	69fa      	ldr	r2, [r7, #28]
 80121a2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80121a4:	2300      	movs	r3, #0
 80121a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80121aa:	e002      	b.n	80121b2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80121ac:	23ff      	movs	r3, #255	; 0xff
 80121ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80121b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3728      	adds	r7, #40	; 0x28
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}
 80121be:	bf00      	nop
 80121c0:	08017134 	.word	0x08017134
 80121c4:	080172e0 	.word	0x080172e0
 80121c8:	080171ac 	.word	0x080171ac
 80121cc:	20000118 	.word	0x20000118
 80121d0:	080172f0 	.word	0x080172f0
 80121d4:	080172d4 	.word	0x080172d4
 80121d8:	20000208 	.word	0x20000208
 80121dc:	08017318 	.word	0x08017318

080121e0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b08a      	sub	sp, #40	; 0x28
 80121e4:	af02      	add	r7, sp, #8
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	60b9      	str	r1, [r7, #8]
 80121ea:	607a      	str	r2, [r7, #4]
 80121ec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80121ee:	2300      	movs	r3, #0
 80121f0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d106      	bne.n	8012206 <etharp_raw+0x26>
 80121f8:	4b3a      	ldr	r3, [pc, #232]	; (80122e4 <etharp_raw+0x104>)
 80121fa:	f240 4257 	movw	r2, #1111	; 0x457
 80121fe:	493a      	ldr	r1, [pc, #232]	; (80122e8 <etharp_raw+0x108>)
 8012200:	483a      	ldr	r0, [pc, #232]	; (80122ec <etharp_raw+0x10c>)
 8012202:	f001 fc69 	bl	8013ad8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012206:	f44f 7220 	mov.w	r2, #640	; 0x280
 801220a:	211c      	movs	r1, #28
 801220c:	200e      	movs	r0, #14
 801220e:	f7f8 fd11 	bl	800ac34 <pbuf_alloc>
 8012212:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012214:	69bb      	ldr	r3, [r7, #24]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d102      	bne.n	8012220 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801221a:	f04f 33ff 	mov.w	r3, #4294967295
 801221e:	e05d      	b.n	80122dc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012220:	69bb      	ldr	r3, [r7, #24]
 8012222:	895b      	ldrh	r3, [r3, #10]
 8012224:	2b1b      	cmp	r3, #27
 8012226:	d806      	bhi.n	8012236 <etharp_raw+0x56>
 8012228:	4b2e      	ldr	r3, [pc, #184]	; (80122e4 <etharp_raw+0x104>)
 801222a:	f240 4262 	movw	r2, #1122	; 0x462
 801222e:	4930      	ldr	r1, [pc, #192]	; (80122f0 <etharp_raw+0x110>)
 8012230:	482e      	ldr	r0, [pc, #184]	; (80122ec <etharp_raw+0x10c>)
 8012232:	f001 fc51 	bl	8013ad8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012236:	69bb      	ldr	r3, [r7, #24]
 8012238:	685b      	ldr	r3, [r3, #4]
 801223a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801223c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801223e:	4618      	mov	r0, r3
 8012240:	f7f7 fd38 	bl	8009cb4 <lwip_htons>
 8012244:	4603      	mov	r3, r0
 8012246:	461a      	mov	r2, r3
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012252:	2b06      	cmp	r3, #6
 8012254:	d006      	beq.n	8012264 <etharp_raw+0x84>
 8012256:	4b23      	ldr	r3, [pc, #140]	; (80122e4 <etharp_raw+0x104>)
 8012258:	f240 4269 	movw	r2, #1129	; 0x469
 801225c:	4925      	ldr	r1, [pc, #148]	; (80122f4 <etharp_raw+0x114>)
 801225e:	4823      	ldr	r0, [pc, #140]	; (80122ec <etharp_raw+0x10c>)
 8012260:	f001 fc3a 	bl	8013ad8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	3308      	adds	r3, #8
 8012268:	2206      	movs	r2, #6
 801226a:	6839      	ldr	r1, [r7, #0]
 801226c:	4618      	mov	r0, r3
 801226e:	f001 fc1d 	bl	8013aac <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	3312      	adds	r3, #18
 8012276:	2206      	movs	r2, #6
 8012278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801227a:	4618      	mov	r0, r3
 801227c:	f001 fc16 	bl	8013aac <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	330e      	adds	r3, #14
 8012284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012286:	6812      	ldr	r2, [r2, #0]
 8012288:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	3318      	adds	r3, #24
 801228e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012290:	6812      	ldr	r2, [r2, #0]
 8012292:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	2200      	movs	r2, #0
 8012298:	701a      	strb	r2, [r3, #0]
 801229a:	2200      	movs	r2, #0
 801229c:	f042 0201 	orr.w	r2, r2, #1
 80122a0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	2200      	movs	r2, #0
 80122a6:	f042 0208 	orr.w	r2, r2, #8
 80122aa:	709a      	strb	r2, [r3, #2]
 80122ac:	2200      	movs	r2, #0
 80122ae:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80122b0:	697b      	ldr	r3, [r7, #20]
 80122b2:	2206      	movs	r2, #6
 80122b4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	2204      	movs	r2, #4
 80122ba:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80122bc:	f640 0306 	movw	r3, #2054	; 0x806
 80122c0:	9300      	str	r3, [sp, #0]
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	68ba      	ldr	r2, [r7, #8]
 80122c6:	69b9      	ldr	r1, [r7, #24]
 80122c8:	68f8      	ldr	r0, [r7, #12]
 80122ca:	f001 fb75 	bl	80139b8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80122ce:	69b8      	ldr	r0, [r7, #24]
 80122d0:	f7f8 ff94 	bl	800b1fc <pbuf_free>
  p = NULL;
 80122d4:	2300      	movs	r3, #0
 80122d6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80122d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80122dc:	4618      	mov	r0, r3
 80122de:	3720      	adds	r7, #32
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}
 80122e4:	08017134 	.word	0x08017134
 80122e8:	08017284 	.word	0x08017284
 80122ec:	080171ac 	.word	0x080171ac
 80122f0:	08017334 	.word	0x08017334
 80122f4:	08017368 	.word	0x08017368

080122f8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b088      	sub	sp, #32
 80122fc:	af04      	add	r7, sp, #16
 80122fe:	60f8      	str	r0, [r7, #12]
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012314:	2201      	movs	r2, #1
 8012316:	9203      	str	r2, [sp, #12]
 8012318:	68ba      	ldr	r2, [r7, #8]
 801231a:	9202      	str	r2, [sp, #8]
 801231c:	4a06      	ldr	r2, [pc, #24]	; (8012338 <etharp_request_dst+0x40>)
 801231e:	9201      	str	r2, [sp, #4]
 8012320:	9300      	str	r3, [sp, #0]
 8012322:	4603      	mov	r3, r0
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	68f8      	ldr	r0, [r7, #12]
 8012328:	f7ff ff5a 	bl	80121e0 <etharp_raw>
 801232c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801232e:	4618      	mov	r0, r3
 8012330:	3710      	adds	r7, #16
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	080178f4 	.word	0x080178f4

0801233c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b082      	sub	sp, #8
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012346:	4a05      	ldr	r2, [pc, #20]	; (801235c <etharp_request+0x20>)
 8012348:	6839      	ldr	r1, [r7, #0]
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f7ff ffd4 	bl	80122f8 <etharp_request_dst>
 8012350:	4603      	mov	r3, r0
}
 8012352:	4618      	mov	r0, r3
 8012354:	3708      	adds	r7, #8
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
 801235a:	bf00      	nop
 801235c:	080178ec 	.word	0x080178ec

08012360 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b08e      	sub	sp, #56	; 0x38
 8012364:	af04      	add	r7, sp, #16
 8012366:	6078      	str	r0, [r7, #4]
 8012368:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801236a:	4b79      	ldr	r3, [pc, #484]	; (8012550 <icmp_input+0x1f0>)
 801236c:	689b      	ldr	r3, [r3, #8]
 801236e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012372:	781b      	ldrb	r3, [r3, #0]
 8012374:	f003 030f 	and.w	r3, r3, #15
 8012378:	b2db      	uxtb	r3, r3
 801237a:	009b      	lsls	r3, r3, #2
 801237c:	b2db      	uxtb	r3, r3
 801237e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012380:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012382:	2b13      	cmp	r3, #19
 8012384:	f240 80cd 	bls.w	8012522 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	895b      	ldrh	r3, [r3, #10]
 801238c:	2b03      	cmp	r3, #3
 801238e:	f240 80ca 	bls.w	8012526 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801239c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	f000 80b7 	beq.w	8012514 <icmp_input+0x1b4>
 80123a6:	2b08      	cmp	r3, #8
 80123a8:	f040 80b7 	bne.w	801251a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80123ac:	4b69      	ldr	r3, [pc, #420]	; (8012554 <icmp_input+0x1f4>)
 80123ae:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80123b0:	4b67      	ldr	r3, [pc, #412]	; (8012550 <icmp_input+0x1f0>)
 80123b2:	695b      	ldr	r3, [r3, #20]
 80123b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80123b8:	2be0      	cmp	r3, #224	; 0xe0
 80123ba:	f000 80bb 	beq.w	8012534 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80123be:	4b64      	ldr	r3, [pc, #400]	; (8012550 <icmp_input+0x1f0>)
 80123c0:	695b      	ldr	r3, [r3, #20]
 80123c2:	4a63      	ldr	r2, [pc, #396]	; (8012550 <icmp_input+0x1f0>)
 80123c4:	6812      	ldr	r2, [r2, #0]
 80123c6:	4611      	mov	r1, r2
 80123c8:	4618      	mov	r0, r3
 80123ca:	f000 fbed 	bl	8012ba8 <ip4_addr_isbroadcast_u32>
 80123ce:	4603      	mov	r3, r0
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	f040 80b1 	bne.w	8012538 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	891b      	ldrh	r3, [r3, #8]
 80123da:	2b07      	cmp	r3, #7
 80123dc:	f240 80a5 	bls.w	801252a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80123e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80123e2:	330e      	adds	r3, #14
 80123e4:	4619      	mov	r1, r3
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f7f8 fe72 	bl	800b0d0 <pbuf_add_header>
 80123ec:	4603      	mov	r3, r0
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d04b      	beq.n	801248a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	891a      	ldrh	r2, [r3, #8]
 80123f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80123f8:	4413      	add	r3, r2
 80123fa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	891b      	ldrh	r3, [r3, #8]
 8012400:	8b7a      	ldrh	r2, [r7, #26]
 8012402:	429a      	cmp	r2, r3
 8012404:	f0c0 809a 	bcc.w	801253c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012408:	8b7b      	ldrh	r3, [r7, #26]
 801240a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801240e:	4619      	mov	r1, r3
 8012410:	200e      	movs	r0, #14
 8012412:	f7f8 fc0f 	bl	800ac34 <pbuf_alloc>
 8012416:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012418:	697b      	ldr	r3, [r7, #20]
 801241a:	2b00      	cmp	r3, #0
 801241c:	f000 8090 	beq.w	8012540 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	895b      	ldrh	r3, [r3, #10]
 8012424:	461a      	mov	r2, r3
 8012426:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012428:	3308      	adds	r3, #8
 801242a:	429a      	cmp	r2, r3
 801242c:	d203      	bcs.n	8012436 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801242e:	6978      	ldr	r0, [r7, #20]
 8012430:	f7f8 fee4 	bl	800b1fc <pbuf_free>
          goto icmperr;
 8012434:	e085      	b.n	8012542 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012436:	697b      	ldr	r3, [r7, #20]
 8012438:	685b      	ldr	r3, [r3, #4]
 801243a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801243c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801243e:	4618      	mov	r0, r3
 8012440:	f001 fb34 	bl	8013aac <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012444:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012446:	4619      	mov	r1, r3
 8012448:	6978      	ldr	r0, [r7, #20]
 801244a:	f7f8 fe51 	bl	800b0f0 <pbuf_remove_header>
 801244e:	4603      	mov	r3, r0
 8012450:	2b00      	cmp	r3, #0
 8012452:	d009      	beq.n	8012468 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012454:	4b40      	ldr	r3, [pc, #256]	; (8012558 <icmp_input+0x1f8>)
 8012456:	22b6      	movs	r2, #182	; 0xb6
 8012458:	4940      	ldr	r1, [pc, #256]	; (801255c <icmp_input+0x1fc>)
 801245a:	4841      	ldr	r0, [pc, #260]	; (8012560 <icmp_input+0x200>)
 801245c:	f001 fb3c 	bl	8013ad8 <iprintf>
          pbuf_free(r);
 8012460:	6978      	ldr	r0, [r7, #20]
 8012462:	f7f8 fecb 	bl	800b1fc <pbuf_free>
          goto icmperr;
 8012466:	e06c      	b.n	8012542 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012468:	6879      	ldr	r1, [r7, #4]
 801246a:	6978      	ldr	r0, [r7, #20]
 801246c:	f7f8 ffee 	bl	800b44c <pbuf_copy>
 8012470:	4603      	mov	r3, r0
 8012472:	2b00      	cmp	r3, #0
 8012474:	d003      	beq.n	801247e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012476:	6978      	ldr	r0, [r7, #20]
 8012478:	f7f8 fec0 	bl	800b1fc <pbuf_free>
          goto icmperr;
 801247c:	e061      	b.n	8012542 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f7f8 febc 	bl	800b1fc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012484:	697b      	ldr	r3, [r7, #20]
 8012486:	607b      	str	r3, [r7, #4]
 8012488:	e00f      	b.n	80124aa <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801248a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801248c:	330e      	adds	r3, #14
 801248e:	4619      	mov	r1, r3
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f7f8 fe2d 	bl	800b0f0 <pbuf_remove_header>
 8012496:	4603      	mov	r3, r0
 8012498:	2b00      	cmp	r3, #0
 801249a:	d006      	beq.n	80124aa <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801249c:	4b2e      	ldr	r3, [pc, #184]	; (8012558 <icmp_input+0x1f8>)
 801249e:	22c7      	movs	r2, #199	; 0xc7
 80124a0:	4930      	ldr	r1, [pc, #192]	; (8012564 <icmp_input+0x204>)
 80124a2:	482f      	ldr	r0, [pc, #188]	; (8012560 <icmp_input+0x200>)
 80124a4:	f001 fb18 	bl	8013ad8 <iprintf>
          goto icmperr;
 80124a8:	e04b      	b.n	8012542 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80124b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80124b2:	4619      	mov	r1, r3
 80124b4:	6878      	ldr	r0, [r7, #4]
 80124b6:	f7f8 fe0b 	bl	800b0d0 <pbuf_add_header>
 80124ba:	4603      	mov	r3, r0
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d12b      	bne.n	8012518 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80124c6:	69fb      	ldr	r3, [r7, #28]
 80124c8:	681a      	ldr	r2, [r3, #0]
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80124ce:	4b20      	ldr	r3, [pc, #128]	; (8012550 <icmp_input+0x1f0>)
 80124d0:	691a      	ldr	r2, [r3, #16]
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80124d6:	693b      	ldr	r3, [r7, #16]
 80124d8:	2200      	movs	r2, #0
 80124da:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80124dc:	693b      	ldr	r3, [r7, #16]
 80124de:	2200      	movs	r2, #0
 80124e0:	709a      	strb	r2, [r3, #2]
 80124e2:	2200      	movs	r2, #0
 80124e4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	22ff      	movs	r2, #255	; 0xff
 80124ea:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	2200      	movs	r2, #0
 80124f0:	729a      	strb	r2, [r3, #10]
 80124f2:	2200      	movs	r2, #0
 80124f4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	9302      	str	r3, [sp, #8]
 80124fa:	2301      	movs	r3, #1
 80124fc:	9301      	str	r3, [sp, #4]
 80124fe:	2300      	movs	r3, #0
 8012500:	9300      	str	r3, [sp, #0]
 8012502:	23ff      	movs	r3, #255	; 0xff
 8012504:	2200      	movs	r2, #0
 8012506:	69f9      	ldr	r1, [r7, #28]
 8012508:	6878      	ldr	r0, [r7, #4]
 801250a:	f000 fa75 	bl	80129f8 <ip4_output_if>
 801250e:	4603      	mov	r3, r0
 8012510:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012512:	e001      	b.n	8012518 <icmp_input+0x1b8>
      break;
 8012514:	bf00      	nop
 8012516:	e000      	b.n	801251a <icmp_input+0x1ba>
      break;
 8012518:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f7f8 fe6e 	bl	800b1fc <pbuf_free>
  return;
 8012520:	e013      	b.n	801254a <icmp_input+0x1ea>
    goto lenerr;
 8012522:	bf00      	nop
 8012524:	e002      	b.n	801252c <icmp_input+0x1cc>
    goto lenerr;
 8012526:	bf00      	nop
 8012528:	e000      	b.n	801252c <icmp_input+0x1cc>
        goto lenerr;
 801252a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f7f8 fe65 	bl	800b1fc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012532:	e00a      	b.n	801254a <icmp_input+0x1ea>
        goto icmperr;
 8012534:	bf00      	nop
 8012536:	e004      	b.n	8012542 <icmp_input+0x1e2>
        goto icmperr;
 8012538:	bf00      	nop
 801253a:	e002      	b.n	8012542 <icmp_input+0x1e2>
          goto icmperr;
 801253c:	bf00      	nop
 801253e:	e000      	b.n	8012542 <icmp_input+0x1e2>
          goto icmperr;
 8012540:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f7f8 fe5a 	bl	800b1fc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012548:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801254a:	3728      	adds	r7, #40	; 0x28
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}
 8012550:	20003cd4 	.word	0x20003cd4
 8012554:	20003ce8 	.word	0x20003ce8
 8012558:	080173ac 	.word	0x080173ac
 801255c:	080173e4 	.word	0x080173e4
 8012560:	0801741c 	.word	0x0801741c
 8012564:	08017444 	.word	0x08017444

08012568 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	460b      	mov	r3, r1
 8012572:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012574:	78fb      	ldrb	r3, [r7, #3]
 8012576:	461a      	mov	r2, r3
 8012578:	2103      	movs	r1, #3
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f000 f814 	bl	80125a8 <icmp_send_response>
}
 8012580:	bf00      	nop
 8012582:	3708      	adds	r7, #8
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b082      	sub	sp, #8
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	460b      	mov	r3, r1
 8012592:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012594:	78fb      	ldrb	r3, [r7, #3]
 8012596:	461a      	mov	r2, r3
 8012598:	210b      	movs	r1, #11
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f000 f804 	bl	80125a8 <icmp_send_response>
}
 80125a0:	bf00      	nop
 80125a2:	3708      	adds	r7, #8
 80125a4:	46bd      	mov	sp, r7
 80125a6:	bd80      	pop	{r7, pc}

080125a8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b08c      	sub	sp, #48	; 0x30
 80125ac:	af04      	add	r7, sp, #16
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	460b      	mov	r3, r1
 80125b2:	70fb      	strb	r3, [r7, #3]
 80125b4:	4613      	mov	r3, r2
 80125b6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80125b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80125bc:	2124      	movs	r1, #36	; 0x24
 80125be:	2022      	movs	r0, #34	; 0x22
 80125c0:	f7f8 fb38 	bl	800ac34 <pbuf_alloc>
 80125c4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80125c6:	69fb      	ldr	r3, [r7, #28]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d04c      	beq.n	8012666 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80125cc:	69fb      	ldr	r3, [r7, #28]
 80125ce:	895b      	ldrh	r3, [r3, #10]
 80125d0:	2b23      	cmp	r3, #35	; 0x23
 80125d2:	d806      	bhi.n	80125e2 <icmp_send_response+0x3a>
 80125d4:	4b26      	ldr	r3, [pc, #152]	; (8012670 <icmp_send_response+0xc8>)
 80125d6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80125da:	4926      	ldr	r1, [pc, #152]	; (8012674 <icmp_send_response+0xcc>)
 80125dc:	4826      	ldr	r0, [pc, #152]	; (8012678 <icmp_send_response+0xd0>)
 80125de:	f001 fa7b 	bl	8013ad8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	685b      	ldr	r3, [r3, #4]
 80125e6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80125e8:	69fb      	ldr	r3, [r7, #28]
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	78fa      	ldrb	r2, [r7, #3]
 80125f2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	78ba      	ldrb	r2, [r7, #2]
 80125f8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80125fa:	697b      	ldr	r3, [r7, #20]
 80125fc:	2200      	movs	r2, #0
 80125fe:	711a      	strb	r2, [r3, #4]
 8012600:	2200      	movs	r2, #0
 8012602:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	2200      	movs	r2, #0
 8012608:	719a      	strb	r2, [r3, #6]
 801260a:	2200      	movs	r2, #0
 801260c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801260e:	69fb      	ldr	r3, [r7, #28]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	f103 0008 	add.w	r0, r3, #8
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	221c      	movs	r2, #28
 801261c:	4619      	mov	r1, r3
 801261e:	f001 fa45 	bl	8013aac <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	68db      	ldr	r3, [r3, #12]
 8012626:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012628:	f107 030c 	add.w	r3, r7, #12
 801262c:	4618      	mov	r0, r3
 801262e:	f000 f825 	bl	801267c <ip4_route>
 8012632:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d011      	beq.n	801265e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	2200      	movs	r2, #0
 801263e:	709a      	strb	r2, [r3, #2]
 8012640:	2200      	movs	r2, #0
 8012642:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012644:	f107 020c 	add.w	r2, r7, #12
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	9302      	str	r3, [sp, #8]
 801264c:	2301      	movs	r3, #1
 801264e:	9301      	str	r3, [sp, #4]
 8012650:	2300      	movs	r3, #0
 8012652:	9300      	str	r3, [sp, #0]
 8012654:	23ff      	movs	r3, #255	; 0xff
 8012656:	2100      	movs	r1, #0
 8012658:	69f8      	ldr	r0, [r7, #28]
 801265a:	f000 f9cd 	bl	80129f8 <ip4_output_if>
  }
  pbuf_free(q);
 801265e:	69f8      	ldr	r0, [r7, #28]
 8012660:	f7f8 fdcc 	bl	800b1fc <pbuf_free>
 8012664:	e000      	b.n	8012668 <icmp_send_response+0xc0>
    return;
 8012666:	bf00      	nop
}
 8012668:	3720      	adds	r7, #32
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
 801266e:	bf00      	nop
 8012670:	080173ac 	.word	0x080173ac
 8012674:	08017478 	.word	0x08017478
 8012678:	0801741c 	.word	0x0801741c

0801267c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801267c:	b480      	push	{r7}
 801267e:	b085      	sub	sp, #20
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012684:	4b33      	ldr	r3, [pc, #204]	; (8012754 <ip4_route+0xd8>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	60fb      	str	r3, [r7, #12]
 801268a:	e036      	b.n	80126fa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012692:	f003 0301 	and.w	r3, r3, #1
 8012696:	b2db      	uxtb	r3, r3
 8012698:	2b00      	cmp	r3, #0
 801269a:	d02b      	beq.n	80126f4 <ip4_route+0x78>
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80126a2:	089b      	lsrs	r3, r3, #2
 80126a4:	f003 0301 	and.w	r3, r3, #1
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d022      	beq.n	80126f4 <ip4_route+0x78>
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	3304      	adds	r3, #4
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d01d      	beq.n	80126f4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681a      	ldr	r2, [r3, #0]
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	3304      	adds	r3, #4
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	405a      	eors	r2, r3
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	3308      	adds	r3, #8
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	4013      	ands	r3, r2
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d101      	bne.n	80126d4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	e038      	b.n	8012746 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80126da:	f003 0302 	and.w	r3, r3, #2
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d108      	bne.n	80126f4 <ip4_route+0x78>
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681a      	ldr	r2, [r3, #0]
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	330c      	adds	r3, #12
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d101      	bne.n	80126f4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	e028      	b.n	8012746 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	60fb      	str	r3, [r7, #12]
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d1c5      	bne.n	801268c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012700:	4b15      	ldr	r3, [pc, #84]	; (8012758 <ip4_route+0xdc>)
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d01a      	beq.n	801273e <ip4_route+0xc2>
 8012708:	4b13      	ldr	r3, [pc, #76]	; (8012758 <ip4_route+0xdc>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012710:	f003 0301 	and.w	r3, r3, #1
 8012714:	2b00      	cmp	r3, #0
 8012716:	d012      	beq.n	801273e <ip4_route+0xc2>
 8012718:	4b0f      	ldr	r3, [pc, #60]	; (8012758 <ip4_route+0xdc>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012720:	f003 0304 	and.w	r3, r3, #4
 8012724:	2b00      	cmp	r3, #0
 8012726:	d00a      	beq.n	801273e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012728:	4b0b      	ldr	r3, [pc, #44]	; (8012758 <ip4_route+0xdc>)
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	3304      	adds	r3, #4
 801272e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012730:	2b00      	cmp	r3, #0
 8012732:	d004      	beq.n	801273e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	b2db      	uxtb	r3, r3
 801273a:	2b7f      	cmp	r3, #127	; 0x7f
 801273c:	d101      	bne.n	8012742 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801273e:	2300      	movs	r3, #0
 8012740:	e001      	b.n	8012746 <ip4_route+0xca>
  }

  return netif_default;
 8012742:	4b05      	ldr	r3, [pc, #20]	; (8012758 <ip4_route+0xdc>)
 8012744:	681b      	ldr	r3, [r3, #0]
}
 8012746:	4618      	mov	r0, r3
 8012748:	3714      	adds	r7, #20
 801274a:	46bd      	mov	sp, r7
 801274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012750:	4770      	bx	lr
 8012752:	bf00      	nop
 8012754:	20008db0 	.word	0x20008db0
 8012758:	20008db4 	.word	0x20008db4

0801275c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
 8012762:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801276a:	f003 0301 	and.w	r3, r3, #1
 801276e:	b2db      	uxtb	r3, r3
 8012770:	2b00      	cmp	r3, #0
 8012772:	d016      	beq.n	80127a2 <ip4_input_accept+0x46>
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	3304      	adds	r3, #4
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d011      	beq.n	80127a2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801277e:	4b0b      	ldr	r3, [pc, #44]	; (80127ac <ip4_input_accept+0x50>)
 8012780:	695a      	ldr	r2, [r3, #20]
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	3304      	adds	r3, #4
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	429a      	cmp	r2, r3
 801278a:	d008      	beq.n	801279e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801278c:	4b07      	ldr	r3, [pc, #28]	; (80127ac <ip4_input_accept+0x50>)
 801278e:	695b      	ldr	r3, [r3, #20]
 8012790:	6879      	ldr	r1, [r7, #4]
 8012792:	4618      	mov	r0, r3
 8012794:	f000 fa08 	bl	8012ba8 <ip4_addr_isbroadcast_u32>
 8012798:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801279a:	2b00      	cmp	r3, #0
 801279c:	d001      	beq.n	80127a2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801279e:	2301      	movs	r3, #1
 80127a0:	e000      	b.n	80127a4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80127a2:	2300      	movs	r3, #0
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	3708      	adds	r7, #8
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}
 80127ac:	20003cd4 	.word	0x20003cd4

080127b0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b086      	sub	sp, #24
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	091b      	lsrs	r3, r3, #4
 80127c6:	b2db      	uxtb	r3, r3
 80127c8:	2b04      	cmp	r3, #4
 80127ca:	d004      	beq.n	80127d6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f7f8 fd15 	bl	800b1fc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80127d2:	2300      	movs	r3, #0
 80127d4:	e107      	b.n	80129e6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	f003 030f 	and.w	r3, r3, #15
 80127de:	b2db      	uxtb	r3, r3
 80127e0:	009b      	lsls	r3, r3, #2
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80127e6:	697b      	ldr	r3, [r7, #20]
 80127e8:	885b      	ldrh	r3, [r3, #2]
 80127ea:	b29b      	uxth	r3, r3
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7f7 fa61 	bl	8009cb4 <lwip_htons>
 80127f2:	4603      	mov	r3, r0
 80127f4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	891b      	ldrh	r3, [r3, #8]
 80127fa:	89ba      	ldrh	r2, [r7, #12]
 80127fc:	429a      	cmp	r2, r3
 80127fe:	d204      	bcs.n	801280a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012800:	89bb      	ldrh	r3, [r7, #12]
 8012802:	4619      	mov	r1, r3
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f7f8 fb73 	bl	800aef0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	895b      	ldrh	r3, [r3, #10]
 801280e:	89fa      	ldrh	r2, [r7, #14]
 8012810:	429a      	cmp	r2, r3
 8012812:	d807      	bhi.n	8012824 <ip4_input+0x74>
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	891b      	ldrh	r3, [r3, #8]
 8012818:	89ba      	ldrh	r2, [r7, #12]
 801281a:	429a      	cmp	r2, r3
 801281c:	d802      	bhi.n	8012824 <ip4_input+0x74>
 801281e:	89fb      	ldrh	r3, [r7, #14]
 8012820:	2b13      	cmp	r3, #19
 8012822:	d804      	bhi.n	801282e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f7f8 fce9 	bl	800b1fc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801282a:	2300      	movs	r3, #0
 801282c:	e0db      	b.n	80129e6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	691b      	ldr	r3, [r3, #16]
 8012832:	4a6f      	ldr	r2, [pc, #444]	; (80129f0 <ip4_input+0x240>)
 8012834:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	68db      	ldr	r3, [r3, #12]
 801283a:	4a6d      	ldr	r2, [pc, #436]	; (80129f0 <ip4_input+0x240>)
 801283c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801283e:	4b6c      	ldr	r3, [pc, #432]	; (80129f0 <ip4_input+0x240>)
 8012840:	695b      	ldr	r3, [r3, #20]
 8012842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012846:	2be0      	cmp	r3, #224	; 0xe0
 8012848:	d112      	bne.n	8012870 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012850:	f003 0301 	and.w	r3, r3, #1
 8012854:	b2db      	uxtb	r3, r3
 8012856:	2b00      	cmp	r3, #0
 8012858:	d007      	beq.n	801286a <ip4_input+0xba>
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	3304      	adds	r3, #4
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d002      	beq.n	801286a <ip4_input+0xba>
      netif = inp;
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	613b      	str	r3, [r7, #16]
 8012868:	e02a      	b.n	80128c0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801286a:	2300      	movs	r3, #0
 801286c:	613b      	str	r3, [r7, #16]
 801286e:	e027      	b.n	80128c0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012870:	6838      	ldr	r0, [r7, #0]
 8012872:	f7ff ff73 	bl	801275c <ip4_input_accept>
 8012876:	4603      	mov	r3, r0
 8012878:	2b00      	cmp	r3, #0
 801287a:	d002      	beq.n	8012882 <ip4_input+0xd2>
      netif = inp;
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	613b      	str	r3, [r7, #16]
 8012880:	e01e      	b.n	80128c0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012882:	2300      	movs	r3, #0
 8012884:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012886:	4b5a      	ldr	r3, [pc, #360]	; (80129f0 <ip4_input+0x240>)
 8012888:	695b      	ldr	r3, [r3, #20]
 801288a:	b2db      	uxtb	r3, r3
 801288c:	2b7f      	cmp	r3, #127	; 0x7f
 801288e:	d017      	beq.n	80128c0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012890:	4b58      	ldr	r3, [pc, #352]	; (80129f4 <ip4_input+0x244>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	613b      	str	r3, [r7, #16]
 8012896:	e00e      	b.n	80128b6 <ip4_input+0x106>
          if (netif == inp) {
 8012898:	693a      	ldr	r2, [r7, #16]
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	429a      	cmp	r2, r3
 801289e:	d006      	beq.n	80128ae <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80128a0:	6938      	ldr	r0, [r7, #16]
 80128a2:	f7ff ff5b 	bl	801275c <ip4_input_accept>
 80128a6:	4603      	mov	r3, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d108      	bne.n	80128be <ip4_input+0x10e>
 80128ac:	e000      	b.n	80128b0 <ip4_input+0x100>
            continue;
 80128ae:	bf00      	nop
        NETIF_FOREACH(netif) {
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	613b      	str	r3, [r7, #16]
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d1ed      	bne.n	8012898 <ip4_input+0xe8>
 80128bc:	e000      	b.n	80128c0 <ip4_input+0x110>
            break;
 80128be:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80128c0:	4b4b      	ldr	r3, [pc, #300]	; (80129f0 <ip4_input+0x240>)
 80128c2:	691b      	ldr	r3, [r3, #16]
 80128c4:	6839      	ldr	r1, [r7, #0]
 80128c6:	4618      	mov	r0, r3
 80128c8:	f000 f96e 	bl	8012ba8 <ip4_addr_isbroadcast_u32>
 80128cc:	4603      	mov	r3, r0
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d105      	bne.n	80128de <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80128d2:	4b47      	ldr	r3, [pc, #284]	; (80129f0 <ip4_input+0x240>)
 80128d4:	691b      	ldr	r3, [r3, #16]
 80128d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80128da:	2be0      	cmp	r3, #224	; 0xe0
 80128dc:	d104      	bne.n	80128e8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f7f8 fc8c 	bl	800b1fc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80128e4:	2300      	movs	r3, #0
 80128e6:	e07e      	b.n	80129e6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80128e8:	693b      	ldr	r3, [r7, #16]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d104      	bne.n	80128f8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f7f8 fc84 	bl	800b1fc <pbuf_free>
    return ERR_OK;
 80128f4:	2300      	movs	r3, #0
 80128f6:	e076      	b.n	80129e6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	88db      	ldrh	r3, [r3, #6]
 80128fc:	b29b      	uxth	r3, r3
 80128fe:	461a      	mov	r2, r3
 8012900:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012904:	4013      	ands	r3, r2
 8012906:	2b00      	cmp	r3, #0
 8012908:	d00b      	beq.n	8012922 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f000 fc92 	bl	8013234 <ip4_reass>
 8012910:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d101      	bne.n	801291c <ip4_input+0x16c>
      return ERR_OK;
 8012918:	2300      	movs	r3, #0
 801291a:	e064      	b.n	80129e6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012922:	4a33      	ldr	r2, [pc, #204]	; (80129f0 <ip4_input+0x240>)
 8012924:	693b      	ldr	r3, [r7, #16]
 8012926:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012928:	4a31      	ldr	r2, [pc, #196]	; (80129f0 <ip4_input+0x240>)
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801292e:	4a30      	ldr	r2, [pc, #192]	; (80129f0 <ip4_input+0x240>)
 8012930:	697b      	ldr	r3, [r7, #20]
 8012932:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	781b      	ldrb	r3, [r3, #0]
 8012938:	f003 030f 	and.w	r3, r3, #15
 801293c:	b2db      	uxtb	r3, r3
 801293e:	009b      	lsls	r3, r3, #2
 8012940:	b2db      	uxtb	r3, r3
 8012942:	b29a      	uxth	r2, r3
 8012944:	4b2a      	ldr	r3, [pc, #168]	; (80129f0 <ip4_input+0x240>)
 8012946:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012948:	89fb      	ldrh	r3, [r7, #14]
 801294a:	4619      	mov	r1, r3
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f7f8 fbcf 	bl	800b0f0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	7a5b      	ldrb	r3, [r3, #9]
 8012956:	2b11      	cmp	r3, #17
 8012958:	d006      	beq.n	8012968 <ip4_input+0x1b8>
 801295a:	2b11      	cmp	r3, #17
 801295c:	dc13      	bgt.n	8012986 <ip4_input+0x1d6>
 801295e:	2b01      	cmp	r3, #1
 8012960:	d00c      	beq.n	801297c <ip4_input+0x1cc>
 8012962:	2b06      	cmp	r3, #6
 8012964:	d005      	beq.n	8012972 <ip4_input+0x1c2>
 8012966:	e00e      	b.n	8012986 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012968:	6839      	ldr	r1, [r7, #0]
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f7fe f9f2 	bl	8010d54 <udp_input>
        break;
 8012970:	e026      	b.n	80129c0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012972:	6839      	ldr	r1, [r7, #0]
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f7fa fa79 	bl	800ce6c <tcp_input>
        break;
 801297a:	e021      	b.n	80129c0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801297c:	6839      	ldr	r1, [r7, #0]
 801297e:	6878      	ldr	r0, [r7, #4]
 8012980:	f7ff fcee 	bl	8012360 <icmp_input>
        break;
 8012984:	e01c      	b.n	80129c0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012986:	4b1a      	ldr	r3, [pc, #104]	; (80129f0 <ip4_input+0x240>)
 8012988:	695b      	ldr	r3, [r3, #20]
 801298a:	6939      	ldr	r1, [r7, #16]
 801298c:	4618      	mov	r0, r3
 801298e:	f000 f90b 	bl	8012ba8 <ip4_addr_isbroadcast_u32>
 8012992:	4603      	mov	r3, r0
 8012994:	2b00      	cmp	r3, #0
 8012996:	d10f      	bne.n	80129b8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012998:	4b15      	ldr	r3, [pc, #84]	; (80129f0 <ip4_input+0x240>)
 801299a:	695b      	ldr	r3, [r3, #20]
 801299c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80129a0:	2be0      	cmp	r3, #224	; 0xe0
 80129a2:	d009      	beq.n	80129b8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80129a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80129a8:	4619      	mov	r1, r3
 80129aa:	6878      	ldr	r0, [r7, #4]
 80129ac:	f7f8 fc13 	bl	800b1d6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80129b0:	2102      	movs	r1, #2
 80129b2:	6878      	ldr	r0, [r7, #4]
 80129b4:	f7ff fdd8 	bl	8012568 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80129b8:	6878      	ldr	r0, [r7, #4]
 80129ba:	f7f8 fc1f 	bl	800b1fc <pbuf_free>
        break;
 80129be:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80129c0:	4b0b      	ldr	r3, [pc, #44]	; (80129f0 <ip4_input+0x240>)
 80129c2:	2200      	movs	r2, #0
 80129c4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80129c6:	4b0a      	ldr	r3, [pc, #40]	; (80129f0 <ip4_input+0x240>)
 80129c8:	2200      	movs	r2, #0
 80129ca:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80129cc:	4b08      	ldr	r3, [pc, #32]	; (80129f0 <ip4_input+0x240>)
 80129ce:	2200      	movs	r2, #0
 80129d0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80129d2:	4b07      	ldr	r3, [pc, #28]	; (80129f0 <ip4_input+0x240>)
 80129d4:	2200      	movs	r2, #0
 80129d6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80129d8:	4b05      	ldr	r3, [pc, #20]	; (80129f0 <ip4_input+0x240>)
 80129da:	2200      	movs	r2, #0
 80129dc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80129de:	4b04      	ldr	r3, [pc, #16]	; (80129f0 <ip4_input+0x240>)
 80129e0:	2200      	movs	r2, #0
 80129e2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80129e4:	2300      	movs	r3, #0
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	3718      	adds	r7, #24
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}
 80129ee:	bf00      	nop
 80129f0:	20003cd4 	.word	0x20003cd4
 80129f4:	20008db0 	.word	0x20008db0

080129f8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b08a      	sub	sp, #40	; 0x28
 80129fc:	af04      	add	r7, sp, #16
 80129fe:	60f8      	str	r0, [r7, #12]
 8012a00:	60b9      	str	r1, [r7, #8]
 8012a02:	607a      	str	r2, [r7, #4]
 8012a04:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d009      	beq.n	8012a24 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d003      	beq.n	8012a1e <ip4_output_if+0x26>
 8012a16:	68bb      	ldr	r3, [r7, #8]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d102      	bne.n	8012a24 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a20:	3304      	adds	r3, #4
 8012a22:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012a24:	78fa      	ldrb	r2, [r7, #3]
 8012a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a28:	9302      	str	r3, [sp, #8]
 8012a2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012a2e:	9301      	str	r3, [sp, #4]
 8012a30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012a34:	9300      	str	r3, [sp, #0]
 8012a36:	4613      	mov	r3, r2
 8012a38:	687a      	ldr	r2, [r7, #4]
 8012a3a:	6979      	ldr	r1, [r7, #20]
 8012a3c:	68f8      	ldr	r0, [r7, #12]
 8012a3e:	f000 f805 	bl	8012a4c <ip4_output_if_src>
 8012a42:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	3718      	adds	r7, #24
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}

08012a4c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b088      	sub	sp, #32
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	60f8      	str	r0, [r7, #12]
 8012a54:	60b9      	str	r1, [r7, #8]
 8012a56:	607a      	str	r2, [r7, #4]
 8012a58:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	7b9b      	ldrb	r3, [r3, #14]
 8012a5e:	2b01      	cmp	r3, #1
 8012a60:	d006      	beq.n	8012a70 <ip4_output_if_src+0x24>
 8012a62:	4b4b      	ldr	r3, [pc, #300]	; (8012b90 <ip4_output_if_src+0x144>)
 8012a64:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012a68:	494a      	ldr	r1, [pc, #296]	; (8012b94 <ip4_output_if_src+0x148>)
 8012a6a:	484b      	ldr	r0, [pc, #300]	; (8012b98 <ip4_output_if_src+0x14c>)
 8012a6c:	f001 f834 	bl	8013ad8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d060      	beq.n	8012b38 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012a76:	2314      	movs	r3, #20
 8012a78:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012a7a:	2114      	movs	r1, #20
 8012a7c:	68f8      	ldr	r0, [r7, #12]
 8012a7e:	f7f8 fb27 	bl	800b0d0 <pbuf_add_header>
 8012a82:	4603      	mov	r3, r0
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d002      	beq.n	8012a8e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012a88:	f06f 0301 	mvn.w	r3, #1
 8012a8c:	e07c      	b.n	8012b88 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	895b      	ldrh	r3, [r3, #10]
 8012a98:	2b13      	cmp	r3, #19
 8012a9a:	d806      	bhi.n	8012aaa <ip4_output_if_src+0x5e>
 8012a9c:	4b3c      	ldr	r3, [pc, #240]	; (8012b90 <ip4_output_if_src+0x144>)
 8012a9e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012aa2:	493e      	ldr	r1, [pc, #248]	; (8012b9c <ip4_output_if_src+0x150>)
 8012aa4:	483c      	ldr	r0, [pc, #240]	; (8012b98 <ip4_output_if_src+0x14c>)
 8012aa6:	f001 f817 	bl	8013ad8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012aaa:	69fb      	ldr	r3, [r7, #28]
 8012aac:	78fa      	ldrb	r2, [r7, #3]
 8012aae:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012ab0:	69fb      	ldr	r3, [r7, #28]
 8012ab2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012ab6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681a      	ldr	r2, [r3, #0]
 8012abc:	69fb      	ldr	r3, [r7, #28]
 8012abe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012ac0:	8b7b      	ldrh	r3, [r7, #26]
 8012ac2:	089b      	lsrs	r3, r3, #2
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	b2db      	uxtb	r3, r3
 8012ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012acc:	b2da      	uxtb	r2, r3
 8012ace:	69fb      	ldr	r3, [r7, #28]
 8012ad0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012ad2:	69fb      	ldr	r3, [r7, #28]
 8012ad4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012ad8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	891b      	ldrh	r3, [r3, #8]
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7f7 f8e8 	bl	8009cb4 <lwip_htons>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	461a      	mov	r2, r3
 8012ae8:	69fb      	ldr	r3, [r7, #28]
 8012aea:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012aec:	69fb      	ldr	r3, [r7, #28]
 8012aee:	2200      	movs	r2, #0
 8012af0:	719a      	strb	r2, [r3, #6]
 8012af2:	2200      	movs	r2, #0
 8012af4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012af6:	4b2a      	ldr	r3, [pc, #168]	; (8012ba0 <ip4_output_if_src+0x154>)
 8012af8:	881b      	ldrh	r3, [r3, #0]
 8012afa:	4618      	mov	r0, r3
 8012afc:	f7f7 f8da 	bl	8009cb4 <lwip_htons>
 8012b00:	4603      	mov	r3, r0
 8012b02:	461a      	mov	r2, r3
 8012b04:	69fb      	ldr	r3, [r7, #28]
 8012b06:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012b08:	4b25      	ldr	r3, [pc, #148]	; (8012ba0 <ip4_output_if_src+0x154>)
 8012b0a:	881b      	ldrh	r3, [r3, #0]
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	b29a      	uxth	r2, r3
 8012b10:	4b23      	ldr	r3, [pc, #140]	; (8012ba0 <ip4_output_if_src+0x154>)
 8012b12:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d104      	bne.n	8012b24 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012b1a:	4b22      	ldr	r3, [pc, #136]	; (8012ba4 <ip4_output_if_src+0x158>)
 8012b1c:	681a      	ldr	r2, [r3, #0]
 8012b1e:	69fb      	ldr	r3, [r7, #28]
 8012b20:	60da      	str	r2, [r3, #12]
 8012b22:	e003      	b.n	8012b2c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	681a      	ldr	r2, [r3, #0]
 8012b28:	69fb      	ldr	r3, [r7, #28]
 8012b2a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012b2c:	69fb      	ldr	r3, [r7, #28]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	729a      	strb	r2, [r3, #10]
 8012b32:	2200      	movs	r2, #0
 8012b34:	72da      	strb	r2, [r3, #11]
 8012b36:	e00f      	b.n	8012b58 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	895b      	ldrh	r3, [r3, #10]
 8012b3c:	2b13      	cmp	r3, #19
 8012b3e:	d802      	bhi.n	8012b46 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012b40:	f06f 0301 	mvn.w	r3, #1
 8012b44:	e020      	b.n	8012b88 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	685b      	ldr	r3, [r3, #4]
 8012b4a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012b4c:	69fb      	ldr	r3, [r7, #28]
 8012b4e:	691b      	ldr	r3, [r3, #16]
 8012b50:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012b52:	f107 0314 	add.w	r3, r7, #20
 8012b56:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d00c      	beq.n	8012b7a <ip4_output_if_src+0x12e>
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	891a      	ldrh	r2, [r3, #8]
 8012b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d906      	bls.n	8012b7a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012b70:	68f8      	ldr	r0, [r7, #12]
 8012b72:	f000 fd4d 	bl	8013610 <ip4_frag>
 8012b76:	4603      	mov	r3, r0
 8012b78:	e006      	b.n	8012b88 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b7c:	695b      	ldr	r3, [r3, #20]
 8012b7e:	687a      	ldr	r2, [r7, #4]
 8012b80:	68f9      	ldr	r1, [r7, #12]
 8012b82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b84:	4798      	blx	r3
 8012b86:	4603      	mov	r3, r0
}
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3720      	adds	r7, #32
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}
 8012b90:	080174a4 	.word	0x080174a4
 8012b94:	080174d8 	.word	0x080174d8
 8012b98:	080174e4 	.word	0x080174e4
 8012b9c:	0801750c 	.word	0x0801750c
 8012ba0:	2000020a 	.word	0x2000020a
 8012ba4:	080178e8 	.word	0x080178e8

08012ba8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012ba8:	b480      	push	{r7}
 8012baa:	b085      	sub	sp, #20
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bbc:	d002      	beq.n	8012bc4 <ip4_addr_isbroadcast_u32+0x1c>
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d101      	bne.n	8012bc8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	e02a      	b.n	8012c1e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bce:	f003 0302 	and.w	r3, r3, #2
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d101      	bne.n	8012bda <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	e021      	b.n	8012c1e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012bda:	683b      	ldr	r3, [r7, #0]
 8012bdc:	3304      	adds	r3, #4
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	687a      	ldr	r2, [r7, #4]
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d101      	bne.n	8012bea <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012be6:	2300      	movs	r3, #0
 8012be8:	e019      	b.n	8012c1e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012bea:	68fa      	ldr	r2, [r7, #12]
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	3304      	adds	r3, #4
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	405a      	eors	r2, r3
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	3308      	adds	r3, #8
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	4013      	ands	r3, r2
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d10d      	bne.n	8012c1c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	3308      	adds	r3, #8
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	43da      	mvns	r2, r3
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	3308      	adds	r3, #8
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012c14:	429a      	cmp	r2, r3
 8012c16:	d101      	bne.n	8012c1c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	e000      	b.n	8012c1e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012c1c:	2300      	movs	r3, #0
  }
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3714      	adds	r7, #20
 8012c22:	46bd      	mov	sp, r7
 8012c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c28:	4770      	bx	lr
	...

08012c2c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b084      	sub	sp, #16
 8012c30:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012c32:	2300      	movs	r3, #0
 8012c34:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012c36:	4b12      	ldr	r3, [pc, #72]	; (8012c80 <ip_reass_tmr+0x54>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012c3c:	e018      	b.n	8012c70 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	7fdb      	ldrb	r3, [r3, #31]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d00b      	beq.n	8012c5e <ip_reass_tmr+0x32>
      r->timer--;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	7fdb      	ldrb	r3, [r3, #31]
 8012c4a:	3b01      	subs	r3, #1
 8012c4c:	b2da      	uxtb	r2, r3
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	60fb      	str	r3, [r7, #12]
 8012c5c:	e008      	b.n	8012c70 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012c68:	68b9      	ldr	r1, [r7, #8]
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	f000 f80a 	bl	8012c84 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d1e3      	bne.n	8012c3e <ip_reass_tmr+0x12>
    }
  }
}
 8012c76:	bf00      	nop
 8012c78:	bf00      	nop
 8012c7a:	3710      	adds	r7, #16
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}
 8012c80:	2000020c 	.word	0x2000020c

08012c84 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b088      	sub	sp, #32
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
 8012c8c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012c92:	683a      	ldr	r2, [r7, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	429a      	cmp	r2, r3
 8012c98:	d105      	bne.n	8012ca6 <ip_reass_free_complete_datagram+0x22>
 8012c9a:	4b45      	ldr	r3, [pc, #276]	; (8012db0 <ip_reass_free_complete_datagram+0x12c>)
 8012c9c:	22ab      	movs	r2, #171	; 0xab
 8012c9e:	4945      	ldr	r1, [pc, #276]	; (8012db4 <ip_reass_free_complete_datagram+0x130>)
 8012ca0:	4845      	ldr	r0, [pc, #276]	; (8012db8 <ip_reass_free_complete_datagram+0x134>)
 8012ca2:	f000 ff19 	bl	8013ad8 <iprintf>
  if (prev != NULL) {
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d00a      	beq.n	8012cc2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	687a      	ldr	r2, [r7, #4]
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	d005      	beq.n	8012cc2 <ip_reass_free_complete_datagram+0x3e>
 8012cb6:	4b3e      	ldr	r3, [pc, #248]	; (8012db0 <ip_reass_free_complete_datagram+0x12c>)
 8012cb8:	22ad      	movs	r2, #173	; 0xad
 8012cba:	4940      	ldr	r1, [pc, #256]	; (8012dbc <ip_reass_free_complete_datagram+0x138>)
 8012cbc:	483e      	ldr	r0, [pc, #248]	; (8012db8 <ip_reass_free_complete_datagram+0x134>)
 8012cbe:	f000 ff0b 	bl	8013ad8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	685b      	ldr	r3, [r3, #4]
 8012cc6:	685b      	ldr	r3, [r3, #4]
 8012cc8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012cca:	697b      	ldr	r3, [r7, #20]
 8012ccc:	889b      	ldrh	r3, [r3, #4]
 8012cce:	b29b      	uxth	r3, r3
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d12a      	bne.n	8012d2a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	685b      	ldr	r3, [r3, #4]
 8012cd8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	681a      	ldr	r2, [r3, #0]
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012ce2:	69bb      	ldr	r3, [r7, #24]
 8012ce4:	6858      	ldr	r0, [r3, #4]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	3308      	adds	r3, #8
 8012cea:	2214      	movs	r2, #20
 8012cec:	4619      	mov	r1, r3
 8012cee:	f000 fedd 	bl	8013aac <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012cf2:	2101      	movs	r1, #1
 8012cf4:	69b8      	ldr	r0, [r7, #24]
 8012cf6:	f7ff fc47 	bl	8012588 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012cfa:	69b8      	ldr	r0, [r7, #24]
 8012cfc:	f7f8 fb06 	bl	800b30c <pbuf_clen>
 8012d00:	4603      	mov	r3, r0
 8012d02:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012d04:	8bfa      	ldrh	r2, [r7, #30]
 8012d06:	8a7b      	ldrh	r3, [r7, #18]
 8012d08:	4413      	add	r3, r2
 8012d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d0e:	db05      	blt.n	8012d1c <ip_reass_free_complete_datagram+0x98>
 8012d10:	4b27      	ldr	r3, [pc, #156]	; (8012db0 <ip_reass_free_complete_datagram+0x12c>)
 8012d12:	22bc      	movs	r2, #188	; 0xbc
 8012d14:	492a      	ldr	r1, [pc, #168]	; (8012dc0 <ip_reass_free_complete_datagram+0x13c>)
 8012d16:	4828      	ldr	r0, [pc, #160]	; (8012db8 <ip_reass_free_complete_datagram+0x134>)
 8012d18:	f000 fede 	bl	8013ad8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012d1c:	8bfa      	ldrh	r2, [r7, #30]
 8012d1e:	8a7b      	ldrh	r3, [r7, #18]
 8012d20:	4413      	add	r3, r2
 8012d22:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012d24:	69b8      	ldr	r0, [r7, #24]
 8012d26:	f7f8 fa69 	bl	800b1fc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	685b      	ldr	r3, [r3, #4]
 8012d2e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012d30:	e01f      	b.n	8012d72 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012d32:	69bb      	ldr	r3, [r7, #24]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012d38:	69bb      	ldr	r3, [r7, #24]
 8012d3a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012d42:	68f8      	ldr	r0, [r7, #12]
 8012d44:	f7f8 fae2 	bl	800b30c <pbuf_clen>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012d4c:	8bfa      	ldrh	r2, [r7, #30]
 8012d4e:	8a7b      	ldrh	r3, [r7, #18]
 8012d50:	4413      	add	r3, r2
 8012d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d56:	db05      	blt.n	8012d64 <ip_reass_free_complete_datagram+0xe0>
 8012d58:	4b15      	ldr	r3, [pc, #84]	; (8012db0 <ip_reass_free_complete_datagram+0x12c>)
 8012d5a:	22cc      	movs	r2, #204	; 0xcc
 8012d5c:	4918      	ldr	r1, [pc, #96]	; (8012dc0 <ip_reass_free_complete_datagram+0x13c>)
 8012d5e:	4816      	ldr	r0, [pc, #88]	; (8012db8 <ip_reass_free_complete_datagram+0x134>)
 8012d60:	f000 feba 	bl	8013ad8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012d64:	8bfa      	ldrh	r2, [r7, #30]
 8012d66:	8a7b      	ldrh	r3, [r7, #18]
 8012d68:	4413      	add	r3, r2
 8012d6a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012d6c:	68f8      	ldr	r0, [r7, #12]
 8012d6e:	f7f8 fa45 	bl	800b1fc <pbuf_free>
  while (p != NULL) {
 8012d72:	69bb      	ldr	r3, [r7, #24]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d1dc      	bne.n	8012d32 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012d78:	6839      	ldr	r1, [r7, #0]
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f000 f8c2 	bl	8012f04 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012d80:	4b10      	ldr	r3, [pc, #64]	; (8012dc4 <ip_reass_free_complete_datagram+0x140>)
 8012d82:	881b      	ldrh	r3, [r3, #0]
 8012d84:	8bfa      	ldrh	r2, [r7, #30]
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d905      	bls.n	8012d96 <ip_reass_free_complete_datagram+0x112>
 8012d8a:	4b09      	ldr	r3, [pc, #36]	; (8012db0 <ip_reass_free_complete_datagram+0x12c>)
 8012d8c:	22d2      	movs	r2, #210	; 0xd2
 8012d8e:	490e      	ldr	r1, [pc, #56]	; (8012dc8 <ip_reass_free_complete_datagram+0x144>)
 8012d90:	4809      	ldr	r0, [pc, #36]	; (8012db8 <ip_reass_free_complete_datagram+0x134>)
 8012d92:	f000 fea1 	bl	8013ad8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012d96:	4b0b      	ldr	r3, [pc, #44]	; (8012dc4 <ip_reass_free_complete_datagram+0x140>)
 8012d98:	881a      	ldrh	r2, [r3, #0]
 8012d9a:	8bfb      	ldrh	r3, [r7, #30]
 8012d9c:	1ad3      	subs	r3, r2, r3
 8012d9e:	b29a      	uxth	r2, r3
 8012da0:	4b08      	ldr	r3, [pc, #32]	; (8012dc4 <ip_reass_free_complete_datagram+0x140>)
 8012da2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012da4:	8bfb      	ldrh	r3, [r7, #30]
}
 8012da6:	4618      	mov	r0, r3
 8012da8:	3720      	adds	r7, #32
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	bf00      	nop
 8012db0:	0801753c 	.word	0x0801753c
 8012db4:	08017578 	.word	0x08017578
 8012db8:	08017584 	.word	0x08017584
 8012dbc:	080175ac 	.word	0x080175ac
 8012dc0:	080175c0 	.word	0x080175c0
 8012dc4:	20000210 	.word	0x20000210
 8012dc8:	080175e0 	.word	0x080175e0

08012dcc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b08a      	sub	sp, #40	; 0x28
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012dda:	2300      	movs	r3, #0
 8012ddc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012dde:	2300      	movs	r3, #0
 8012de0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012de2:	2300      	movs	r3, #0
 8012de4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012de6:	2300      	movs	r3, #0
 8012de8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012dea:	4b28      	ldr	r3, [pc, #160]	; (8012e8c <ip_reass_remove_oldest_datagram+0xc0>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012df0:	e030      	b.n	8012e54 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df4:	695a      	ldr	r2, [r3, #20]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	68db      	ldr	r3, [r3, #12]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d10c      	bne.n	8012e18 <ip_reass_remove_oldest_datagram+0x4c>
 8012dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e00:	699a      	ldr	r2, [r3, #24]
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	691b      	ldr	r3, [r3, #16]
 8012e06:	429a      	cmp	r2, r3
 8012e08:	d106      	bne.n	8012e18 <ip_reass_remove_oldest_datagram+0x4c>
 8012e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0c:	899a      	ldrh	r2, [r3, #12]
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	889b      	ldrh	r3, [r3, #4]
 8012e12:	b29b      	uxth	r3, r3
 8012e14:	429a      	cmp	r2, r3
 8012e16:	d014      	beq.n	8012e42 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	3301      	adds	r3, #1
 8012e1c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012e1e:	6a3b      	ldr	r3, [r7, #32]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d104      	bne.n	8012e2e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e26:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012e28:	69fb      	ldr	r3, [r7, #28]
 8012e2a:	61bb      	str	r3, [r7, #24]
 8012e2c:	e009      	b.n	8012e42 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e30:	7fda      	ldrb	r2, [r3, #31]
 8012e32:	6a3b      	ldr	r3, [r7, #32]
 8012e34:	7fdb      	ldrb	r3, [r3, #31]
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d803      	bhi.n	8012e42 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e3c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012e3e:	69fb      	ldr	r3, [r7, #28]
 8012e40:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d001      	beq.n	8012e4e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e4c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d1cb      	bne.n	8012df2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012e5a:	6a3b      	ldr	r3, [r7, #32]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d008      	beq.n	8012e72 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012e60:	69b9      	ldr	r1, [r7, #24]
 8012e62:	6a38      	ldr	r0, [r7, #32]
 8012e64:	f7ff ff0e 	bl	8012c84 <ip_reass_free_complete_datagram>
 8012e68:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012e6a:	697a      	ldr	r2, [r7, #20]
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	4413      	add	r3, r2
 8012e70:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012e72:	697a      	ldr	r2, [r7, #20]
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	429a      	cmp	r2, r3
 8012e78:	da02      	bge.n	8012e80 <ip_reass_remove_oldest_datagram+0xb4>
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	2b01      	cmp	r3, #1
 8012e7e:	dcac      	bgt.n	8012dda <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012e80:	697b      	ldr	r3, [r7, #20]
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3728      	adds	r7, #40	; 0x28
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
 8012e8a:	bf00      	nop
 8012e8c:	2000020c 	.word	0x2000020c

08012e90 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b084      	sub	sp, #16
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012e9a:	2004      	movs	r0, #4
 8012e9c:	f7f7 fb70 	bl	800a580 <memp_malloc>
 8012ea0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d110      	bne.n	8012eca <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012ea8:	6839      	ldr	r1, [r7, #0]
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f7ff ff8e 	bl	8012dcc <ip_reass_remove_oldest_datagram>
 8012eb0:	4602      	mov	r2, r0
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	4293      	cmp	r3, r2
 8012eb6:	dc03      	bgt.n	8012ec0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012eb8:	2004      	movs	r0, #4
 8012eba:	f7f7 fb61 	bl	800a580 <memp_malloc>
 8012ebe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d101      	bne.n	8012eca <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	e016      	b.n	8012ef8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012eca:	2220      	movs	r2, #32
 8012ecc:	2100      	movs	r1, #0
 8012ece:	68f8      	ldr	r0, [r7, #12]
 8012ed0:	f000 fdfa 	bl	8013ac8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	220f      	movs	r2, #15
 8012ed8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012eda:	4b09      	ldr	r3, [pc, #36]	; (8012f00 <ip_reass_enqueue_new_datagram+0x70>)
 8012edc:	681a      	ldr	r2, [r3, #0]
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012ee2:	4a07      	ldr	r2, [pc, #28]	; (8012f00 <ip_reass_enqueue_new_datagram+0x70>)
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	3308      	adds	r3, #8
 8012eec:	2214      	movs	r2, #20
 8012eee:	6879      	ldr	r1, [r7, #4]
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f000 fddb 	bl	8013aac <memcpy>
  return ipr;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	3710      	adds	r7, #16
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}
 8012f00:	2000020c 	.word	0x2000020c

08012f04 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b082      	sub	sp, #8
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
 8012f0c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012f0e:	4b10      	ldr	r3, [pc, #64]	; (8012f50 <ip_reass_dequeue_datagram+0x4c>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	687a      	ldr	r2, [r7, #4]
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d104      	bne.n	8012f22 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	4a0c      	ldr	r2, [pc, #48]	; (8012f50 <ip_reass_dequeue_datagram+0x4c>)
 8012f1e:	6013      	str	r3, [r2, #0]
 8012f20:	e00d      	b.n	8012f3e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012f22:	683b      	ldr	r3, [r7, #0]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d106      	bne.n	8012f36 <ip_reass_dequeue_datagram+0x32>
 8012f28:	4b0a      	ldr	r3, [pc, #40]	; (8012f54 <ip_reass_dequeue_datagram+0x50>)
 8012f2a:	f240 1245 	movw	r2, #325	; 0x145
 8012f2e:	490a      	ldr	r1, [pc, #40]	; (8012f58 <ip_reass_dequeue_datagram+0x54>)
 8012f30:	480a      	ldr	r0, [pc, #40]	; (8012f5c <ip_reass_dequeue_datagram+0x58>)
 8012f32:	f000 fdd1 	bl	8013ad8 <iprintf>
    prev->next = ipr->next;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681a      	ldr	r2, [r3, #0]
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012f3e:	6879      	ldr	r1, [r7, #4]
 8012f40:	2004      	movs	r0, #4
 8012f42:	f7f7 fb69 	bl	800a618 <memp_free>
}
 8012f46:	bf00      	nop
 8012f48:	3708      	adds	r7, #8
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bd80      	pop	{r7, pc}
 8012f4e:	bf00      	nop
 8012f50:	2000020c 	.word	0x2000020c
 8012f54:	0801753c 	.word	0x0801753c
 8012f58:	08017604 	.word	0x08017604
 8012f5c:	08017584 	.word	0x08017584

08012f60 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b08c      	sub	sp, #48	; 0x30
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012f70:	2301      	movs	r3, #1
 8012f72:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	685b      	ldr	r3, [r3, #4]
 8012f78:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012f7a:	69fb      	ldr	r3, [r7, #28]
 8012f7c:	885b      	ldrh	r3, [r3, #2]
 8012f7e:	b29b      	uxth	r3, r3
 8012f80:	4618      	mov	r0, r3
 8012f82:	f7f6 fe97 	bl	8009cb4 <lwip_htons>
 8012f86:	4603      	mov	r3, r0
 8012f88:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012f8a:	69fb      	ldr	r3, [r7, #28]
 8012f8c:	781b      	ldrb	r3, [r3, #0]
 8012f8e:	f003 030f 	and.w	r3, r3, #15
 8012f92:	b2db      	uxtb	r3, r3
 8012f94:	009b      	lsls	r3, r3, #2
 8012f96:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012f98:	7e7b      	ldrb	r3, [r7, #25]
 8012f9a:	b29b      	uxth	r3, r3
 8012f9c:	8b7a      	ldrh	r2, [r7, #26]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d202      	bcs.n	8012fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8012fa6:	e135      	b.n	8013214 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012fa8:	7e7b      	ldrb	r3, [r7, #25]
 8012faa:	b29b      	uxth	r3, r3
 8012fac:	8b7a      	ldrh	r2, [r7, #26]
 8012fae:	1ad3      	subs	r3, r2, r3
 8012fb0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012fb2:	69fb      	ldr	r3, [r7, #28]
 8012fb4:	88db      	ldrh	r3, [r3, #6]
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f7f6 fe7b 	bl	8009cb4 <lwip_htons>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012fc4:	b29b      	uxth	r3, r3
 8012fc6:	00db      	lsls	r3, r3, #3
 8012fc8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012fca:	68bb      	ldr	r3, [r7, #8]
 8012fcc:	685b      	ldr	r3, [r3, #4]
 8012fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	701a      	strb	r2, [r3, #0]
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	705a      	strb	r2, [r3, #1]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	709a      	strb	r2, [r3, #2]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe4:	8afa      	ldrh	r2, [r7, #22]
 8012fe6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012fe8:	8afa      	ldrh	r2, [r7, #22]
 8012fea:	8b7b      	ldrh	r3, [r7, #26]
 8012fec:	4413      	add	r3, r2
 8012fee:	b29a      	uxth	r2, r3
 8012ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff6:	88db      	ldrh	r3, [r3, #6]
 8012ff8:	b29b      	uxth	r3, r3
 8012ffa:	8afa      	ldrh	r2, [r7, #22]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d902      	bls.n	8013006 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013000:	f04f 33ff 	mov.w	r3, #4294967295
 8013004:	e106      	b.n	8013214 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	685b      	ldr	r3, [r3, #4]
 801300a:	627b      	str	r3, [r7, #36]	; 0x24
 801300c:	e068      	b.n	80130e0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013010:	685b      	ldr	r3, [r3, #4]
 8013012:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013016:	889b      	ldrh	r3, [r3, #4]
 8013018:	b29a      	uxth	r2, r3
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	889b      	ldrh	r3, [r3, #4]
 801301e:	b29b      	uxth	r3, r3
 8013020:	429a      	cmp	r2, r3
 8013022:	d235      	bcs.n	8013090 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013028:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801302c:	2b00      	cmp	r3, #0
 801302e:	d020      	beq.n	8013072 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013032:	889b      	ldrh	r3, [r3, #4]
 8013034:	b29a      	uxth	r2, r3
 8013036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013038:	88db      	ldrh	r3, [r3, #6]
 801303a:	b29b      	uxth	r3, r3
 801303c:	429a      	cmp	r2, r3
 801303e:	d307      	bcc.n	8013050 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013042:	88db      	ldrh	r3, [r3, #6]
 8013044:	b29a      	uxth	r2, r3
 8013046:	693b      	ldr	r3, [r7, #16]
 8013048:	889b      	ldrh	r3, [r3, #4]
 801304a:	b29b      	uxth	r3, r3
 801304c:	429a      	cmp	r2, r3
 801304e:	d902      	bls.n	8013056 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013050:	f04f 33ff 	mov.w	r3, #4294967295
 8013054:	e0de      	b.n	8013214 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013058:	68ba      	ldr	r2, [r7, #8]
 801305a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801305e:	88db      	ldrh	r3, [r3, #6]
 8013060:	b29a      	uxth	r2, r3
 8013062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013064:	889b      	ldrh	r3, [r3, #4]
 8013066:	b29b      	uxth	r3, r3
 8013068:	429a      	cmp	r2, r3
 801306a:	d03d      	beq.n	80130e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801306c:	2300      	movs	r3, #0
 801306e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013070:	e03a      	b.n	80130e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013074:	88db      	ldrh	r3, [r3, #6]
 8013076:	b29a      	uxth	r2, r3
 8013078:	693b      	ldr	r3, [r7, #16]
 801307a:	889b      	ldrh	r3, [r3, #4]
 801307c:	b29b      	uxth	r3, r3
 801307e:	429a      	cmp	r2, r3
 8013080:	d902      	bls.n	8013088 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013082:	f04f 33ff 	mov.w	r3, #4294967295
 8013086:	e0c5      	b.n	8013214 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	68ba      	ldr	r2, [r7, #8]
 801308c:	605a      	str	r2, [r3, #4]
      break;
 801308e:	e02b      	b.n	80130e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013092:	889b      	ldrh	r3, [r3, #4]
 8013094:	b29a      	uxth	r2, r3
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	889b      	ldrh	r3, [r3, #4]
 801309a:	b29b      	uxth	r3, r3
 801309c:	429a      	cmp	r2, r3
 801309e:	d102      	bne.n	80130a6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80130a0:	f04f 33ff 	mov.w	r3, #4294967295
 80130a4:	e0b6      	b.n	8013214 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80130a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a8:	889b      	ldrh	r3, [r3, #4]
 80130aa:	b29a      	uxth	r2, r3
 80130ac:	693b      	ldr	r3, [r7, #16]
 80130ae:	88db      	ldrh	r3, [r3, #6]
 80130b0:	b29b      	uxth	r3, r3
 80130b2:	429a      	cmp	r2, r3
 80130b4:	d202      	bcs.n	80130bc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80130b6:	f04f 33ff 	mov.w	r3, #4294967295
 80130ba:	e0ab      	b.n	8013214 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80130bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d009      	beq.n	80130d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80130c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c4:	88db      	ldrh	r3, [r3, #6]
 80130c6:	b29a      	uxth	r2, r3
 80130c8:	693b      	ldr	r3, [r7, #16]
 80130ca:	889b      	ldrh	r3, [r3, #4]
 80130cc:	b29b      	uxth	r3, r3
 80130ce:	429a      	cmp	r2, r3
 80130d0:	d001      	beq.n	80130d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80130d2:	2300      	movs	r3, #0
 80130d4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80130dc:	693b      	ldr	r3, [r7, #16]
 80130de:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80130e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d193      	bne.n	801300e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80130e6:	e000      	b.n	80130ea <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80130e8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80130ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d12d      	bne.n	801314c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80130f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d01c      	beq.n	8013130 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80130f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f8:	88db      	ldrh	r3, [r3, #6]
 80130fa:	b29a      	uxth	r2, r3
 80130fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130fe:	889b      	ldrh	r3, [r3, #4]
 8013100:	b29b      	uxth	r3, r3
 8013102:	429a      	cmp	r2, r3
 8013104:	d906      	bls.n	8013114 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013106:	4b45      	ldr	r3, [pc, #276]	; (801321c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013108:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801310c:	4944      	ldr	r1, [pc, #272]	; (8013220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801310e:	4845      	ldr	r0, [pc, #276]	; (8013224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013110:	f000 fce2 	bl	8013ad8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013116:	68ba      	ldr	r2, [r7, #8]
 8013118:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801311c:	88db      	ldrh	r3, [r3, #6]
 801311e:	b29a      	uxth	r2, r3
 8013120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013122:	889b      	ldrh	r3, [r3, #4]
 8013124:	b29b      	uxth	r3, r3
 8013126:	429a      	cmp	r2, r3
 8013128:	d010      	beq.n	801314c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801312a:	2300      	movs	r3, #0
 801312c:	623b      	str	r3, [r7, #32]
 801312e:	e00d      	b.n	801314c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	685b      	ldr	r3, [r3, #4]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d006      	beq.n	8013146 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013138:	4b38      	ldr	r3, [pc, #224]	; (801321c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801313a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801313e:	493a      	ldr	r1, [pc, #232]	; (8013228 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013140:	4838      	ldr	r0, [pc, #224]	; (8013224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013142:	f000 fcc9 	bl	8013ad8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	68ba      	ldr	r2, [r7, #8]
 801314a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d105      	bne.n	801315e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	7f9b      	ldrb	r3, [r3, #30]
 8013156:	f003 0301 	and.w	r3, r3, #1
 801315a:	2b00      	cmp	r3, #0
 801315c:	d059      	beq.n	8013212 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801315e:	6a3b      	ldr	r3, [r7, #32]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d04f      	beq.n	8013204 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	685b      	ldr	r3, [r3, #4]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d006      	beq.n	801317a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	889b      	ldrh	r3, [r3, #4]
 8013174:	b29b      	uxth	r3, r3
 8013176:	2b00      	cmp	r3, #0
 8013178:	d002      	beq.n	8013180 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801317a:	2300      	movs	r3, #0
 801317c:	623b      	str	r3, [r7, #32]
 801317e:	e041      	b.n	8013204 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013182:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801318a:	e012      	b.n	80131b2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318e:	685b      	ldr	r3, [r3, #4]
 8013190:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013194:	88db      	ldrh	r3, [r3, #6]
 8013196:	b29a      	uxth	r2, r3
 8013198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801319a:	889b      	ldrh	r3, [r3, #4]
 801319c:	b29b      	uxth	r3, r3
 801319e:	429a      	cmp	r2, r3
 80131a0:	d002      	beq.n	80131a8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80131a2:	2300      	movs	r3, #0
 80131a4:	623b      	str	r3, [r7, #32]
            break;
 80131a6:	e007      	b.n	80131b8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80131a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131aa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80131ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80131b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d1e9      	bne.n	801318c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80131b8:	6a3b      	ldr	r3, [r7, #32]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d022      	beq.n	8013204 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d106      	bne.n	80131d4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80131c6:	4b15      	ldr	r3, [pc, #84]	; (801321c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80131c8:	f240 12df 	movw	r2, #479	; 0x1df
 80131cc:	4917      	ldr	r1, [pc, #92]	; (801322c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80131ce:	4815      	ldr	r0, [pc, #84]	; (8013224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80131d0:	f000 fc82 	bl	8013ad8 <iprintf>
          LWIP_ASSERT("sanity check",
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	685b      	ldr	r3, [r3, #4]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80131dc:	429a      	cmp	r2, r3
 80131de:	d106      	bne.n	80131ee <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80131e0:	4b0e      	ldr	r3, [pc, #56]	; (801321c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80131e2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80131e6:	4911      	ldr	r1, [pc, #68]	; (801322c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80131e8:	480e      	ldr	r0, [pc, #56]	; (8013224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80131ea:	f000 fc75 	bl	8013ad8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80131ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d006      	beq.n	8013204 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80131f6:	4b09      	ldr	r3, [pc, #36]	; (801321c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80131f8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80131fc:	490c      	ldr	r1, [pc, #48]	; (8013230 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80131fe:	4809      	ldr	r0, [pc, #36]	; (8013224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013200:	f000 fc6a 	bl	8013ad8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013204:	6a3b      	ldr	r3, [r7, #32]
 8013206:	2b00      	cmp	r3, #0
 8013208:	bf14      	ite	ne
 801320a:	2301      	movne	r3, #1
 801320c:	2300      	moveq	r3, #0
 801320e:	b2db      	uxtb	r3, r3
 8013210:	e000      	b.n	8013214 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013212:	2300      	movs	r3, #0
}
 8013214:	4618      	mov	r0, r3
 8013216:	3730      	adds	r7, #48	; 0x30
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}
 801321c:	0801753c 	.word	0x0801753c
 8013220:	08017620 	.word	0x08017620
 8013224:	08017584 	.word	0x08017584
 8013228:	08017640 	.word	0x08017640
 801322c:	08017678 	.word	0x08017678
 8013230:	08017688 	.word	0x08017688

08013234 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b08e      	sub	sp, #56	; 0x38
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	685b      	ldr	r3, [r3, #4]
 8013240:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013244:	781b      	ldrb	r3, [r3, #0]
 8013246:	f003 030f 	and.w	r3, r3, #15
 801324a:	b2db      	uxtb	r3, r3
 801324c:	009b      	lsls	r3, r3, #2
 801324e:	b2db      	uxtb	r3, r3
 8013250:	2b14      	cmp	r3, #20
 8013252:	f040 8167 	bne.w	8013524 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013258:	88db      	ldrh	r3, [r3, #6]
 801325a:	b29b      	uxth	r3, r3
 801325c:	4618      	mov	r0, r3
 801325e:	f7f6 fd29 	bl	8009cb4 <lwip_htons>
 8013262:	4603      	mov	r3, r0
 8013264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013268:	b29b      	uxth	r3, r3
 801326a:	00db      	lsls	r3, r3, #3
 801326c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801326e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013270:	885b      	ldrh	r3, [r3, #2]
 8013272:	b29b      	uxth	r3, r3
 8013274:	4618      	mov	r0, r3
 8013276:	f7f6 fd1d 	bl	8009cb4 <lwip_htons>
 801327a:	4603      	mov	r3, r0
 801327c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013280:	781b      	ldrb	r3, [r3, #0]
 8013282:	f003 030f 	and.w	r3, r3, #15
 8013286:	b2db      	uxtb	r3, r3
 8013288:	009b      	lsls	r3, r3, #2
 801328a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801328e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013292:	b29b      	uxth	r3, r3
 8013294:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013296:	429a      	cmp	r2, r3
 8013298:	f0c0 8146 	bcc.w	8013528 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801329c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80132a0:	b29b      	uxth	r3, r3
 80132a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80132a4:	1ad3      	subs	r3, r2, r3
 80132a6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80132a8:	6878      	ldr	r0, [r7, #4]
 80132aa:	f7f8 f82f 	bl	800b30c <pbuf_clen>
 80132ae:	4603      	mov	r3, r0
 80132b0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80132b2:	4b9f      	ldr	r3, [pc, #636]	; (8013530 <ip4_reass+0x2fc>)
 80132b4:	881b      	ldrh	r3, [r3, #0]
 80132b6:	461a      	mov	r2, r3
 80132b8:	8c3b      	ldrh	r3, [r7, #32]
 80132ba:	4413      	add	r3, r2
 80132bc:	2b0a      	cmp	r3, #10
 80132be:	dd10      	ble.n	80132e2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80132c0:	8c3b      	ldrh	r3, [r7, #32]
 80132c2:	4619      	mov	r1, r3
 80132c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132c6:	f7ff fd81 	bl	8012dcc <ip_reass_remove_oldest_datagram>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	f000 812d 	beq.w	801352c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80132d2:	4b97      	ldr	r3, [pc, #604]	; (8013530 <ip4_reass+0x2fc>)
 80132d4:	881b      	ldrh	r3, [r3, #0]
 80132d6:	461a      	mov	r2, r3
 80132d8:	8c3b      	ldrh	r3, [r7, #32]
 80132da:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80132dc:	2b0a      	cmp	r3, #10
 80132de:	f300 8125 	bgt.w	801352c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80132e2:	4b94      	ldr	r3, [pc, #592]	; (8013534 <ip4_reass+0x300>)
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	633b      	str	r3, [r7, #48]	; 0x30
 80132e8:	e015      	b.n	8013316 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80132ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ec:	695a      	ldr	r2, [r3, #20]
 80132ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f0:	68db      	ldr	r3, [r3, #12]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d10c      	bne.n	8013310 <ip4_reass+0xdc>
 80132f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f8:	699a      	ldr	r2, [r3, #24]
 80132fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132fc:	691b      	ldr	r3, [r3, #16]
 80132fe:	429a      	cmp	r2, r3
 8013300:	d106      	bne.n	8013310 <ip4_reass+0xdc>
 8013302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013304:	899a      	ldrh	r2, [r3, #12]
 8013306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013308:	889b      	ldrh	r3, [r3, #4]
 801330a:	b29b      	uxth	r3, r3
 801330c:	429a      	cmp	r2, r3
 801330e:	d006      	beq.n	801331e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	633b      	str	r3, [r7, #48]	; 0x30
 8013316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013318:	2b00      	cmp	r3, #0
 801331a:	d1e6      	bne.n	80132ea <ip4_reass+0xb6>
 801331c:	e000      	b.n	8013320 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801331e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013322:	2b00      	cmp	r3, #0
 8013324:	d109      	bne.n	801333a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013326:	8c3b      	ldrh	r3, [r7, #32]
 8013328:	4619      	mov	r1, r3
 801332a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801332c:	f7ff fdb0 	bl	8012e90 <ip_reass_enqueue_new_datagram>
 8013330:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013334:	2b00      	cmp	r3, #0
 8013336:	d11c      	bne.n	8013372 <ip4_reass+0x13e>
      goto nullreturn;
 8013338:	e109      	b.n	801354e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801333c:	88db      	ldrh	r3, [r3, #6]
 801333e:	b29b      	uxth	r3, r3
 8013340:	4618      	mov	r0, r3
 8013342:	f7f6 fcb7 	bl	8009cb4 <lwip_htons>
 8013346:	4603      	mov	r3, r0
 8013348:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801334c:	2b00      	cmp	r3, #0
 801334e:	d110      	bne.n	8013372 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013352:	89db      	ldrh	r3, [r3, #14]
 8013354:	4618      	mov	r0, r3
 8013356:	f7f6 fcad 	bl	8009cb4 <lwip_htons>
 801335a:	4603      	mov	r3, r0
 801335c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013360:	2b00      	cmp	r3, #0
 8013362:	d006      	beq.n	8013372 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013366:	3308      	adds	r3, #8
 8013368:	2214      	movs	r2, #20
 801336a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801336c:	4618      	mov	r0, r3
 801336e:	f000 fb9d 	bl	8013aac <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013374:	88db      	ldrh	r3, [r3, #6]
 8013376:	b29b      	uxth	r3, r3
 8013378:	f003 0320 	and.w	r3, r3, #32
 801337c:	2b00      	cmp	r3, #0
 801337e:	bf0c      	ite	eq
 8013380:	2301      	moveq	r3, #1
 8013382:	2300      	movne	r3, #0
 8013384:	b2db      	uxtb	r3, r3
 8013386:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013388:	69fb      	ldr	r3, [r7, #28]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d00e      	beq.n	80133ac <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801338e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013392:	4413      	add	r3, r2
 8013394:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013396:	8b7a      	ldrh	r2, [r7, #26]
 8013398:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801339a:	429a      	cmp	r2, r3
 801339c:	f0c0 80a0 	bcc.w	80134e0 <ip4_reass+0x2ac>
 80133a0:	8b7b      	ldrh	r3, [r7, #26]
 80133a2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80133a6:	4293      	cmp	r3, r2
 80133a8:	f200 809a 	bhi.w	80134e0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80133ac:	69fa      	ldr	r2, [r7, #28]
 80133ae:	6879      	ldr	r1, [r7, #4]
 80133b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80133b2:	f7ff fdd5 	bl	8012f60 <ip_reass_chain_frag_into_datagram_and_validate>
 80133b6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133be:	f000 8091 	beq.w	80134e4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80133c2:	4b5b      	ldr	r3, [pc, #364]	; (8013530 <ip4_reass+0x2fc>)
 80133c4:	881a      	ldrh	r2, [r3, #0]
 80133c6:	8c3b      	ldrh	r3, [r7, #32]
 80133c8:	4413      	add	r3, r2
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	4b58      	ldr	r3, [pc, #352]	; (8013530 <ip4_reass+0x2fc>)
 80133ce:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80133d0:	69fb      	ldr	r3, [r7, #28]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d00d      	beq.n	80133f2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80133d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80133d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133da:	4413      	add	r3, r2
 80133dc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80133de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e0:	8a7a      	ldrh	r2, [r7, #18]
 80133e2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80133e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e6:	7f9b      	ldrb	r3, [r3, #30]
 80133e8:	f043 0301 	orr.w	r3, r3, #1
 80133ec:	b2da      	uxtb	r2, r3
 80133ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80133f2:	697b      	ldr	r3, [r7, #20]
 80133f4:	2b01      	cmp	r3, #1
 80133f6:	d171      	bne.n	80134dc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80133f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133fa:	8b9b      	ldrh	r3, [r3, #28]
 80133fc:	3314      	adds	r3, #20
 80133fe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013402:	685b      	ldr	r3, [r3, #4]
 8013404:	685b      	ldr	r3, [r3, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801340c:	685b      	ldr	r3, [r3, #4]
 801340e:	685b      	ldr	r3, [r3, #4]
 8013410:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013414:	3308      	adds	r3, #8
 8013416:	2214      	movs	r2, #20
 8013418:	4619      	mov	r1, r3
 801341a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801341c:	f000 fb46 	bl	8013aac <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013420:	8a3b      	ldrh	r3, [r7, #16]
 8013422:	4618      	mov	r0, r3
 8013424:	f7f6 fc46 	bl	8009cb4 <lwip_htons>
 8013428:	4603      	mov	r3, r0
 801342a:	461a      	mov	r2, r3
 801342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013432:	2200      	movs	r2, #0
 8013434:	719a      	strb	r2, [r3, #6]
 8013436:	2200      	movs	r2, #0
 8013438:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343c:	2200      	movs	r2, #0
 801343e:	729a      	strb	r2, [r3, #10]
 8013440:	2200      	movs	r2, #0
 8013442:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013446:	685b      	ldr	r3, [r3, #4]
 8013448:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801344a:	e00d      	b.n	8013468 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801344c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801344e:	685b      	ldr	r3, [r3, #4]
 8013450:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013452:	2114      	movs	r1, #20
 8013454:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013456:	f7f7 fe4b 	bl	800b0f0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801345a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801345c:	6878      	ldr	r0, [r7, #4]
 801345e:	f7f7 ff8f 	bl	800b380 <pbuf_cat>
      r = iprh->next_pbuf;
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801346a:	2b00      	cmp	r3, #0
 801346c:	d1ee      	bne.n	801344c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801346e:	4b31      	ldr	r3, [pc, #196]	; (8013534 <ip4_reass+0x300>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013474:	429a      	cmp	r2, r3
 8013476:	d102      	bne.n	801347e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013478:	2300      	movs	r3, #0
 801347a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801347c:	e010      	b.n	80134a0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801347e:	4b2d      	ldr	r3, [pc, #180]	; (8013534 <ip4_reass+0x300>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013484:	e007      	b.n	8013496 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801348c:	429a      	cmp	r2, r3
 801348e:	d006      	beq.n	801349e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013498:	2b00      	cmp	r3, #0
 801349a:	d1f4      	bne.n	8013486 <ip4_reass+0x252>
 801349c:	e000      	b.n	80134a0 <ip4_reass+0x26c>
          break;
 801349e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80134a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80134a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134a4:	f7ff fd2e 	bl	8012f04 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f7f7 ff2f 	bl	800b30c <pbuf_clen>
 80134ae:	4603      	mov	r3, r0
 80134b0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80134b2:	4b1f      	ldr	r3, [pc, #124]	; (8013530 <ip4_reass+0x2fc>)
 80134b4:	881b      	ldrh	r3, [r3, #0]
 80134b6:	8c3a      	ldrh	r2, [r7, #32]
 80134b8:	429a      	cmp	r2, r3
 80134ba:	d906      	bls.n	80134ca <ip4_reass+0x296>
 80134bc:	4b1e      	ldr	r3, [pc, #120]	; (8013538 <ip4_reass+0x304>)
 80134be:	f240 229b 	movw	r2, #667	; 0x29b
 80134c2:	491e      	ldr	r1, [pc, #120]	; (801353c <ip4_reass+0x308>)
 80134c4:	481e      	ldr	r0, [pc, #120]	; (8013540 <ip4_reass+0x30c>)
 80134c6:	f000 fb07 	bl	8013ad8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80134ca:	4b19      	ldr	r3, [pc, #100]	; (8013530 <ip4_reass+0x2fc>)
 80134cc:	881a      	ldrh	r2, [r3, #0]
 80134ce:	8c3b      	ldrh	r3, [r7, #32]
 80134d0:	1ad3      	subs	r3, r2, r3
 80134d2:	b29a      	uxth	r2, r3
 80134d4:	4b16      	ldr	r3, [pc, #88]	; (8013530 <ip4_reass+0x2fc>)
 80134d6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	e03c      	b.n	8013556 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80134dc:	2300      	movs	r3, #0
 80134de:	e03a      	b.n	8013556 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80134e0:	bf00      	nop
 80134e2:	e000      	b.n	80134e6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80134e4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80134e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d106      	bne.n	80134fa <ip4_reass+0x2c6>
 80134ec:	4b12      	ldr	r3, [pc, #72]	; (8013538 <ip4_reass+0x304>)
 80134ee:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80134f2:	4914      	ldr	r1, [pc, #80]	; (8013544 <ip4_reass+0x310>)
 80134f4:	4812      	ldr	r0, [pc, #72]	; (8013540 <ip4_reass+0x30c>)
 80134f6:	f000 faef 	bl	8013ad8 <iprintf>
  if (ipr->p == NULL) {
 80134fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134fc:	685b      	ldr	r3, [r3, #4]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d124      	bne.n	801354c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013502:	4b0c      	ldr	r3, [pc, #48]	; (8013534 <ip4_reass+0x300>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013508:	429a      	cmp	r2, r3
 801350a:	d006      	beq.n	801351a <ip4_reass+0x2e6>
 801350c:	4b0a      	ldr	r3, [pc, #40]	; (8013538 <ip4_reass+0x304>)
 801350e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013512:	490d      	ldr	r1, [pc, #52]	; (8013548 <ip4_reass+0x314>)
 8013514:	480a      	ldr	r0, [pc, #40]	; (8013540 <ip4_reass+0x30c>)
 8013516:	f000 fadf 	bl	8013ad8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801351a:	2100      	movs	r1, #0
 801351c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801351e:	f7ff fcf1 	bl	8012f04 <ip_reass_dequeue_datagram>
 8013522:	e014      	b.n	801354e <ip4_reass+0x31a>
    goto nullreturn;
 8013524:	bf00      	nop
 8013526:	e012      	b.n	801354e <ip4_reass+0x31a>
    goto nullreturn;
 8013528:	bf00      	nop
 801352a:	e010      	b.n	801354e <ip4_reass+0x31a>
      goto nullreturn;
 801352c:	bf00      	nop
 801352e:	e00e      	b.n	801354e <ip4_reass+0x31a>
 8013530:	20000210 	.word	0x20000210
 8013534:	2000020c 	.word	0x2000020c
 8013538:	0801753c 	.word	0x0801753c
 801353c:	080176ac 	.word	0x080176ac
 8013540:	08017584 	.word	0x08017584
 8013544:	080176c8 	.word	0x080176c8
 8013548:	080176d4 	.word	0x080176d4
  }

nullreturn:
 801354c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f7f7 fe54 	bl	800b1fc <pbuf_free>
  return NULL;
 8013554:	2300      	movs	r3, #0
}
 8013556:	4618      	mov	r0, r3
 8013558:	3738      	adds	r7, #56	; 0x38
 801355a:	46bd      	mov	sp, r7
 801355c:	bd80      	pop	{r7, pc}
 801355e:	bf00      	nop

08013560 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013564:	2005      	movs	r0, #5
 8013566:	f7f7 f80b 	bl	800a580 <memp_malloc>
 801356a:	4603      	mov	r3, r0
}
 801356c:	4618      	mov	r0, r3
 801356e:	bd80      	pop	{r7, pc}

08013570 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b082      	sub	sp, #8
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d106      	bne.n	801358c <ip_frag_free_pbuf_custom_ref+0x1c>
 801357e:	4b07      	ldr	r3, [pc, #28]	; (801359c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013580:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013584:	4906      	ldr	r1, [pc, #24]	; (80135a0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013586:	4807      	ldr	r0, [pc, #28]	; (80135a4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013588:	f000 faa6 	bl	8013ad8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801358c:	6879      	ldr	r1, [r7, #4]
 801358e:	2005      	movs	r0, #5
 8013590:	f7f7 f842 	bl	800a618 <memp_free>
}
 8013594:	bf00      	nop
 8013596:	3708      	adds	r7, #8
 8013598:	46bd      	mov	sp, r7
 801359a:	bd80      	pop	{r7, pc}
 801359c:	0801753c 	.word	0x0801753c
 80135a0:	080176f4 	.word	0x080176f4
 80135a4:	08017584 	.word	0x08017584

080135a8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b084      	sub	sp, #16
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d106      	bne.n	80135c8 <ipfrag_free_pbuf_custom+0x20>
 80135ba:	4b11      	ldr	r3, [pc, #68]	; (8013600 <ipfrag_free_pbuf_custom+0x58>)
 80135bc:	f240 22ce 	movw	r2, #718	; 0x2ce
 80135c0:	4910      	ldr	r1, [pc, #64]	; (8013604 <ipfrag_free_pbuf_custom+0x5c>)
 80135c2:	4811      	ldr	r0, [pc, #68]	; (8013608 <ipfrag_free_pbuf_custom+0x60>)
 80135c4:	f000 fa88 	bl	8013ad8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80135c8:	68fa      	ldr	r2, [r7, #12]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	429a      	cmp	r2, r3
 80135ce:	d006      	beq.n	80135de <ipfrag_free_pbuf_custom+0x36>
 80135d0:	4b0b      	ldr	r3, [pc, #44]	; (8013600 <ipfrag_free_pbuf_custom+0x58>)
 80135d2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80135d6:	490d      	ldr	r1, [pc, #52]	; (801360c <ipfrag_free_pbuf_custom+0x64>)
 80135d8:	480b      	ldr	r0, [pc, #44]	; (8013608 <ipfrag_free_pbuf_custom+0x60>)
 80135da:	f000 fa7d 	bl	8013ad8 <iprintf>
  if (pcr->original != NULL) {
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	695b      	ldr	r3, [r3, #20]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d004      	beq.n	80135f0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	695b      	ldr	r3, [r3, #20]
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7f7 fe06 	bl	800b1fc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80135f0:	68f8      	ldr	r0, [r7, #12]
 80135f2:	f7ff ffbd 	bl	8013570 <ip_frag_free_pbuf_custom_ref>
}
 80135f6:	bf00      	nop
 80135f8:	3710      	adds	r7, #16
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	0801753c 	.word	0x0801753c
 8013604:	08017700 	.word	0x08017700
 8013608:	08017584 	.word	0x08017584
 801360c:	0801770c 	.word	0x0801770c

08013610 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b094      	sub	sp, #80	; 0x50
 8013614:	af02      	add	r7, sp, #8
 8013616:	60f8      	str	r0, [r7, #12]
 8013618:	60b9      	str	r1, [r7, #8]
 801361a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801361c:	2300      	movs	r3, #0
 801361e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013626:	3b14      	subs	r3, #20
 8013628:	2b00      	cmp	r3, #0
 801362a:	da00      	bge.n	801362e <ip4_frag+0x1e>
 801362c:	3307      	adds	r3, #7
 801362e:	10db      	asrs	r3, r3, #3
 8013630:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013632:	2314      	movs	r3, #20
 8013634:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	685b      	ldr	r3, [r3, #4]
 801363a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801363e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	f003 030f 	and.w	r3, r3, #15
 8013648:	b2db      	uxtb	r3, r3
 801364a:	009b      	lsls	r3, r3, #2
 801364c:	b2db      	uxtb	r3, r3
 801364e:	2b14      	cmp	r3, #20
 8013650:	d002      	beq.n	8013658 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013652:	f06f 0305 	mvn.w	r3, #5
 8013656:	e110      	b.n	801387a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	895b      	ldrh	r3, [r3, #10]
 801365c:	2b13      	cmp	r3, #19
 801365e:	d809      	bhi.n	8013674 <ip4_frag+0x64>
 8013660:	4b88      	ldr	r3, [pc, #544]	; (8013884 <ip4_frag+0x274>)
 8013662:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013666:	4988      	ldr	r1, [pc, #544]	; (8013888 <ip4_frag+0x278>)
 8013668:	4888      	ldr	r0, [pc, #544]	; (801388c <ip4_frag+0x27c>)
 801366a:	f000 fa35 	bl	8013ad8 <iprintf>
 801366e:	f06f 0305 	mvn.w	r3, #5
 8013672:	e102      	b.n	801387a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013676:	88db      	ldrh	r3, [r3, #6]
 8013678:	b29b      	uxth	r3, r3
 801367a:	4618      	mov	r0, r3
 801367c:	f7f6 fb1a 	bl	8009cb4 <lwip_htons>
 8013680:	4603      	mov	r3, r0
 8013682:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013684:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013686:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801368a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801368e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013694:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	891b      	ldrh	r3, [r3, #8]
 801369a:	3b14      	subs	r3, #20
 801369c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80136a0:	e0e1      	b.n	8013866 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80136a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80136a4:	00db      	lsls	r3, r3, #3
 80136a6:	b29b      	uxth	r3, r3
 80136a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136ac:	4293      	cmp	r3, r2
 80136ae:	bf28      	it	cs
 80136b0:	4613      	movcs	r3, r2
 80136b2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80136b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80136b8:	2114      	movs	r1, #20
 80136ba:	200e      	movs	r0, #14
 80136bc:	f7f7 faba 	bl	800ac34 <pbuf_alloc>
 80136c0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80136c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	f000 80d5 	beq.w	8013874 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80136ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136cc:	895b      	ldrh	r3, [r3, #10]
 80136ce:	2b13      	cmp	r3, #19
 80136d0:	d806      	bhi.n	80136e0 <ip4_frag+0xd0>
 80136d2:	4b6c      	ldr	r3, [pc, #432]	; (8013884 <ip4_frag+0x274>)
 80136d4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80136d8:	496d      	ldr	r1, [pc, #436]	; (8013890 <ip4_frag+0x280>)
 80136da:	486c      	ldr	r0, [pc, #432]	; (801388c <ip4_frag+0x27c>)
 80136dc:	f000 f9fc 	bl	8013ad8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80136e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e2:	685b      	ldr	r3, [r3, #4]
 80136e4:	2214      	movs	r2, #20
 80136e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80136e8:	4618      	mov	r0, r3
 80136ea:	f000 f9df 	bl	8013aac <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80136ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f0:	685b      	ldr	r3, [r3, #4]
 80136f2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80136f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80136f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80136fa:	e064      	b.n	80137c6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	895a      	ldrh	r2, [r3, #10]
 8013700:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013702:	1ad3      	subs	r3, r2, r3
 8013704:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	895b      	ldrh	r3, [r3, #10]
 801370a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801370c:	429a      	cmp	r2, r3
 801370e:	d906      	bls.n	801371e <ip4_frag+0x10e>
 8013710:	4b5c      	ldr	r3, [pc, #368]	; (8013884 <ip4_frag+0x274>)
 8013712:	f240 322d 	movw	r2, #813	; 0x32d
 8013716:	495f      	ldr	r1, [pc, #380]	; (8013894 <ip4_frag+0x284>)
 8013718:	485c      	ldr	r0, [pc, #368]	; (801388c <ip4_frag+0x27c>)
 801371a:	f000 f9dd 	bl	8013ad8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801371e:	8bfa      	ldrh	r2, [r7, #30]
 8013720:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013724:	4293      	cmp	r3, r2
 8013726:	bf28      	it	cs
 8013728:	4613      	movcs	r3, r2
 801372a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801372e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013732:	2b00      	cmp	r3, #0
 8013734:	d105      	bne.n	8013742 <ip4_frag+0x132>
        poff = 0;
 8013736:	2300      	movs	r3, #0
 8013738:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	60fb      	str	r3, [r7, #12]
        continue;
 8013740:	e041      	b.n	80137c6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013742:	f7ff ff0d 	bl	8013560 <ip_frag_alloc_pbuf_custom_ref>
 8013746:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013748:	69bb      	ldr	r3, [r7, #24]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d103      	bne.n	8013756 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801374e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013750:	f7f7 fd54 	bl	800b1fc <pbuf_free>
        goto memerr;
 8013754:	e08f      	b.n	8013876 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013756:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801375c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801375e:	4413      	add	r3, r2
 8013760:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013764:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013768:	9201      	str	r2, [sp, #4]
 801376a:	9300      	str	r3, [sp, #0]
 801376c:	4603      	mov	r3, r0
 801376e:	2241      	movs	r2, #65	; 0x41
 8013770:	2000      	movs	r0, #0
 8013772:	f7f7 fb89 	bl	800ae88 <pbuf_alloced_custom>
 8013776:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d106      	bne.n	801378c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801377e:	69b8      	ldr	r0, [r7, #24]
 8013780:	f7ff fef6 	bl	8013570 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013786:	f7f7 fd39 	bl	800b1fc <pbuf_free>
        goto memerr;
 801378a:	e074      	b.n	8013876 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801378c:	68f8      	ldr	r0, [r7, #12]
 801378e:	f7f7 fdd5 	bl	800b33c <pbuf_ref>
      pcr->original = p;
 8013792:	69bb      	ldr	r3, [r7, #24]
 8013794:	68fa      	ldr	r2, [r7, #12]
 8013796:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013798:	69bb      	ldr	r3, [r7, #24]
 801379a:	4a3f      	ldr	r2, [pc, #252]	; (8013898 <ip4_frag+0x288>)
 801379c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801379e:	6979      	ldr	r1, [r7, #20]
 80137a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137a2:	f7f7 fded 	bl	800b380 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80137a6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80137aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80137ae:	1ad3      	subs	r3, r2, r3
 80137b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80137b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d004      	beq.n	80137c6 <ip4_frag+0x1b6>
        poff = 0;
 80137bc:	2300      	movs	r3, #0
 80137be:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80137c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d196      	bne.n	80136fc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80137ce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80137d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80137d4:	4413      	add	r3, r2
 80137d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80137dc:	f1a3 0213 	sub.w	r2, r3, #19
 80137e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137e4:	429a      	cmp	r2, r3
 80137e6:	bfcc      	ite	gt
 80137e8:	2301      	movgt	r3, #1
 80137ea:	2300      	movle	r3, #0
 80137ec:	b2db      	uxtb	r3, r3
 80137ee:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80137f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80137f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80137f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80137fa:	6a3b      	ldr	r3, [r7, #32]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d002      	beq.n	8013806 <ip4_frag+0x1f6>
 8013800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013802:	2b00      	cmp	r3, #0
 8013804:	d003      	beq.n	801380e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013806:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013808:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801380c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801380e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013810:	4618      	mov	r0, r3
 8013812:	f7f6 fa4f 	bl	8009cb4 <lwip_htons>
 8013816:	4603      	mov	r3, r0
 8013818:	461a      	mov	r2, r3
 801381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801381c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801381e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013820:	3314      	adds	r3, #20
 8013822:	b29b      	uxth	r3, r3
 8013824:	4618      	mov	r0, r3
 8013826:	f7f6 fa45 	bl	8009cb4 <lwip_htons>
 801382a:	4603      	mov	r3, r0
 801382c:	461a      	mov	r2, r3
 801382e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013830:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013834:	2200      	movs	r2, #0
 8013836:	729a      	strb	r2, [r3, #10]
 8013838:	2200      	movs	r2, #0
 801383a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	695b      	ldr	r3, [r3, #20]
 8013840:	687a      	ldr	r2, [r7, #4]
 8013842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013844:	68b8      	ldr	r0, [r7, #8]
 8013846:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801384a:	f7f7 fcd7 	bl	800b1fc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801384e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013852:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013854:	1ad3      	subs	r3, r2, r3
 8013856:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801385a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801385e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013860:	4413      	add	r3, r2
 8013862:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013866:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801386a:	2b00      	cmp	r3, #0
 801386c:	f47f af19 	bne.w	80136a2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013870:	2300      	movs	r3, #0
 8013872:	e002      	b.n	801387a <ip4_frag+0x26a>
      goto memerr;
 8013874:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013876:	f04f 33ff 	mov.w	r3, #4294967295
}
 801387a:	4618      	mov	r0, r3
 801387c:	3748      	adds	r7, #72	; 0x48
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}
 8013882:	bf00      	nop
 8013884:	0801753c 	.word	0x0801753c
 8013888:	08017718 	.word	0x08017718
 801388c:	08017584 	.word	0x08017584
 8013890:	08017734 	.word	0x08017734
 8013894:	08017754 	.word	0x08017754
 8013898:	080135a9 	.word	0x080135a9

0801389c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b086      	sub	sp, #24
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
 80138a4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80138a6:	230e      	movs	r3, #14
 80138a8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	895b      	ldrh	r3, [r3, #10]
 80138ae:	2b0e      	cmp	r3, #14
 80138b0:	d96e      	bls.n	8013990 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	7bdb      	ldrb	r3, [r3, #15]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d106      	bne.n	80138c8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80138c0:	3301      	adds	r3, #1
 80138c2:	b2da      	uxtb	r2, r3
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	7b1a      	ldrb	r2, [r3, #12]
 80138d2:	7b5b      	ldrb	r3, [r3, #13]
 80138d4:	021b      	lsls	r3, r3, #8
 80138d6:	4313      	orrs	r3, r2
 80138d8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	781b      	ldrb	r3, [r3, #0]
 80138de:	f003 0301 	and.w	r3, r3, #1
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d023      	beq.n	801392e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80138e6:	693b      	ldr	r3, [r7, #16]
 80138e8:	781b      	ldrb	r3, [r3, #0]
 80138ea:	2b01      	cmp	r3, #1
 80138ec:	d10f      	bne.n	801390e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80138ee:	693b      	ldr	r3, [r7, #16]
 80138f0:	785b      	ldrb	r3, [r3, #1]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d11b      	bne.n	801392e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80138f6:	693b      	ldr	r3, [r7, #16]
 80138f8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80138fa:	2b5e      	cmp	r3, #94	; 0x5e
 80138fc:	d117      	bne.n	801392e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	7b5b      	ldrb	r3, [r3, #13]
 8013902:	f043 0310 	orr.w	r3, r3, #16
 8013906:	b2da      	uxtb	r2, r3
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	735a      	strb	r2, [r3, #13]
 801390c:	e00f      	b.n	801392e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801390e:	693b      	ldr	r3, [r7, #16]
 8013910:	2206      	movs	r2, #6
 8013912:	4928      	ldr	r1, [pc, #160]	; (80139b4 <ethernet_input+0x118>)
 8013914:	4618      	mov	r0, r3
 8013916:	f000 f8bb 	bl	8013a90 <memcmp>
 801391a:	4603      	mov	r3, r0
 801391c:	2b00      	cmp	r3, #0
 801391e:	d106      	bne.n	801392e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	7b5b      	ldrb	r3, [r3, #13]
 8013924:	f043 0308 	orr.w	r3, r3, #8
 8013928:	b2da      	uxtb	r2, r3
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801392e:	89fb      	ldrh	r3, [r7, #14]
 8013930:	2b08      	cmp	r3, #8
 8013932:	d003      	beq.n	801393c <ethernet_input+0xa0>
 8013934:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013938:	d014      	beq.n	8013964 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801393a:	e032      	b.n	80139a2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013942:	f003 0308 	and.w	r3, r3, #8
 8013946:	2b00      	cmp	r3, #0
 8013948:	d024      	beq.n	8013994 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801394a:	8afb      	ldrh	r3, [r7, #22]
 801394c:	4619      	mov	r1, r3
 801394e:	6878      	ldr	r0, [r7, #4]
 8013950:	f7f7 fbce 	bl	800b0f0 <pbuf_remove_header>
 8013954:	4603      	mov	r3, r0
 8013956:	2b00      	cmp	r3, #0
 8013958:	d11e      	bne.n	8013998 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801395a:	6839      	ldr	r1, [r7, #0]
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f7fe ff27 	bl	80127b0 <ip4_input>
      break;
 8013962:	e013      	b.n	801398c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013964:	683b      	ldr	r3, [r7, #0]
 8013966:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801396a:	f003 0308 	and.w	r3, r3, #8
 801396e:	2b00      	cmp	r3, #0
 8013970:	d014      	beq.n	801399c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013972:	8afb      	ldrh	r3, [r7, #22]
 8013974:	4619      	mov	r1, r3
 8013976:	6878      	ldr	r0, [r7, #4]
 8013978:	f7f7 fbba 	bl	800b0f0 <pbuf_remove_header>
 801397c:	4603      	mov	r3, r0
 801397e:	2b00      	cmp	r3, #0
 8013980:	d10e      	bne.n	80139a0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013982:	6839      	ldr	r1, [r7, #0]
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	f7fe f8c7 	bl	8011b18 <etharp_input>
      break;
 801398a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801398c:	2300      	movs	r3, #0
 801398e:	e00c      	b.n	80139aa <ethernet_input+0x10e>
    goto free_and_return;
 8013990:	bf00      	nop
 8013992:	e006      	b.n	80139a2 <ethernet_input+0x106>
        goto free_and_return;
 8013994:	bf00      	nop
 8013996:	e004      	b.n	80139a2 <ethernet_input+0x106>
        goto free_and_return;
 8013998:	bf00      	nop
 801399a:	e002      	b.n	80139a2 <ethernet_input+0x106>
        goto free_and_return;
 801399c:	bf00      	nop
 801399e:	e000      	b.n	80139a2 <ethernet_input+0x106>
        goto free_and_return;
 80139a0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f7f7 fc2a 	bl	800b1fc <pbuf_free>
  return ERR_OK;
 80139a8:	2300      	movs	r3, #0
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	3718      	adds	r7, #24
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}
 80139b2:	bf00      	nop
 80139b4:	080178ec 	.word	0x080178ec

080139b8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b086      	sub	sp, #24
 80139bc:	af00      	add	r7, sp, #0
 80139be:	60f8      	str	r0, [r7, #12]
 80139c0:	60b9      	str	r1, [r7, #8]
 80139c2:	607a      	str	r2, [r7, #4]
 80139c4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80139c6:	8c3b      	ldrh	r3, [r7, #32]
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7f6 f973 	bl	8009cb4 <lwip_htons>
 80139ce:	4603      	mov	r3, r0
 80139d0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80139d2:	210e      	movs	r1, #14
 80139d4:	68b8      	ldr	r0, [r7, #8]
 80139d6:	f7f7 fb7b 	bl	800b0d0 <pbuf_add_header>
 80139da:	4603      	mov	r3, r0
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d125      	bne.n	8013a2c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	685b      	ldr	r3, [r3, #4]
 80139e4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	8afa      	ldrh	r2, [r7, #22]
 80139ea:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	2206      	movs	r2, #6
 80139f0:	6839      	ldr	r1, [r7, #0]
 80139f2:	4618      	mov	r0, r3
 80139f4:	f000 f85a 	bl	8013aac <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	3306      	adds	r3, #6
 80139fc:	2206      	movs	r2, #6
 80139fe:	6879      	ldr	r1, [r7, #4]
 8013a00:	4618      	mov	r0, r3
 8013a02:	f000 f853 	bl	8013aac <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013a0c:	2b06      	cmp	r3, #6
 8013a0e:	d006      	beq.n	8013a1e <ethernet_output+0x66>
 8013a10:	4b0a      	ldr	r3, [pc, #40]	; (8013a3c <ethernet_output+0x84>)
 8013a12:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013a16:	490a      	ldr	r1, [pc, #40]	; (8013a40 <ethernet_output+0x88>)
 8013a18:	480a      	ldr	r0, [pc, #40]	; (8013a44 <ethernet_output+0x8c>)
 8013a1a:	f000 f85d 	bl	8013ad8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	699b      	ldr	r3, [r3, #24]
 8013a22:	68b9      	ldr	r1, [r7, #8]
 8013a24:	68f8      	ldr	r0, [r7, #12]
 8013a26:	4798      	blx	r3
 8013a28:	4603      	mov	r3, r0
 8013a2a:	e002      	b.n	8013a32 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013a2c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013a2e:	f06f 0301 	mvn.w	r3, #1
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	3718      	adds	r7, #24
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}
 8013a3a:	bf00      	nop
 8013a3c:	08017764 	.word	0x08017764
 8013a40:	0801779c 	.word	0x0801779c
 8013a44:	080177d0 	.word	0x080177d0

08013a48 <__libc_init_array>:
 8013a48:	b570      	push	{r4, r5, r6, lr}
 8013a4a:	4d0d      	ldr	r5, [pc, #52]	; (8013a80 <__libc_init_array+0x38>)
 8013a4c:	4c0d      	ldr	r4, [pc, #52]	; (8013a84 <__libc_init_array+0x3c>)
 8013a4e:	1b64      	subs	r4, r4, r5
 8013a50:	10a4      	asrs	r4, r4, #2
 8013a52:	2600      	movs	r6, #0
 8013a54:	42a6      	cmp	r6, r4
 8013a56:	d109      	bne.n	8013a6c <__libc_init_array+0x24>
 8013a58:	4d0b      	ldr	r5, [pc, #44]	; (8013a88 <__libc_init_array+0x40>)
 8013a5a:	4c0c      	ldr	r4, [pc, #48]	; (8013a8c <__libc_init_array+0x44>)
 8013a5c:	f001 f8cc 	bl	8014bf8 <_init>
 8013a60:	1b64      	subs	r4, r4, r5
 8013a62:	10a4      	asrs	r4, r4, #2
 8013a64:	2600      	movs	r6, #0
 8013a66:	42a6      	cmp	r6, r4
 8013a68:	d105      	bne.n	8013a76 <__libc_init_array+0x2e>
 8013a6a:	bd70      	pop	{r4, r5, r6, pc}
 8013a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a70:	4798      	blx	r3
 8013a72:	3601      	adds	r6, #1
 8013a74:	e7ee      	b.n	8013a54 <__libc_init_array+0xc>
 8013a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a7a:	4798      	blx	r3
 8013a7c:	3601      	adds	r6, #1
 8013a7e:	e7f2      	b.n	8013a66 <__libc_init_array+0x1e>
 8013a80:	08017a50 	.word	0x08017a50
 8013a84:	08017a50 	.word	0x08017a50
 8013a88:	08017a50 	.word	0x08017a50
 8013a8c:	08017a54 	.word	0x08017a54

08013a90 <memcmp>:
 8013a90:	b530      	push	{r4, r5, lr}
 8013a92:	3901      	subs	r1, #1
 8013a94:	2400      	movs	r4, #0
 8013a96:	42a2      	cmp	r2, r4
 8013a98:	d101      	bne.n	8013a9e <memcmp+0xe>
 8013a9a:	2000      	movs	r0, #0
 8013a9c:	e005      	b.n	8013aaa <memcmp+0x1a>
 8013a9e:	5d03      	ldrb	r3, [r0, r4]
 8013aa0:	3401      	adds	r4, #1
 8013aa2:	5d0d      	ldrb	r5, [r1, r4]
 8013aa4:	42ab      	cmp	r3, r5
 8013aa6:	d0f6      	beq.n	8013a96 <memcmp+0x6>
 8013aa8:	1b58      	subs	r0, r3, r5
 8013aaa:	bd30      	pop	{r4, r5, pc}

08013aac <memcpy>:
 8013aac:	440a      	add	r2, r1
 8013aae:	4291      	cmp	r1, r2
 8013ab0:	f100 33ff 	add.w	r3, r0, #4294967295
 8013ab4:	d100      	bne.n	8013ab8 <memcpy+0xc>
 8013ab6:	4770      	bx	lr
 8013ab8:	b510      	push	{r4, lr}
 8013aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013abe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ac2:	4291      	cmp	r1, r2
 8013ac4:	d1f9      	bne.n	8013aba <memcpy+0xe>
 8013ac6:	bd10      	pop	{r4, pc}

08013ac8 <memset>:
 8013ac8:	4402      	add	r2, r0
 8013aca:	4603      	mov	r3, r0
 8013acc:	4293      	cmp	r3, r2
 8013ace:	d100      	bne.n	8013ad2 <memset+0xa>
 8013ad0:	4770      	bx	lr
 8013ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8013ad6:	e7f9      	b.n	8013acc <memset+0x4>

08013ad8 <iprintf>:
 8013ad8:	b40f      	push	{r0, r1, r2, r3}
 8013ada:	4b0a      	ldr	r3, [pc, #40]	; (8013b04 <iprintf+0x2c>)
 8013adc:	b513      	push	{r0, r1, r4, lr}
 8013ade:	681c      	ldr	r4, [r3, #0]
 8013ae0:	b124      	cbz	r4, 8013aec <iprintf+0x14>
 8013ae2:	69a3      	ldr	r3, [r4, #24]
 8013ae4:	b913      	cbnz	r3, 8013aec <iprintf+0x14>
 8013ae6:	4620      	mov	r0, r4
 8013ae8:	f000 fabc 	bl	8014064 <__sinit>
 8013aec:	ab05      	add	r3, sp, #20
 8013aee:	9a04      	ldr	r2, [sp, #16]
 8013af0:	68a1      	ldr	r1, [r4, #8]
 8013af2:	9301      	str	r3, [sp, #4]
 8013af4:	4620      	mov	r0, r4
 8013af6:	f000 fca7 	bl	8014448 <_vfiprintf_r>
 8013afa:	b002      	add	sp, #8
 8013afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b00:	b004      	add	sp, #16
 8013b02:	4770      	bx	lr
 8013b04:	20000018 	.word	0x20000018

08013b08 <_puts_r>:
 8013b08:	b570      	push	{r4, r5, r6, lr}
 8013b0a:	460e      	mov	r6, r1
 8013b0c:	4605      	mov	r5, r0
 8013b0e:	b118      	cbz	r0, 8013b18 <_puts_r+0x10>
 8013b10:	6983      	ldr	r3, [r0, #24]
 8013b12:	b90b      	cbnz	r3, 8013b18 <_puts_r+0x10>
 8013b14:	f000 faa6 	bl	8014064 <__sinit>
 8013b18:	69ab      	ldr	r3, [r5, #24]
 8013b1a:	68ac      	ldr	r4, [r5, #8]
 8013b1c:	b913      	cbnz	r3, 8013b24 <_puts_r+0x1c>
 8013b1e:	4628      	mov	r0, r5
 8013b20:	f000 faa0 	bl	8014064 <__sinit>
 8013b24:	4b2c      	ldr	r3, [pc, #176]	; (8013bd8 <_puts_r+0xd0>)
 8013b26:	429c      	cmp	r4, r3
 8013b28:	d120      	bne.n	8013b6c <_puts_r+0x64>
 8013b2a:	686c      	ldr	r4, [r5, #4]
 8013b2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b2e:	07db      	lsls	r3, r3, #31
 8013b30:	d405      	bmi.n	8013b3e <_puts_r+0x36>
 8013b32:	89a3      	ldrh	r3, [r4, #12]
 8013b34:	0598      	lsls	r0, r3, #22
 8013b36:	d402      	bmi.n	8013b3e <_puts_r+0x36>
 8013b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b3a:	f000 fb43 	bl	80141c4 <__retarget_lock_acquire_recursive>
 8013b3e:	89a3      	ldrh	r3, [r4, #12]
 8013b40:	0719      	lsls	r1, r3, #28
 8013b42:	d51d      	bpl.n	8013b80 <_puts_r+0x78>
 8013b44:	6923      	ldr	r3, [r4, #16]
 8013b46:	b1db      	cbz	r3, 8013b80 <_puts_r+0x78>
 8013b48:	3e01      	subs	r6, #1
 8013b4a:	68a3      	ldr	r3, [r4, #8]
 8013b4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013b50:	3b01      	subs	r3, #1
 8013b52:	60a3      	str	r3, [r4, #8]
 8013b54:	bb39      	cbnz	r1, 8013ba6 <_puts_r+0x9e>
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	da38      	bge.n	8013bcc <_puts_r+0xc4>
 8013b5a:	4622      	mov	r2, r4
 8013b5c:	210a      	movs	r1, #10
 8013b5e:	4628      	mov	r0, r5
 8013b60:	f000 f888 	bl	8013c74 <__swbuf_r>
 8013b64:	3001      	adds	r0, #1
 8013b66:	d011      	beq.n	8013b8c <_puts_r+0x84>
 8013b68:	250a      	movs	r5, #10
 8013b6a:	e011      	b.n	8013b90 <_puts_r+0x88>
 8013b6c:	4b1b      	ldr	r3, [pc, #108]	; (8013bdc <_puts_r+0xd4>)
 8013b6e:	429c      	cmp	r4, r3
 8013b70:	d101      	bne.n	8013b76 <_puts_r+0x6e>
 8013b72:	68ac      	ldr	r4, [r5, #8]
 8013b74:	e7da      	b.n	8013b2c <_puts_r+0x24>
 8013b76:	4b1a      	ldr	r3, [pc, #104]	; (8013be0 <_puts_r+0xd8>)
 8013b78:	429c      	cmp	r4, r3
 8013b7a:	bf08      	it	eq
 8013b7c:	68ec      	ldreq	r4, [r5, #12]
 8013b7e:	e7d5      	b.n	8013b2c <_puts_r+0x24>
 8013b80:	4621      	mov	r1, r4
 8013b82:	4628      	mov	r0, r5
 8013b84:	f000 f8c8 	bl	8013d18 <__swsetup_r>
 8013b88:	2800      	cmp	r0, #0
 8013b8a:	d0dd      	beq.n	8013b48 <_puts_r+0x40>
 8013b8c:	f04f 35ff 	mov.w	r5, #4294967295
 8013b90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b92:	07da      	lsls	r2, r3, #31
 8013b94:	d405      	bmi.n	8013ba2 <_puts_r+0x9a>
 8013b96:	89a3      	ldrh	r3, [r4, #12]
 8013b98:	059b      	lsls	r3, r3, #22
 8013b9a:	d402      	bmi.n	8013ba2 <_puts_r+0x9a>
 8013b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b9e:	f000 fb12 	bl	80141c6 <__retarget_lock_release_recursive>
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	bd70      	pop	{r4, r5, r6, pc}
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	da04      	bge.n	8013bb4 <_puts_r+0xac>
 8013baa:	69a2      	ldr	r2, [r4, #24]
 8013bac:	429a      	cmp	r2, r3
 8013bae:	dc06      	bgt.n	8013bbe <_puts_r+0xb6>
 8013bb0:	290a      	cmp	r1, #10
 8013bb2:	d004      	beq.n	8013bbe <_puts_r+0xb6>
 8013bb4:	6823      	ldr	r3, [r4, #0]
 8013bb6:	1c5a      	adds	r2, r3, #1
 8013bb8:	6022      	str	r2, [r4, #0]
 8013bba:	7019      	strb	r1, [r3, #0]
 8013bbc:	e7c5      	b.n	8013b4a <_puts_r+0x42>
 8013bbe:	4622      	mov	r2, r4
 8013bc0:	4628      	mov	r0, r5
 8013bc2:	f000 f857 	bl	8013c74 <__swbuf_r>
 8013bc6:	3001      	adds	r0, #1
 8013bc8:	d1bf      	bne.n	8013b4a <_puts_r+0x42>
 8013bca:	e7df      	b.n	8013b8c <_puts_r+0x84>
 8013bcc:	6823      	ldr	r3, [r4, #0]
 8013bce:	250a      	movs	r5, #10
 8013bd0:	1c5a      	adds	r2, r3, #1
 8013bd2:	6022      	str	r2, [r4, #0]
 8013bd4:	701d      	strb	r5, [r3, #0]
 8013bd6:	e7db      	b.n	8013b90 <_puts_r+0x88>
 8013bd8:	080179d4 	.word	0x080179d4
 8013bdc:	080179f4 	.word	0x080179f4
 8013be0:	080179b4 	.word	0x080179b4

08013be4 <puts>:
 8013be4:	4b02      	ldr	r3, [pc, #8]	; (8013bf0 <puts+0xc>)
 8013be6:	4601      	mov	r1, r0
 8013be8:	6818      	ldr	r0, [r3, #0]
 8013bea:	f7ff bf8d 	b.w	8013b08 <_puts_r>
 8013bee:	bf00      	nop
 8013bf0:	20000018 	.word	0x20000018

08013bf4 <rand>:
 8013bf4:	4b17      	ldr	r3, [pc, #92]	; (8013c54 <rand+0x60>)
 8013bf6:	b510      	push	{r4, lr}
 8013bf8:	681c      	ldr	r4, [r3, #0]
 8013bfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013bfc:	b9b3      	cbnz	r3, 8013c2c <rand+0x38>
 8013bfe:	2018      	movs	r0, #24
 8013c00:	f000 fb46 	bl	8014290 <malloc>
 8013c04:	63a0      	str	r0, [r4, #56]	; 0x38
 8013c06:	b928      	cbnz	r0, 8013c14 <rand+0x20>
 8013c08:	4602      	mov	r2, r0
 8013c0a:	4b13      	ldr	r3, [pc, #76]	; (8013c58 <rand+0x64>)
 8013c0c:	4813      	ldr	r0, [pc, #76]	; (8013c5c <rand+0x68>)
 8013c0e:	214e      	movs	r1, #78	; 0x4e
 8013c10:	f000 f8f0 	bl	8013df4 <__assert_func>
 8013c14:	4a12      	ldr	r2, [pc, #72]	; (8013c60 <rand+0x6c>)
 8013c16:	4b13      	ldr	r3, [pc, #76]	; (8013c64 <rand+0x70>)
 8013c18:	e9c0 2300 	strd	r2, r3, [r0]
 8013c1c:	4b12      	ldr	r3, [pc, #72]	; (8013c68 <rand+0x74>)
 8013c1e:	6083      	str	r3, [r0, #8]
 8013c20:	230b      	movs	r3, #11
 8013c22:	8183      	strh	r3, [r0, #12]
 8013c24:	2201      	movs	r2, #1
 8013c26:	2300      	movs	r3, #0
 8013c28:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013c2c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013c2e:	480f      	ldr	r0, [pc, #60]	; (8013c6c <rand+0x78>)
 8013c30:	690a      	ldr	r2, [r1, #16]
 8013c32:	694b      	ldr	r3, [r1, #20]
 8013c34:	4c0e      	ldr	r4, [pc, #56]	; (8013c70 <rand+0x7c>)
 8013c36:	4350      	muls	r0, r2
 8013c38:	fb04 0003 	mla	r0, r4, r3, r0
 8013c3c:	fba2 3404 	umull	r3, r4, r2, r4
 8013c40:	1c5a      	adds	r2, r3, #1
 8013c42:	4404      	add	r4, r0
 8013c44:	f144 0000 	adc.w	r0, r4, #0
 8013c48:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8013c4c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013c50:	bd10      	pop	{r4, pc}
 8013c52:	bf00      	nop
 8013c54:	20000018 	.word	0x20000018
 8013c58:	08017900 	.word	0x08017900
 8013c5c:	08017917 	.word	0x08017917
 8013c60:	abcd330e 	.word	0xabcd330e
 8013c64:	e66d1234 	.word	0xe66d1234
 8013c68:	0005deec 	.word	0x0005deec
 8013c6c:	5851f42d 	.word	0x5851f42d
 8013c70:	4c957f2d 	.word	0x4c957f2d

08013c74 <__swbuf_r>:
 8013c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c76:	460e      	mov	r6, r1
 8013c78:	4614      	mov	r4, r2
 8013c7a:	4605      	mov	r5, r0
 8013c7c:	b118      	cbz	r0, 8013c86 <__swbuf_r+0x12>
 8013c7e:	6983      	ldr	r3, [r0, #24]
 8013c80:	b90b      	cbnz	r3, 8013c86 <__swbuf_r+0x12>
 8013c82:	f000 f9ef 	bl	8014064 <__sinit>
 8013c86:	4b21      	ldr	r3, [pc, #132]	; (8013d0c <__swbuf_r+0x98>)
 8013c88:	429c      	cmp	r4, r3
 8013c8a:	d12b      	bne.n	8013ce4 <__swbuf_r+0x70>
 8013c8c:	686c      	ldr	r4, [r5, #4]
 8013c8e:	69a3      	ldr	r3, [r4, #24]
 8013c90:	60a3      	str	r3, [r4, #8]
 8013c92:	89a3      	ldrh	r3, [r4, #12]
 8013c94:	071a      	lsls	r2, r3, #28
 8013c96:	d52f      	bpl.n	8013cf8 <__swbuf_r+0x84>
 8013c98:	6923      	ldr	r3, [r4, #16]
 8013c9a:	b36b      	cbz	r3, 8013cf8 <__swbuf_r+0x84>
 8013c9c:	6923      	ldr	r3, [r4, #16]
 8013c9e:	6820      	ldr	r0, [r4, #0]
 8013ca0:	1ac0      	subs	r0, r0, r3
 8013ca2:	6963      	ldr	r3, [r4, #20]
 8013ca4:	b2f6      	uxtb	r6, r6
 8013ca6:	4283      	cmp	r3, r0
 8013ca8:	4637      	mov	r7, r6
 8013caa:	dc04      	bgt.n	8013cb6 <__swbuf_r+0x42>
 8013cac:	4621      	mov	r1, r4
 8013cae:	4628      	mov	r0, r5
 8013cb0:	f000 f944 	bl	8013f3c <_fflush_r>
 8013cb4:	bb30      	cbnz	r0, 8013d04 <__swbuf_r+0x90>
 8013cb6:	68a3      	ldr	r3, [r4, #8]
 8013cb8:	3b01      	subs	r3, #1
 8013cba:	60a3      	str	r3, [r4, #8]
 8013cbc:	6823      	ldr	r3, [r4, #0]
 8013cbe:	1c5a      	adds	r2, r3, #1
 8013cc0:	6022      	str	r2, [r4, #0]
 8013cc2:	701e      	strb	r6, [r3, #0]
 8013cc4:	6963      	ldr	r3, [r4, #20]
 8013cc6:	3001      	adds	r0, #1
 8013cc8:	4283      	cmp	r3, r0
 8013cca:	d004      	beq.n	8013cd6 <__swbuf_r+0x62>
 8013ccc:	89a3      	ldrh	r3, [r4, #12]
 8013cce:	07db      	lsls	r3, r3, #31
 8013cd0:	d506      	bpl.n	8013ce0 <__swbuf_r+0x6c>
 8013cd2:	2e0a      	cmp	r6, #10
 8013cd4:	d104      	bne.n	8013ce0 <__swbuf_r+0x6c>
 8013cd6:	4621      	mov	r1, r4
 8013cd8:	4628      	mov	r0, r5
 8013cda:	f000 f92f 	bl	8013f3c <_fflush_r>
 8013cde:	b988      	cbnz	r0, 8013d04 <__swbuf_r+0x90>
 8013ce0:	4638      	mov	r0, r7
 8013ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ce4:	4b0a      	ldr	r3, [pc, #40]	; (8013d10 <__swbuf_r+0x9c>)
 8013ce6:	429c      	cmp	r4, r3
 8013ce8:	d101      	bne.n	8013cee <__swbuf_r+0x7a>
 8013cea:	68ac      	ldr	r4, [r5, #8]
 8013cec:	e7cf      	b.n	8013c8e <__swbuf_r+0x1a>
 8013cee:	4b09      	ldr	r3, [pc, #36]	; (8013d14 <__swbuf_r+0xa0>)
 8013cf0:	429c      	cmp	r4, r3
 8013cf2:	bf08      	it	eq
 8013cf4:	68ec      	ldreq	r4, [r5, #12]
 8013cf6:	e7ca      	b.n	8013c8e <__swbuf_r+0x1a>
 8013cf8:	4621      	mov	r1, r4
 8013cfa:	4628      	mov	r0, r5
 8013cfc:	f000 f80c 	bl	8013d18 <__swsetup_r>
 8013d00:	2800      	cmp	r0, #0
 8013d02:	d0cb      	beq.n	8013c9c <__swbuf_r+0x28>
 8013d04:	f04f 37ff 	mov.w	r7, #4294967295
 8013d08:	e7ea      	b.n	8013ce0 <__swbuf_r+0x6c>
 8013d0a:	bf00      	nop
 8013d0c:	080179d4 	.word	0x080179d4
 8013d10:	080179f4 	.word	0x080179f4
 8013d14:	080179b4 	.word	0x080179b4

08013d18 <__swsetup_r>:
 8013d18:	4b32      	ldr	r3, [pc, #200]	; (8013de4 <__swsetup_r+0xcc>)
 8013d1a:	b570      	push	{r4, r5, r6, lr}
 8013d1c:	681d      	ldr	r5, [r3, #0]
 8013d1e:	4606      	mov	r6, r0
 8013d20:	460c      	mov	r4, r1
 8013d22:	b125      	cbz	r5, 8013d2e <__swsetup_r+0x16>
 8013d24:	69ab      	ldr	r3, [r5, #24]
 8013d26:	b913      	cbnz	r3, 8013d2e <__swsetup_r+0x16>
 8013d28:	4628      	mov	r0, r5
 8013d2a:	f000 f99b 	bl	8014064 <__sinit>
 8013d2e:	4b2e      	ldr	r3, [pc, #184]	; (8013de8 <__swsetup_r+0xd0>)
 8013d30:	429c      	cmp	r4, r3
 8013d32:	d10f      	bne.n	8013d54 <__swsetup_r+0x3c>
 8013d34:	686c      	ldr	r4, [r5, #4]
 8013d36:	89a3      	ldrh	r3, [r4, #12]
 8013d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013d3c:	0719      	lsls	r1, r3, #28
 8013d3e:	d42c      	bmi.n	8013d9a <__swsetup_r+0x82>
 8013d40:	06dd      	lsls	r5, r3, #27
 8013d42:	d411      	bmi.n	8013d68 <__swsetup_r+0x50>
 8013d44:	2309      	movs	r3, #9
 8013d46:	6033      	str	r3, [r6, #0]
 8013d48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013d4c:	81a3      	strh	r3, [r4, #12]
 8013d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8013d52:	e03e      	b.n	8013dd2 <__swsetup_r+0xba>
 8013d54:	4b25      	ldr	r3, [pc, #148]	; (8013dec <__swsetup_r+0xd4>)
 8013d56:	429c      	cmp	r4, r3
 8013d58:	d101      	bne.n	8013d5e <__swsetup_r+0x46>
 8013d5a:	68ac      	ldr	r4, [r5, #8]
 8013d5c:	e7eb      	b.n	8013d36 <__swsetup_r+0x1e>
 8013d5e:	4b24      	ldr	r3, [pc, #144]	; (8013df0 <__swsetup_r+0xd8>)
 8013d60:	429c      	cmp	r4, r3
 8013d62:	bf08      	it	eq
 8013d64:	68ec      	ldreq	r4, [r5, #12]
 8013d66:	e7e6      	b.n	8013d36 <__swsetup_r+0x1e>
 8013d68:	0758      	lsls	r0, r3, #29
 8013d6a:	d512      	bpl.n	8013d92 <__swsetup_r+0x7a>
 8013d6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d6e:	b141      	cbz	r1, 8013d82 <__swsetup_r+0x6a>
 8013d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d74:	4299      	cmp	r1, r3
 8013d76:	d002      	beq.n	8013d7e <__swsetup_r+0x66>
 8013d78:	4630      	mov	r0, r6
 8013d7a:	f000 fa91 	bl	80142a0 <_free_r>
 8013d7e:	2300      	movs	r3, #0
 8013d80:	6363      	str	r3, [r4, #52]	; 0x34
 8013d82:	89a3      	ldrh	r3, [r4, #12]
 8013d84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013d88:	81a3      	strh	r3, [r4, #12]
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	6063      	str	r3, [r4, #4]
 8013d8e:	6923      	ldr	r3, [r4, #16]
 8013d90:	6023      	str	r3, [r4, #0]
 8013d92:	89a3      	ldrh	r3, [r4, #12]
 8013d94:	f043 0308 	orr.w	r3, r3, #8
 8013d98:	81a3      	strh	r3, [r4, #12]
 8013d9a:	6923      	ldr	r3, [r4, #16]
 8013d9c:	b94b      	cbnz	r3, 8013db2 <__swsetup_r+0x9a>
 8013d9e:	89a3      	ldrh	r3, [r4, #12]
 8013da0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013da8:	d003      	beq.n	8013db2 <__swsetup_r+0x9a>
 8013daa:	4621      	mov	r1, r4
 8013dac:	4630      	mov	r0, r6
 8013dae:	f000 fa2f 	bl	8014210 <__smakebuf_r>
 8013db2:	89a0      	ldrh	r0, [r4, #12]
 8013db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013db8:	f010 0301 	ands.w	r3, r0, #1
 8013dbc:	d00a      	beq.n	8013dd4 <__swsetup_r+0xbc>
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	60a3      	str	r3, [r4, #8]
 8013dc2:	6963      	ldr	r3, [r4, #20]
 8013dc4:	425b      	negs	r3, r3
 8013dc6:	61a3      	str	r3, [r4, #24]
 8013dc8:	6923      	ldr	r3, [r4, #16]
 8013dca:	b943      	cbnz	r3, 8013dde <__swsetup_r+0xc6>
 8013dcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013dd0:	d1ba      	bne.n	8013d48 <__swsetup_r+0x30>
 8013dd2:	bd70      	pop	{r4, r5, r6, pc}
 8013dd4:	0781      	lsls	r1, r0, #30
 8013dd6:	bf58      	it	pl
 8013dd8:	6963      	ldrpl	r3, [r4, #20]
 8013dda:	60a3      	str	r3, [r4, #8]
 8013ddc:	e7f4      	b.n	8013dc8 <__swsetup_r+0xb0>
 8013dde:	2000      	movs	r0, #0
 8013de0:	e7f7      	b.n	8013dd2 <__swsetup_r+0xba>
 8013de2:	bf00      	nop
 8013de4:	20000018 	.word	0x20000018
 8013de8:	080179d4 	.word	0x080179d4
 8013dec:	080179f4 	.word	0x080179f4
 8013df0:	080179b4 	.word	0x080179b4

08013df4 <__assert_func>:
 8013df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013df6:	4614      	mov	r4, r2
 8013df8:	461a      	mov	r2, r3
 8013dfa:	4b09      	ldr	r3, [pc, #36]	; (8013e20 <__assert_func+0x2c>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	4605      	mov	r5, r0
 8013e00:	68d8      	ldr	r0, [r3, #12]
 8013e02:	b14c      	cbz	r4, 8013e18 <__assert_func+0x24>
 8013e04:	4b07      	ldr	r3, [pc, #28]	; (8013e24 <__assert_func+0x30>)
 8013e06:	9100      	str	r1, [sp, #0]
 8013e08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013e0c:	4906      	ldr	r1, [pc, #24]	; (8013e28 <__assert_func+0x34>)
 8013e0e:	462b      	mov	r3, r5
 8013e10:	f000 f9a6 	bl	8014160 <fiprintf>
 8013e14:	f000 fe42 	bl	8014a9c <abort>
 8013e18:	4b04      	ldr	r3, [pc, #16]	; (8013e2c <__assert_func+0x38>)
 8013e1a:	461c      	mov	r4, r3
 8013e1c:	e7f3      	b.n	8013e06 <__assert_func+0x12>
 8013e1e:	bf00      	nop
 8013e20:	20000018 	.word	0x20000018
 8013e24:	08017976 	.word	0x08017976
 8013e28:	08017983 	.word	0x08017983
 8013e2c:	080179b1 	.word	0x080179b1

08013e30 <__sflush_r>:
 8013e30:	898a      	ldrh	r2, [r1, #12]
 8013e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e36:	4605      	mov	r5, r0
 8013e38:	0710      	lsls	r0, r2, #28
 8013e3a:	460c      	mov	r4, r1
 8013e3c:	d458      	bmi.n	8013ef0 <__sflush_r+0xc0>
 8013e3e:	684b      	ldr	r3, [r1, #4]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	dc05      	bgt.n	8013e50 <__sflush_r+0x20>
 8013e44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	dc02      	bgt.n	8013e50 <__sflush_r+0x20>
 8013e4a:	2000      	movs	r0, #0
 8013e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e52:	2e00      	cmp	r6, #0
 8013e54:	d0f9      	beq.n	8013e4a <__sflush_r+0x1a>
 8013e56:	2300      	movs	r3, #0
 8013e58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013e5c:	682f      	ldr	r7, [r5, #0]
 8013e5e:	602b      	str	r3, [r5, #0]
 8013e60:	d032      	beq.n	8013ec8 <__sflush_r+0x98>
 8013e62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013e64:	89a3      	ldrh	r3, [r4, #12]
 8013e66:	075a      	lsls	r2, r3, #29
 8013e68:	d505      	bpl.n	8013e76 <__sflush_r+0x46>
 8013e6a:	6863      	ldr	r3, [r4, #4]
 8013e6c:	1ac0      	subs	r0, r0, r3
 8013e6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013e70:	b10b      	cbz	r3, 8013e76 <__sflush_r+0x46>
 8013e72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013e74:	1ac0      	subs	r0, r0, r3
 8013e76:	2300      	movs	r3, #0
 8013e78:	4602      	mov	r2, r0
 8013e7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013e7c:	6a21      	ldr	r1, [r4, #32]
 8013e7e:	4628      	mov	r0, r5
 8013e80:	47b0      	blx	r6
 8013e82:	1c43      	adds	r3, r0, #1
 8013e84:	89a3      	ldrh	r3, [r4, #12]
 8013e86:	d106      	bne.n	8013e96 <__sflush_r+0x66>
 8013e88:	6829      	ldr	r1, [r5, #0]
 8013e8a:	291d      	cmp	r1, #29
 8013e8c:	d82c      	bhi.n	8013ee8 <__sflush_r+0xb8>
 8013e8e:	4a2a      	ldr	r2, [pc, #168]	; (8013f38 <__sflush_r+0x108>)
 8013e90:	40ca      	lsrs	r2, r1
 8013e92:	07d6      	lsls	r6, r2, #31
 8013e94:	d528      	bpl.n	8013ee8 <__sflush_r+0xb8>
 8013e96:	2200      	movs	r2, #0
 8013e98:	6062      	str	r2, [r4, #4]
 8013e9a:	04d9      	lsls	r1, r3, #19
 8013e9c:	6922      	ldr	r2, [r4, #16]
 8013e9e:	6022      	str	r2, [r4, #0]
 8013ea0:	d504      	bpl.n	8013eac <__sflush_r+0x7c>
 8013ea2:	1c42      	adds	r2, r0, #1
 8013ea4:	d101      	bne.n	8013eaa <__sflush_r+0x7a>
 8013ea6:	682b      	ldr	r3, [r5, #0]
 8013ea8:	b903      	cbnz	r3, 8013eac <__sflush_r+0x7c>
 8013eaa:	6560      	str	r0, [r4, #84]	; 0x54
 8013eac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013eae:	602f      	str	r7, [r5, #0]
 8013eb0:	2900      	cmp	r1, #0
 8013eb2:	d0ca      	beq.n	8013e4a <__sflush_r+0x1a>
 8013eb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013eb8:	4299      	cmp	r1, r3
 8013eba:	d002      	beq.n	8013ec2 <__sflush_r+0x92>
 8013ebc:	4628      	mov	r0, r5
 8013ebe:	f000 f9ef 	bl	80142a0 <_free_r>
 8013ec2:	2000      	movs	r0, #0
 8013ec4:	6360      	str	r0, [r4, #52]	; 0x34
 8013ec6:	e7c1      	b.n	8013e4c <__sflush_r+0x1c>
 8013ec8:	6a21      	ldr	r1, [r4, #32]
 8013eca:	2301      	movs	r3, #1
 8013ecc:	4628      	mov	r0, r5
 8013ece:	47b0      	blx	r6
 8013ed0:	1c41      	adds	r1, r0, #1
 8013ed2:	d1c7      	bne.n	8013e64 <__sflush_r+0x34>
 8013ed4:	682b      	ldr	r3, [r5, #0]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d0c4      	beq.n	8013e64 <__sflush_r+0x34>
 8013eda:	2b1d      	cmp	r3, #29
 8013edc:	d001      	beq.n	8013ee2 <__sflush_r+0xb2>
 8013ede:	2b16      	cmp	r3, #22
 8013ee0:	d101      	bne.n	8013ee6 <__sflush_r+0xb6>
 8013ee2:	602f      	str	r7, [r5, #0]
 8013ee4:	e7b1      	b.n	8013e4a <__sflush_r+0x1a>
 8013ee6:	89a3      	ldrh	r3, [r4, #12]
 8013ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013eec:	81a3      	strh	r3, [r4, #12]
 8013eee:	e7ad      	b.n	8013e4c <__sflush_r+0x1c>
 8013ef0:	690f      	ldr	r7, [r1, #16]
 8013ef2:	2f00      	cmp	r7, #0
 8013ef4:	d0a9      	beq.n	8013e4a <__sflush_r+0x1a>
 8013ef6:	0793      	lsls	r3, r2, #30
 8013ef8:	680e      	ldr	r6, [r1, #0]
 8013efa:	bf08      	it	eq
 8013efc:	694b      	ldreq	r3, [r1, #20]
 8013efe:	600f      	str	r7, [r1, #0]
 8013f00:	bf18      	it	ne
 8013f02:	2300      	movne	r3, #0
 8013f04:	eba6 0807 	sub.w	r8, r6, r7
 8013f08:	608b      	str	r3, [r1, #8]
 8013f0a:	f1b8 0f00 	cmp.w	r8, #0
 8013f0e:	dd9c      	ble.n	8013e4a <__sflush_r+0x1a>
 8013f10:	6a21      	ldr	r1, [r4, #32]
 8013f12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013f14:	4643      	mov	r3, r8
 8013f16:	463a      	mov	r2, r7
 8013f18:	4628      	mov	r0, r5
 8013f1a:	47b0      	blx	r6
 8013f1c:	2800      	cmp	r0, #0
 8013f1e:	dc06      	bgt.n	8013f2e <__sflush_r+0xfe>
 8013f20:	89a3      	ldrh	r3, [r4, #12]
 8013f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f26:	81a3      	strh	r3, [r4, #12]
 8013f28:	f04f 30ff 	mov.w	r0, #4294967295
 8013f2c:	e78e      	b.n	8013e4c <__sflush_r+0x1c>
 8013f2e:	4407      	add	r7, r0
 8013f30:	eba8 0800 	sub.w	r8, r8, r0
 8013f34:	e7e9      	b.n	8013f0a <__sflush_r+0xda>
 8013f36:	bf00      	nop
 8013f38:	20400001 	.word	0x20400001

08013f3c <_fflush_r>:
 8013f3c:	b538      	push	{r3, r4, r5, lr}
 8013f3e:	690b      	ldr	r3, [r1, #16]
 8013f40:	4605      	mov	r5, r0
 8013f42:	460c      	mov	r4, r1
 8013f44:	b913      	cbnz	r3, 8013f4c <_fflush_r+0x10>
 8013f46:	2500      	movs	r5, #0
 8013f48:	4628      	mov	r0, r5
 8013f4a:	bd38      	pop	{r3, r4, r5, pc}
 8013f4c:	b118      	cbz	r0, 8013f56 <_fflush_r+0x1a>
 8013f4e:	6983      	ldr	r3, [r0, #24]
 8013f50:	b90b      	cbnz	r3, 8013f56 <_fflush_r+0x1a>
 8013f52:	f000 f887 	bl	8014064 <__sinit>
 8013f56:	4b14      	ldr	r3, [pc, #80]	; (8013fa8 <_fflush_r+0x6c>)
 8013f58:	429c      	cmp	r4, r3
 8013f5a:	d11b      	bne.n	8013f94 <_fflush_r+0x58>
 8013f5c:	686c      	ldr	r4, [r5, #4]
 8013f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d0ef      	beq.n	8013f46 <_fflush_r+0xa>
 8013f66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013f68:	07d0      	lsls	r0, r2, #31
 8013f6a:	d404      	bmi.n	8013f76 <_fflush_r+0x3a>
 8013f6c:	0599      	lsls	r1, r3, #22
 8013f6e:	d402      	bmi.n	8013f76 <_fflush_r+0x3a>
 8013f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f72:	f000 f927 	bl	80141c4 <__retarget_lock_acquire_recursive>
 8013f76:	4628      	mov	r0, r5
 8013f78:	4621      	mov	r1, r4
 8013f7a:	f7ff ff59 	bl	8013e30 <__sflush_r>
 8013f7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013f80:	07da      	lsls	r2, r3, #31
 8013f82:	4605      	mov	r5, r0
 8013f84:	d4e0      	bmi.n	8013f48 <_fflush_r+0xc>
 8013f86:	89a3      	ldrh	r3, [r4, #12]
 8013f88:	059b      	lsls	r3, r3, #22
 8013f8a:	d4dd      	bmi.n	8013f48 <_fflush_r+0xc>
 8013f8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013f8e:	f000 f91a 	bl	80141c6 <__retarget_lock_release_recursive>
 8013f92:	e7d9      	b.n	8013f48 <_fflush_r+0xc>
 8013f94:	4b05      	ldr	r3, [pc, #20]	; (8013fac <_fflush_r+0x70>)
 8013f96:	429c      	cmp	r4, r3
 8013f98:	d101      	bne.n	8013f9e <_fflush_r+0x62>
 8013f9a:	68ac      	ldr	r4, [r5, #8]
 8013f9c:	e7df      	b.n	8013f5e <_fflush_r+0x22>
 8013f9e:	4b04      	ldr	r3, [pc, #16]	; (8013fb0 <_fflush_r+0x74>)
 8013fa0:	429c      	cmp	r4, r3
 8013fa2:	bf08      	it	eq
 8013fa4:	68ec      	ldreq	r4, [r5, #12]
 8013fa6:	e7da      	b.n	8013f5e <_fflush_r+0x22>
 8013fa8:	080179d4 	.word	0x080179d4
 8013fac:	080179f4 	.word	0x080179f4
 8013fb0:	080179b4 	.word	0x080179b4

08013fb4 <std>:
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	b510      	push	{r4, lr}
 8013fb8:	4604      	mov	r4, r0
 8013fba:	e9c0 3300 	strd	r3, r3, [r0]
 8013fbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013fc2:	6083      	str	r3, [r0, #8]
 8013fc4:	8181      	strh	r1, [r0, #12]
 8013fc6:	6643      	str	r3, [r0, #100]	; 0x64
 8013fc8:	81c2      	strh	r2, [r0, #14]
 8013fca:	6183      	str	r3, [r0, #24]
 8013fcc:	4619      	mov	r1, r3
 8013fce:	2208      	movs	r2, #8
 8013fd0:	305c      	adds	r0, #92	; 0x5c
 8013fd2:	f7ff fd79 	bl	8013ac8 <memset>
 8013fd6:	4b05      	ldr	r3, [pc, #20]	; (8013fec <std+0x38>)
 8013fd8:	6263      	str	r3, [r4, #36]	; 0x24
 8013fda:	4b05      	ldr	r3, [pc, #20]	; (8013ff0 <std+0x3c>)
 8013fdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8013fde:	4b05      	ldr	r3, [pc, #20]	; (8013ff4 <std+0x40>)
 8013fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013fe2:	4b05      	ldr	r3, [pc, #20]	; (8013ff8 <std+0x44>)
 8013fe4:	6224      	str	r4, [r4, #32]
 8013fe6:	6323      	str	r3, [r4, #48]	; 0x30
 8013fe8:	bd10      	pop	{r4, pc}
 8013fea:	bf00      	nop
 8013fec:	080149f1 	.word	0x080149f1
 8013ff0:	08014a13 	.word	0x08014a13
 8013ff4:	08014a4b 	.word	0x08014a4b
 8013ff8:	08014a6f 	.word	0x08014a6f

08013ffc <_cleanup_r>:
 8013ffc:	4901      	ldr	r1, [pc, #4]	; (8014004 <_cleanup_r+0x8>)
 8013ffe:	f000 b8c1 	b.w	8014184 <_fwalk_reent>
 8014002:	bf00      	nop
 8014004:	08013f3d 	.word	0x08013f3d

08014008 <__sfmoreglue>:
 8014008:	b570      	push	{r4, r5, r6, lr}
 801400a:	1e4a      	subs	r2, r1, #1
 801400c:	2568      	movs	r5, #104	; 0x68
 801400e:	4355      	muls	r5, r2
 8014010:	460e      	mov	r6, r1
 8014012:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014016:	f000 f993 	bl	8014340 <_malloc_r>
 801401a:	4604      	mov	r4, r0
 801401c:	b140      	cbz	r0, 8014030 <__sfmoreglue+0x28>
 801401e:	2100      	movs	r1, #0
 8014020:	e9c0 1600 	strd	r1, r6, [r0]
 8014024:	300c      	adds	r0, #12
 8014026:	60a0      	str	r0, [r4, #8]
 8014028:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801402c:	f7ff fd4c 	bl	8013ac8 <memset>
 8014030:	4620      	mov	r0, r4
 8014032:	bd70      	pop	{r4, r5, r6, pc}

08014034 <__sfp_lock_acquire>:
 8014034:	4801      	ldr	r0, [pc, #4]	; (801403c <__sfp_lock_acquire+0x8>)
 8014036:	f000 b8c5 	b.w	80141c4 <__retarget_lock_acquire_recursive>
 801403a:	bf00      	nop
 801403c:	20008de8 	.word	0x20008de8

08014040 <__sfp_lock_release>:
 8014040:	4801      	ldr	r0, [pc, #4]	; (8014048 <__sfp_lock_release+0x8>)
 8014042:	f000 b8c0 	b.w	80141c6 <__retarget_lock_release_recursive>
 8014046:	bf00      	nop
 8014048:	20008de8 	.word	0x20008de8

0801404c <__sinit_lock_acquire>:
 801404c:	4801      	ldr	r0, [pc, #4]	; (8014054 <__sinit_lock_acquire+0x8>)
 801404e:	f000 b8b9 	b.w	80141c4 <__retarget_lock_acquire_recursive>
 8014052:	bf00      	nop
 8014054:	20008de3 	.word	0x20008de3

08014058 <__sinit_lock_release>:
 8014058:	4801      	ldr	r0, [pc, #4]	; (8014060 <__sinit_lock_release+0x8>)
 801405a:	f000 b8b4 	b.w	80141c6 <__retarget_lock_release_recursive>
 801405e:	bf00      	nop
 8014060:	20008de3 	.word	0x20008de3

08014064 <__sinit>:
 8014064:	b510      	push	{r4, lr}
 8014066:	4604      	mov	r4, r0
 8014068:	f7ff fff0 	bl	801404c <__sinit_lock_acquire>
 801406c:	69a3      	ldr	r3, [r4, #24]
 801406e:	b11b      	cbz	r3, 8014078 <__sinit+0x14>
 8014070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014074:	f7ff bff0 	b.w	8014058 <__sinit_lock_release>
 8014078:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801407c:	6523      	str	r3, [r4, #80]	; 0x50
 801407e:	4b13      	ldr	r3, [pc, #76]	; (80140cc <__sinit+0x68>)
 8014080:	4a13      	ldr	r2, [pc, #76]	; (80140d0 <__sinit+0x6c>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	62a2      	str	r2, [r4, #40]	; 0x28
 8014086:	42a3      	cmp	r3, r4
 8014088:	bf04      	itt	eq
 801408a:	2301      	moveq	r3, #1
 801408c:	61a3      	streq	r3, [r4, #24]
 801408e:	4620      	mov	r0, r4
 8014090:	f000 f820 	bl	80140d4 <__sfp>
 8014094:	6060      	str	r0, [r4, #4]
 8014096:	4620      	mov	r0, r4
 8014098:	f000 f81c 	bl	80140d4 <__sfp>
 801409c:	60a0      	str	r0, [r4, #8]
 801409e:	4620      	mov	r0, r4
 80140a0:	f000 f818 	bl	80140d4 <__sfp>
 80140a4:	2200      	movs	r2, #0
 80140a6:	60e0      	str	r0, [r4, #12]
 80140a8:	2104      	movs	r1, #4
 80140aa:	6860      	ldr	r0, [r4, #4]
 80140ac:	f7ff ff82 	bl	8013fb4 <std>
 80140b0:	68a0      	ldr	r0, [r4, #8]
 80140b2:	2201      	movs	r2, #1
 80140b4:	2109      	movs	r1, #9
 80140b6:	f7ff ff7d 	bl	8013fb4 <std>
 80140ba:	68e0      	ldr	r0, [r4, #12]
 80140bc:	2202      	movs	r2, #2
 80140be:	2112      	movs	r1, #18
 80140c0:	f7ff ff78 	bl	8013fb4 <std>
 80140c4:	2301      	movs	r3, #1
 80140c6:	61a3      	str	r3, [r4, #24]
 80140c8:	e7d2      	b.n	8014070 <__sinit+0xc>
 80140ca:	bf00      	nop
 80140cc:	080178fc 	.word	0x080178fc
 80140d0:	08013ffd 	.word	0x08013ffd

080140d4 <__sfp>:
 80140d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140d6:	4607      	mov	r7, r0
 80140d8:	f7ff ffac 	bl	8014034 <__sfp_lock_acquire>
 80140dc:	4b1e      	ldr	r3, [pc, #120]	; (8014158 <__sfp+0x84>)
 80140de:	681e      	ldr	r6, [r3, #0]
 80140e0:	69b3      	ldr	r3, [r6, #24]
 80140e2:	b913      	cbnz	r3, 80140ea <__sfp+0x16>
 80140e4:	4630      	mov	r0, r6
 80140e6:	f7ff ffbd 	bl	8014064 <__sinit>
 80140ea:	3648      	adds	r6, #72	; 0x48
 80140ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80140f0:	3b01      	subs	r3, #1
 80140f2:	d503      	bpl.n	80140fc <__sfp+0x28>
 80140f4:	6833      	ldr	r3, [r6, #0]
 80140f6:	b30b      	cbz	r3, 801413c <__sfp+0x68>
 80140f8:	6836      	ldr	r6, [r6, #0]
 80140fa:	e7f7      	b.n	80140ec <__sfp+0x18>
 80140fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014100:	b9d5      	cbnz	r5, 8014138 <__sfp+0x64>
 8014102:	4b16      	ldr	r3, [pc, #88]	; (801415c <__sfp+0x88>)
 8014104:	60e3      	str	r3, [r4, #12]
 8014106:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801410a:	6665      	str	r5, [r4, #100]	; 0x64
 801410c:	f000 f859 	bl	80141c2 <__retarget_lock_init_recursive>
 8014110:	f7ff ff96 	bl	8014040 <__sfp_lock_release>
 8014114:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014118:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801411c:	6025      	str	r5, [r4, #0]
 801411e:	61a5      	str	r5, [r4, #24]
 8014120:	2208      	movs	r2, #8
 8014122:	4629      	mov	r1, r5
 8014124:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014128:	f7ff fcce 	bl	8013ac8 <memset>
 801412c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014130:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014134:	4620      	mov	r0, r4
 8014136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014138:	3468      	adds	r4, #104	; 0x68
 801413a:	e7d9      	b.n	80140f0 <__sfp+0x1c>
 801413c:	2104      	movs	r1, #4
 801413e:	4638      	mov	r0, r7
 8014140:	f7ff ff62 	bl	8014008 <__sfmoreglue>
 8014144:	4604      	mov	r4, r0
 8014146:	6030      	str	r0, [r6, #0]
 8014148:	2800      	cmp	r0, #0
 801414a:	d1d5      	bne.n	80140f8 <__sfp+0x24>
 801414c:	f7ff ff78 	bl	8014040 <__sfp_lock_release>
 8014150:	230c      	movs	r3, #12
 8014152:	603b      	str	r3, [r7, #0]
 8014154:	e7ee      	b.n	8014134 <__sfp+0x60>
 8014156:	bf00      	nop
 8014158:	080178fc 	.word	0x080178fc
 801415c:	ffff0001 	.word	0xffff0001

08014160 <fiprintf>:
 8014160:	b40e      	push	{r1, r2, r3}
 8014162:	b503      	push	{r0, r1, lr}
 8014164:	4601      	mov	r1, r0
 8014166:	ab03      	add	r3, sp, #12
 8014168:	4805      	ldr	r0, [pc, #20]	; (8014180 <fiprintf+0x20>)
 801416a:	f853 2b04 	ldr.w	r2, [r3], #4
 801416e:	6800      	ldr	r0, [r0, #0]
 8014170:	9301      	str	r3, [sp, #4]
 8014172:	f000 f969 	bl	8014448 <_vfiprintf_r>
 8014176:	b002      	add	sp, #8
 8014178:	f85d eb04 	ldr.w	lr, [sp], #4
 801417c:	b003      	add	sp, #12
 801417e:	4770      	bx	lr
 8014180:	20000018 	.word	0x20000018

08014184 <_fwalk_reent>:
 8014184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014188:	4606      	mov	r6, r0
 801418a:	4688      	mov	r8, r1
 801418c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014190:	2700      	movs	r7, #0
 8014192:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014196:	f1b9 0901 	subs.w	r9, r9, #1
 801419a:	d505      	bpl.n	80141a8 <_fwalk_reent+0x24>
 801419c:	6824      	ldr	r4, [r4, #0]
 801419e:	2c00      	cmp	r4, #0
 80141a0:	d1f7      	bne.n	8014192 <_fwalk_reent+0xe>
 80141a2:	4638      	mov	r0, r7
 80141a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141a8:	89ab      	ldrh	r3, [r5, #12]
 80141aa:	2b01      	cmp	r3, #1
 80141ac:	d907      	bls.n	80141be <_fwalk_reent+0x3a>
 80141ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80141b2:	3301      	adds	r3, #1
 80141b4:	d003      	beq.n	80141be <_fwalk_reent+0x3a>
 80141b6:	4629      	mov	r1, r5
 80141b8:	4630      	mov	r0, r6
 80141ba:	47c0      	blx	r8
 80141bc:	4307      	orrs	r7, r0
 80141be:	3568      	adds	r5, #104	; 0x68
 80141c0:	e7e9      	b.n	8014196 <_fwalk_reent+0x12>

080141c2 <__retarget_lock_init_recursive>:
 80141c2:	4770      	bx	lr

080141c4 <__retarget_lock_acquire_recursive>:
 80141c4:	4770      	bx	lr

080141c6 <__retarget_lock_release_recursive>:
 80141c6:	4770      	bx	lr

080141c8 <__swhatbuf_r>:
 80141c8:	b570      	push	{r4, r5, r6, lr}
 80141ca:	460e      	mov	r6, r1
 80141cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141d0:	2900      	cmp	r1, #0
 80141d2:	b096      	sub	sp, #88	; 0x58
 80141d4:	4614      	mov	r4, r2
 80141d6:	461d      	mov	r5, r3
 80141d8:	da07      	bge.n	80141ea <__swhatbuf_r+0x22>
 80141da:	2300      	movs	r3, #0
 80141dc:	602b      	str	r3, [r5, #0]
 80141de:	89b3      	ldrh	r3, [r6, #12]
 80141e0:	061a      	lsls	r2, r3, #24
 80141e2:	d410      	bmi.n	8014206 <__swhatbuf_r+0x3e>
 80141e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80141e8:	e00e      	b.n	8014208 <__swhatbuf_r+0x40>
 80141ea:	466a      	mov	r2, sp
 80141ec:	f000 fc6e 	bl	8014acc <_fstat_r>
 80141f0:	2800      	cmp	r0, #0
 80141f2:	dbf2      	blt.n	80141da <__swhatbuf_r+0x12>
 80141f4:	9a01      	ldr	r2, [sp, #4]
 80141f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80141fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80141fe:	425a      	negs	r2, r3
 8014200:	415a      	adcs	r2, r3
 8014202:	602a      	str	r2, [r5, #0]
 8014204:	e7ee      	b.n	80141e4 <__swhatbuf_r+0x1c>
 8014206:	2340      	movs	r3, #64	; 0x40
 8014208:	2000      	movs	r0, #0
 801420a:	6023      	str	r3, [r4, #0]
 801420c:	b016      	add	sp, #88	; 0x58
 801420e:	bd70      	pop	{r4, r5, r6, pc}

08014210 <__smakebuf_r>:
 8014210:	898b      	ldrh	r3, [r1, #12]
 8014212:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014214:	079d      	lsls	r5, r3, #30
 8014216:	4606      	mov	r6, r0
 8014218:	460c      	mov	r4, r1
 801421a:	d507      	bpl.n	801422c <__smakebuf_r+0x1c>
 801421c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014220:	6023      	str	r3, [r4, #0]
 8014222:	6123      	str	r3, [r4, #16]
 8014224:	2301      	movs	r3, #1
 8014226:	6163      	str	r3, [r4, #20]
 8014228:	b002      	add	sp, #8
 801422a:	bd70      	pop	{r4, r5, r6, pc}
 801422c:	ab01      	add	r3, sp, #4
 801422e:	466a      	mov	r2, sp
 8014230:	f7ff ffca 	bl	80141c8 <__swhatbuf_r>
 8014234:	9900      	ldr	r1, [sp, #0]
 8014236:	4605      	mov	r5, r0
 8014238:	4630      	mov	r0, r6
 801423a:	f000 f881 	bl	8014340 <_malloc_r>
 801423e:	b948      	cbnz	r0, 8014254 <__smakebuf_r+0x44>
 8014240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014244:	059a      	lsls	r2, r3, #22
 8014246:	d4ef      	bmi.n	8014228 <__smakebuf_r+0x18>
 8014248:	f023 0303 	bic.w	r3, r3, #3
 801424c:	f043 0302 	orr.w	r3, r3, #2
 8014250:	81a3      	strh	r3, [r4, #12]
 8014252:	e7e3      	b.n	801421c <__smakebuf_r+0xc>
 8014254:	4b0d      	ldr	r3, [pc, #52]	; (801428c <__smakebuf_r+0x7c>)
 8014256:	62b3      	str	r3, [r6, #40]	; 0x28
 8014258:	89a3      	ldrh	r3, [r4, #12]
 801425a:	6020      	str	r0, [r4, #0]
 801425c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014260:	81a3      	strh	r3, [r4, #12]
 8014262:	9b00      	ldr	r3, [sp, #0]
 8014264:	6163      	str	r3, [r4, #20]
 8014266:	9b01      	ldr	r3, [sp, #4]
 8014268:	6120      	str	r0, [r4, #16]
 801426a:	b15b      	cbz	r3, 8014284 <__smakebuf_r+0x74>
 801426c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014270:	4630      	mov	r0, r6
 8014272:	f000 fc3d 	bl	8014af0 <_isatty_r>
 8014276:	b128      	cbz	r0, 8014284 <__smakebuf_r+0x74>
 8014278:	89a3      	ldrh	r3, [r4, #12]
 801427a:	f023 0303 	bic.w	r3, r3, #3
 801427e:	f043 0301 	orr.w	r3, r3, #1
 8014282:	81a3      	strh	r3, [r4, #12]
 8014284:	89a0      	ldrh	r0, [r4, #12]
 8014286:	4305      	orrs	r5, r0
 8014288:	81a5      	strh	r5, [r4, #12]
 801428a:	e7cd      	b.n	8014228 <__smakebuf_r+0x18>
 801428c:	08013ffd 	.word	0x08013ffd

08014290 <malloc>:
 8014290:	4b02      	ldr	r3, [pc, #8]	; (801429c <malloc+0xc>)
 8014292:	4601      	mov	r1, r0
 8014294:	6818      	ldr	r0, [r3, #0]
 8014296:	f000 b853 	b.w	8014340 <_malloc_r>
 801429a:	bf00      	nop
 801429c:	20000018 	.word	0x20000018

080142a0 <_free_r>:
 80142a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80142a2:	2900      	cmp	r1, #0
 80142a4:	d048      	beq.n	8014338 <_free_r+0x98>
 80142a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142aa:	9001      	str	r0, [sp, #4]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	f1a1 0404 	sub.w	r4, r1, #4
 80142b2:	bfb8      	it	lt
 80142b4:	18e4      	addlt	r4, r4, r3
 80142b6:	f000 fc3d 	bl	8014b34 <__malloc_lock>
 80142ba:	4a20      	ldr	r2, [pc, #128]	; (801433c <_free_r+0x9c>)
 80142bc:	9801      	ldr	r0, [sp, #4]
 80142be:	6813      	ldr	r3, [r2, #0]
 80142c0:	4615      	mov	r5, r2
 80142c2:	b933      	cbnz	r3, 80142d2 <_free_r+0x32>
 80142c4:	6063      	str	r3, [r4, #4]
 80142c6:	6014      	str	r4, [r2, #0]
 80142c8:	b003      	add	sp, #12
 80142ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80142ce:	f000 bc37 	b.w	8014b40 <__malloc_unlock>
 80142d2:	42a3      	cmp	r3, r4
 80142d4:	d90b      	bls.n	80142ee <_free_r+0x4e>
 80142d6:	6821      	ldr	r1, [r4, #0]
 80142d8:	1862      	adds	r2, r4, r1
 80142da:	4293      	cmp	r3, r2
 80142dc:	bf04      	itt	eq
 80142de:	681a      	ldreq	r2, [r3, #0]
 80142e0:	685b      	ldreq	r3, [r3, #4]
 80142e2:	6063      	str	r3, [r4, #4]
 80142e4:	bf04      	itt	eq
 80142e6:	1852      	addeq	r2, r2, r1
 80142e8:	6022      	streq	r2, [r4, #0]
 80142ea:	602c      	str	r4, [r5, #0]
 80142ec:	e7ec      	b.n	80142c8 <_free_r+0x28>
 80142ee:	461a      	mov	r2, r3
 80142f0:	685b      	ldr	r3, [r3, #4]
 80142f2:	b10b      	cbz	r3, 80142f8 <_free_r+0x58>
 80142f4:	42a3      	cmp	r3, r4
 80142f6:	d9fa      	bls.n	80142ee <_free_r+0x4e>
 80142f8:	6811      	ldr	r1, [r2, #0]
 80142fa:	1855      	adds	r5, r2, r1
 80142fc:	42a5      	cmp	r5, r4
 80142fe:	d10b      	bne.n	8014318 <_free_r+0x78>
 8014300:	6824      	ldr	r4, [r4, #0]
 8014302:	4421      	add	r1, r4
 8014304:	1854      	adds	r4, r2, r1
 8014306:	42a3      	cmp	r3, r4
 8014308:	6011      	str	r1, [r2, #0]
 801430a:	d1dd      	bne.n	80142c8 <_free_r+0x28>
 801430c:	681c      	ldr	r4, [r3, #0]
 801430e:	685b      	ldr	r3, [r3, #4]
 8014310:	6053      	str	r3, [r2, #4]
 8014312:	4421      	add	r1, r4
 8014314:	6011      	str	r1, [r2, #0]
 8014316:	e7d7      	b.n	80142c8 <_free_r+0x28>
 8014318:	d902      	bls.n	8014320 <_free_r+0x80>
 801431a:	230c      	movs	r3, #12
 801431c:	6003      	str	r3, [r0, #0]
 801431e:	e7d3      	b.n	80142c8 <_free_r+0x28>
 8014320:	6825      	ldr	r5, [r4, #0]
 8014322:	1961      	adds	r1, r4, r5
 8014324:	428b      	cmp	r3, r1
 8014326:	bf04      	itt	eq
 8014328:	6819      	ldreq	r1, [r3, #0]
 801432a:	685b      	ldreq	r3, [r3, #4]
 801432c:	6063      	str	r3, [r4, #4]
 801432e:	bf04      	itt	eq
 8014330:	1949      	addeq	r1, r1, r5
 8014332:	6021      	streq	r1, [r4, #0]
 8014334:	6054      	str	r4, [r2, #4]
 8014336:	e7c7      	b.n	80142c8 <_free_r+0x28>
 8014338:	b003      	add	sp, #12
 801433a:	bd30      	pop	{r4, r5, pc}
 801433c:	20000214 	.word	0x20000214

08014340 <_malloc_r>:
 8014340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014342:	1ccd      	adds	r5, r1, #3
 8014344:	f025 0503 	bic.w	r5, r5, #3
 8014348:	3508      	adds	r5, #8
 801434a:	2d0c      	cmp	r5, #12
 801434c:	bf38      	it	cc
 801434e:	250c      	movcc	r5, #12
 8014350:	2d00      	cmp	r5, #0
 8014352:	4606      	mov	r6, r0
 8014354:	db01      	blt.n	801435a <_malloc_r+0x1a>
 8014356:	42a9      	cmp	r1, r5
 8014358:	d903      	bls.n	8014362 <_malloc_r+0x22>
 801435a:	230c      	movs	r3, #12
 801435c:	6033      	str	r3, [r6, #0]
 801435e:	2000      	movs	r0, #0
 8014360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014362:	f000 fbe7 	bl	8014b34 <__malloc_lock>
 8014366:	4921      	ldr	r1, [pc, #132]	; (80143ec <_malloc_r+0xac>)
 8014368:	680a      	ldr	r2, [r1, #0]
 801436a:	4614      	mov	r4, r2
 801436c:	b99c      	cbnz	r4, 8014396 <_malloc_r+0x56>
 801436e:	4f20      	ldr	r7, [pc, #128]	; (80143f0 <_malloc_r+0xb0>)
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	b923      	cbnz	r3, 801437e <_malloc_r+0x3e>
 8014374:	4621      	mov	r1, r4
 8014376:	4630      	mov	r0, r6
 8014378:	f000 fb2a 	bl	80149d0 <_sbrk_r>
 801437c:	6038      	str	r0, [r7, #0]
 801437e:	4629      	mov	r1, r5
 8014380:	4630      	mov	r0, r6
 8014382:	f000 fb25 	bl	80149d0 <_sbrk_r>
 8014386:	1c43      	adds	r3, r0, #1
 8014388:	d123      	bne.n	80143d2 <_malloc_r+0x92>
 801438a:	230c      	movs	r3, #12
 801438c:	6033      	str	r3, [r6, #0]
 801438e:	4630      	mov	r0, r6
 8014390:	f000 fbd6 	bl	8014b40 <__malloc_unlock>
 8014394:	e7e3      	b.n	801435e <_malloc_r+0x1e>
 8014396:	6823      	ldr	r3, [r4, #0]
 8014398:	1b5b      	subs	r3, r3, r5
 801439a:	d417      	bmi.n	80143cc <_malloc_r+0x8c>
 801439c:	2b0b      	cmp	r3, #11
 801439e:	d903      	bls.n	80143a8 <_malloc_r+0x68>
 80143a0:	6023      	str	r3, [r4, #0]
 80143a2:	441c      	add	r4, r3
 80143a4:	6025      	str	r5, [r4, #0]
 80143a6:	e004      	b.n	80143b2 <_malloc_r+0x72>
 80143a8:	6863      	ldr	r3, [r4, #4]
 80143aa:	42a2      	cmp	r2, r4
 80143ac:	bf0c      	ite	eq
 80143ae:	600b      	streq	r3, [r1, #0]
 80143b0:	6053      	strne	r3, [r2, #4]
 80143b2:	4630      	mov	r0, r6
 80143b4:	f000 fbc4 	bl	8014b40 <__malloc_unlock>
 80143b8:	f104 000b 	add.w	r0, r4, #11
 80143bc:	1d23      	adds	r3, r4, #4
 80143be:	f020 0007 	bic.w	r0, r0, #7
 80143c2:	1ac2      	subs	r2, r0, r3
 80143c4:	d0cc      	beq.n	8014360 <_malloc_r+0x20>
 80143c6:	1a1b      	subs	r3, r3, r0
 80143c8:	50a3      	str	r3, [r4, r2]
 80143ca:	e7c9      	b.n	8014360 <_malloc_r+0x20>
 80143cc:	4622      	mov	r2, r4
 80143ce:	6864      	ldr	r4, [r4, #4]
 80143d0:	e7cc      	b.n	801436c <_malloc_r+0x2c>
 80143d2:	1cc4      	adds	r4, r0, #3
 80143d4:	f024 0403 	bic.w	r4, r4, #3
 80143d8:	42a0      	cmp	r0, r4
 80143da:	d0e3      	beq.n	80143a4 <_malloc_r+0x64>
 80143dc:	1a21      	subs	r1, r4, r0
 80143de:	4630      	mov	r0, r6
 80143e0:	f000 faf6 	bl	80149d0 <_sbrk_r>
 80143e4:	3001      	adds	r0, #1
 80143e6:	d1dd      	bne.n	80143a4 <_malloc_r+0x64>
 80143e8:	e7cf      	b.n	801438a <_malloc_r+0x4a>
 80143ea:	bf00      	nop
 80143ec:	20000214 	.word	0x20000214
 80143f0:	20000218 	.word	0x20000218

080143f4 <__sfputc_r>:
 80143f4:	6893      	ldr	r3, [r2, #8]
 80143f6:	3b01      	subs	r3, #1
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	b410      	push	{r4}
 80143fc:	6093      	str	r3, [r2, #8]
 80143fe:	da08      	bge.n	8014412 <__sfputc_r+0x1e>
 8014400:	6994      	ldr	r4, [r2, #24]
 8014402:	42a3      	cmp	r3, r4
 8014404:	db01      	blt.n	801440a <__sfputc_r+0x16>
 8014406:	290a      	cmp	r1, #10
 8014408:	d103      	bne.n	8014412 <__sfputc_r+0x1e>
 801440a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801440e:	f7ff bc31 	b.w	8013c74 <__swbuf_r>
 8014412:	6813      	ldr	r3, [r2, #0]
 8014414:	1c58      	adds	r0, r3, #1
 8014416:	6010      	str	r0, [r2, #0]
 8014418:	7019      	strb	r1, [r3, #0]
 801441a:	4608      	mov	r0, r1
 801441c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014420:	4770      	bx	lr

08014422 <__sfputs_r>:
 8014422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014424:	4606      	mov	r6, r0
 8014426:	460f      	mov	r7, r1
 8014428:	4614      	mov	r4, r2
 801442a:	18d5      	adds	r5, r2, r3
 801442c:	42ac      	cmp	r4, r5
 801442e:	d101      	bne.n	8014434 <__sfputs_r+0x12>
 8014430:	2000      	movs	r0, #0
 8014432:	e007      	b.n	8014444 <__sfputs_r+0x22>
 8014434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014438:	463a      	mov	r2, r7
 801443a:	4630      	mov	r0, r6
 801443c:	f7ff ffda 	bl	80143f4 <__sfputc_r>
 8014440:	1c43      	adds	r3, r0, #1
 8014442:	d1f3      	bne.n	801442c <__sfputs_r+0xa>
 8014444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014448 <_vfiprintf_r>:
 8014448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801444c:	460d      	mov	r5, r1
 801444e:	b09d      	sub	sp, #116	; 0x74
 8014450:	4614      	mov	r4, r2
 8014452:	4698      	mov	r8, r3
 8014454:	4606      	mov	r6, r0
 8014456:	b118      	cbz	r0, 8014460 <_vfiprintf_r+0x18>
 8014458:	6983      	ldr	r3, [r0, #24]
 801445a:	b90b      	cbnz	r3, 8014460 <_vfiprintf_r+0x18>
 801445c:	f7ff fe02 	bl	8014064 <__sinit>
 8014460:	4b89      	ldr	r3, [pc, #548]	; (8014688 <_vfiprintf_r+0x240>)
 8014462:	429d      	cmp	r5, r3
 8014464:	d11b      	bne.n	801449e <_vfiprintf_r+0x56>
 8014466:	6875      	ldr	r5, [r6, #4]
 8014468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801446a:	07d9      	lsls	r1, r3, #31
 801446c:	d405      	bmi.n	801447a <_vfiprintf_r+0x32>
 801446e:	89ab      	ldrh	r3, [r5, #12]
 8014470:	059a      	lsls	r2, r3, #22
 8014472:	d402      	bmi.n	801447a <_vfiprintf_r+0x32>
 8014474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014476:	f7ff fea5 	bl	80141c4 <__retarget_lock_acquire_recursive>
 801447a:	89ab      	ldrh	r3, [r5, #12]
 801447c:	071b      	lsls	r3, r3, #28
 801447e:	d501      	bpl.n	8014484 <_vfiprintf_r+0x3c>
 8014480:	692b      	ldr	r3, [r5, #16]
 8014482:	b9eb      	cbnz	r3, 80144c0 <_vfiprintf_r+0x78>
 8014484:	4629      	mov	r1, r5
 8014486:	4630      	mov	r0, r6
 8014488:	f7ff fc46 	bl	8013d18 <__swsetup_r>
 801448c:	b1c0      	cbz	r0, 80144c0 <_vfiprintf_r+0x78>
 801448e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014490:	07dc      	lsls	r4, r3, #31
 8014492:	d50e      	bpl.n	80144b2 <_vfiprintf_r+0x6a>
 8014494:	f04f 30ff 	mov.w	r0, #4294967295
 8014498:	b01d      	add	sp, #116	; 0x74
 801449a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801449e:	4b7b      	ldr	r3, [pc, #492]	; (801468c <_vfiprintf_r+0x244>)
 80144a0:	429d      	cmp	r5, r3
 80144a2:	d101      	bne.n	80144a8 <_vfiprintf_r+0x60>
 80144a4:	68b5      	ldr	r5, [r6, #8]
 80144a6:	e7df      	b.n	8014468 <_vfiprintf_r+0x20>
 80144a8:	4b79      	ldr	r3, [pc, #484]	; (8014690 <_vfiprintf_r+0x248>)
 80144aa:	429d      	cmp	r5, r3
 80144ac:	bf08      	it	eq
 80144ae:	68f5      	ldreq	r5, [r6, #12]
 80144b0:	e7da      	b.n	8014468 <_vfiprintf_r+0x20>
 80144b2:	89ab      	ldrh	r3, [r5, #12]
 80144b4:	0598      	lsls	r0, r3, #22
 80144b6:	d4ed      	bmi.n	8014494 <_vfiprintf_r+0x4c>
 80144b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144ba:	f7ff fe84 	bl	80141c6 <__retarget_lock_release_recursive>
 80144be:	e7e9      	b.n	8014494 <_vfiprintf_r+0x4c>
 80144c0:	2300      	movs	r3, #0
 80144c2:	9309      	str	r3, [sp, #36]	; 0x24
 80144c4:	2320      	movs	r3, #32
 80144c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80144ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80144ce:	2330      	movs	r3, #48	; 0x30
 80144d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014694 <_vfiprintf_r+0x24c>
 80144d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80144d8:	f04f 0901 	mov.w	r9, #1
 80144dc:	4623      	mov	r3, r4
 80144de:	469a      	mov	sl, r3
 80144e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80144e4:	b10a      	cbz	r2, 80144ea <_vfiprintf_r+0xa2>
 80144e6:	2a25      	cmp	r2, #37	; 0x25
 80144e8:	d1f9      	bne.n	80144de <_vfiprintf_r+0x96>
 80144ea:	ebba 0b04 	subs.w	fp, sl, r4
 80144ee:	d00b      	beq.n	8014508 <_vfiprintf_r+0xc0>
 80144f0:	465b      	mov	r3, fp
 80144f2:	4622      	mov	r2, r4
 80144f4:	4629      	mov	r1, r5
 80144f6:	4630      	mov	r0, r6
 80144f8:	f7ff ff93 	bl	8014422 <__sfputs_r>
 80144fc:	3001      	adds	r0, #1
 80144fe:	f000 80aa 	beq.w	8014656 <_vfiprintf_r+0x20e>
 8014502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014504:	445a      	add	r2, fp
 8014506:	9209      	str	r2, [sp, #36]	; 0x24
 8014508:	f89a 3000 	ldrb.w	r3, [sl]
 801450c:	2b00      	cmp	r3, #0
 801450e:	f000 80a2 	beq.w	8014656 <_vfiprintf_r+0x20e>
 8014512:	2300      	movs	r3, #0
 8014514:	f04f 32ff 	mov.w	r2, #4294967295
 8014518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801451c:	f10a 0a01 	add.w	sl, sl, #1
 8014520:	9304      	str	r3, [sp, #16]
 8014522:	9307      	str	r3, [sp, #28]
 8014524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014528:	931a      	str	r3, [sp, #104]	; 0x68
 801452a:	4654      	mov	r4, sl
 801452c:	2205      	movs	r2, #5
 801452e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014532:	4858      	ldr	r0, [pc, #352]	; (8014694 <_vfiprintf_r+0x24c>)
 8014534:	f7eb fe74 	bl	8000220 <memchr>
 8014538:	9a04      	ldr	r2, [sp, #16]
 801453a:	b9d8      	cbnz	r0, 8014574 <_vfiprintf_r+0x12c>
 801453c:	06d1      	lsls	r1, r2, #27
 801453e:	bf44      	itt	mi
 8014540:	2320      	movmi	r3, #32
 8014542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014546:	0713      	lsls	r3, r2, #28
 8014548:	bf44      	itt	mi
 801454a:	232b      	movmi	r3, #43	; 0x2b
 801454c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014550:	f89a 3000 	ldrb.w	r3, [sl]
 8014554:	2b2a      	cmp	r3, #42	; 0x2a
 8014556:	d015      	beq.n	8014584 <_vfiprintf_r+0x13c>
 8014558:	9a07      	ldr	r2, [sp, #28]
 801455a:	4654      	mov	r4, sl
 801455c:	2000      	movs	r0, #0
 801455e:	f04f 0c0a 	mov.w	ip, #10
 8014562:	4621      	mov	r1, r4
 8014564:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014568:	3b30      	subs	r3, #48	; 0x30
 801456a:	2b09      	cmp	r3, #9
 801456c:	d94e      	bls.n	801460c <_vfiprintf_r+0x1c4>
 801456e:	b1b0      	cbz	r0, 801459e <_vfiprintf_r+0x156>
 8014570:	9207      	str	r2, [sp, #28]
 8014572:	e014      	b.n	801459e <_vfiprintf_r+0x156>
 8014574:	eba0 0308 	sub.w	r3, r0, r8
 8014578:	fa09 f303 	lsl.w	r3, r9, r3
 801457c:	4313      	orrs	r3, r2
 801457e:	9304      	str	r3, [sp, #16]
 8014580:	46a2      	mov	sl, r4
 8014582:	e7d2      	b.n	801452a <_vfiprintf_r+0xe2>
 8014584:	9b03      	ldr	r3, [sp, #12]
 8014586:	1d19      	adds	r1, r3, #4
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	9103      	str	r1, [sp, #12]
 801458c:	2b00      	cmp	r3, #0
 801458e:	bfbb      	ittet	lt
 8014590:	425b      	neglt	r3, r3
 8014592:	f042 0202 	orrlt.w	r2, r2, #2
 8014596:	9307      	strge	r3, [sp, #28]
 8014598:	9307      	strlt	r3, [sp, #28]
 801459a:	bfb8      	it	lt
 801459c:	9204      	strlt	r2, [sp, #16]
 801459e:	7823      	ldrb	r3, [r4, #0]
 80145a0:	2b2e      	cmp	r3, #46	; 0x2e
 80145a2:	d10c      	bne.n	80145be <_vfiprintf_r+0x176>
 80145a4:	7863      	ldrb	r3, [r4, #1]
 80145a6:	2b2a      	cmp	r3, #42	; 0x2a
 80145a8:	d135      	bne.n	8014616 <_vfiprintf_r+0x1ce>
 80145aa:	9b03      	ldr	r3, [sp, #12]
 80145ac:	1d1a      	adds	r2, r3, #4
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	9203      	str	r2, [sp, #12]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	bfb8      	it	lt
 80145b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80145ba:	3402      	adds	r4, #2
 80145bc:	9305      	str	r3, [sp, #20]
 80145be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80146a4 <_vfiprintf_r+0x25c>
 80145c2:	7821      	ldrb	r1, [r4, #0]
 80145c4:	2203      	movs	r2, #3
 80145c6:	4650      	mov	r0, sl
 80145c8:	f7eb fe2a 	bl	8000220 <memchr>
 80145cc:	b140      	cbz	r0, 80145e0 <_vfiprintf_r+0x198>
 80145ce:	2340      	movs	r3, #64	; 0x40
 80145d0:	eba0 000a 	sub.w	r0, r0, sl
 80145d4:	fa03 f000 	lsl.w	r0, r3, r0
 80145d8:	9b04      	ldr	r3, [sp, #16]
 80145da:	4303      	orrs	r3, r0
 80145dc:	3401      	adds	r4, #1
 80145de:	9304      	str	r3, [sp, #16]
 80145e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145e4:	482c      	ldr	r0, [pc, #176]	; (8014698 <_vfiprintf_r+0x250>)
 80145e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80145ea:	2206      	movs	r2, #6
 80145ec:	f7eb fe18 	bl	8000220 <memchr>
 80145f0:	2800      	cmp	r0, #0
 80145f2:	d03f      	beq.n	8014674 <_vfiprintf_r+0x22c>
 80145f4:	4b29      	ldr	r3, [pc, #164]	; (801469c <_vfiprintf_r+0x254>)
 80145f6:	bb1b      	cbnz	r3, 8014640 <_vfiprintf_r+0x1f8>
 80145f8:	9b03      	ldr	r3, [sp, #12]
 80145fa:	3307      	adds	r3, #7
 80145fc:	f023 0307 	bic.w	r3, r3, #7
 8014600:	3308      	adds	r3, #8
 8014602:	9303      	str	r3, [sp, #12]
 8014604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014606:	443b      	add	r3, r7
 8014608:	9309      	str	r3, [sp, #36]	; 0x24
 801460a:	e767      	b.n	80144dc <_vfiprintf_r+0x94>
 801460c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014610:	460c      	mov	r4, r1
 8014612:	2001      	movs	r0, #1
 8014614:	e7a5      	b.n	8014562 <_vfiprintf_r+0x11a>
 8014616:	2300      	movs	r3, #0
 8014618:	3401      	adds	r4, #1
 801461a:	9305      	str	r3, [sp, #20]
 801461c:	4619      	mov	r1, r3
 801461e:	f04f 0c0a 	mov.w	ip, #10
 8014622:	4620      	mov	r0, r4
 8014624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014628:	3a30      	subs	r2, #48	; 0x30
 801462a:	2a09      	cmp	r2, #9
 801462c:	d903      	bls.n	8014636 <_vfiprintf_r+0x1ee>
 801462e:	2b00      	cmp	r3, #0
 8014630:	d0c5      	beq.n	80145be <_vfiprintf_r+0x176>
 8014632:	9105      	str	r1, [sp, #20]
 8014634:	e7c3      	b.n	80145be <_vfiprintf_r+0x176>
 8014636:	fb0c 2101 	mla	r1, ip, r1, r2
 801463a:	4604      	mov	r4, r0
 801463c:	2301      	movs	r3, #1
 801463e:	e7f0      	b.n	8014622 <_vfiprintf_r+0x1da>
 8014640:	ab03      	add	r3, sp, #12
 8014642:	9300      	str	r3, [sp, #0]
 8014644:	462a      	mov	r2, r5
 8014646:	4b16      	ldr	r3, [pc, #88]	; (80146a0 <_vfiprintf_r+0x258>)
 8014648:	a904      	add	r1, sp, #16
 801464a:	4630      	mov	r0, r6
 801464c:	f3af 8000 	nop.w
 8014650:	4607      	mov	r7, r0
 8014652:	1c78      	adds	r0, r7, #1
 8014654:	d1d6      	bne.n	8014604 <_vfiprintf_r+0x1bc>
 8014656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014658:	07d9      	lsls	r1, r3, #31
 801465a:	d405      	bmi.n	8014668 <_vfiprintf_r+0x220>
 801465c:	89ab      	ldrh	r3, [r5, #12]
 801465e:	059a      	lsls	r2, r3, #22
 8014660:	d402      	bmi.n	8014668 <_vfiprintf_r+0x220>
 8014662:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014664:	f7ff fdaf 	bl	80141c6 <__retarget_lock_release_recursive>
 8014668:	89ab      	ldrh	r3, [r5, #12]
 801466a:	065b      	lsls	r3, r3, #25
 801466c:	f53f af12 	bmi.w	8014494 <_vfiprintf_r+0x4c>
 8014670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014672:	e711      	b.n	8014498 <_vfiprintf_r+0x50>
 8014674:	ab03      	add	r3, sp, #12
 8014676:	9300      	str	r3, [sp, #0]
 8014678:	462a      	mov	r2, r5
 801467a:	4b09      	ldr	r3, [pc, #36]	; (80146a0 <_vfiprintf_r+0x258>)
 801467c:	a904      	add	r1, sp, #16
 801467e:	4630      	mov	r0, r6
 8014680:	f000 f880 	bl	8014784 <_printf_i>
 8014684:	e7e4      	b.n	8014650 <_vfiprintf_r+0x208>
 8014686:	bf00      	nop
 8014688:	080179d4 	.word	0x080179d4
 801468c:	080179f4 	.word	0x080179f4
 8014690:	080179b4 	.word	0x080179b4
 8014694:	08017a14 	.word	0x08017a14
 8014698:	08017a1e 	.word	0x08017a1e
 801469c:	00000000 	.word	0x00000000
 80146a0:	08014423 	.word	0x08014423
 80146a4:	08017a1a 	.word	0x08017a1a

080146a8 <_printf_common>:
 80146a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146ac:	4616      	mov	r6, r2
 80146ae:	4699      	mov	r9, r3
 80146b0:	688a      	ldr	r2, [r1, #8]
 80146b2:	690b      	ldr	r3, [r1, #16]
 80146b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80146b8:	4293      	cmp	r3, r2
 80146ba:	bfb8      	it	lt
 80146bc:	4613      	movlt	r3, r2
 80146be:	6033      	str	r3, [r6, #0]
 80146c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80146c4:	4607      	mov	r7, r0
 80146c6:	460c      	mov	r4, r1
 80146c8:	b10a      	cbz	r2, 80146ce <_printf_common+0x26>
 80146ca:	3301      	adds	r3, #1
 80146cc:	6033      	str	r3, [r6, #0]
 80146ce:	6823      	ldr	r3, [r4, #0]
 80146d0:	0699      	lsls	r1, r3, #26
 80146d2:	bf42      	ittt	mi
 80146d4:	6833      	ldrmi	r3, [r6, #0]
 80146d6:	3302      	addmi	r3, #2
 80146d8:	6033      	strmi	r3, [r6, #0]
 80146da:	6825      	ldr	r5, [r4, #0]
 80146dc:	f015 0506 	ands.w	r5, r5, #6
 80146e0:	d106      	bne.n	80146f0 <_printf_common+0x48>
 80146e2:	f104 0a19 	add.w	sl, r4, #25
 80146e6:	68e3      	ldr	r3, [r4, #12]
 80146e8:	6832      	ldr	r2, [r6, #0]
 80146ea:	1a9b      	subs	r3, r3, r2
 80146ec:	42ab      	cmp	r3, r5
 80146ee:	dc26      	bgt.n	801473e <_printf_common+0x96>
 80146f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80146f4:	1e13      	subs	r3, r2, #0
 80146f6:	6822      	ldr	r2, [r4, #0]
 80146f8:	bf18      	it	ne
 80146fa:	2301      	movne	r3, #1
 80146fc:	0692      	lsls	r2, r2, #26
 80146fe:	d42b      	bmi.n	8014758 <_printf_common+0xb0>
 8014700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014704:	4649      	mov	r1, r9
 8014706:	4638      	mov	r0, r7
 8014708:	47c0      	blx	r8
 801470a:	3001      	adds	r0, #1
 801470c:	d01e      	beq.n	801474c <_printf_common+0xa4>
 801470e:	6823      	ldr	r3, [r4, #0]
 8014710:	68e5      	ldr	r5, [r4, #12]
 8014712:	6832      	ldr	r2, [r6, #0]
 8014714:	f003 0306 	and.w	r3, r3, #6
 8014718:	2b04      	cmp	r3, #4
 801471a:	bf08      	it	eq
 801471c:	1aad      	subeq	r5, r5, r2
 801471e:	68a3      	ldr	r3, [r4, #8]
 8014720:	6922      	ldr	r2, [r4, #16]
 8014722:	bf0c      	ite	eq
 8014724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014728:	2500      	movne	r5, #0
 801472a:	4293      	cmp	r3, r2
 801472c:	bfc4      	itt	gt
 801472e:	1a9b      	subgt	r3, r3, r2
 8014730:	18ed      	addgt	r5, r5, r3
 8014732:	2600      	movs	r6, #0
 8014734:	341a      	adds	r4, #26
 8014736:	42b5      	cmp	r5, r6
 8014738:	d11a      	bne.n	8014770 <_printf_common+0xc8>
 801473a:	2000      	movs	r0, #0
 801473c:	e008      	b.n	8014750 <_printf_common+0xa8>
 801473e:	2301      	movs	r3, #1
 8014740:	4652      	mov	r2, sl
 8014742:	4649      	mov	r1, r9
 8014744:	4638      	mov	r0, r7
 8014746:	47c0      	blx	r8
 8014748:	3001      	adds	r0, #1
 801474a:	d103      	bne.n	8014754 <_printf_common+0xac>
 801474c:	f04f 30ff 	mov.w	r0, #4294967295
 8014750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014754:	3501      	adds	r5, #1
 8014756:	e7c6      	b.n	80146e6 <_printf_common+0x3e>
 8014758:	18e1      	adds	r1, r4, r3
 801475a:	1c5a      	adds	r2, r3, #1
 801475c:	2030      	movs	r0, #48	; 0x30
 801475e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014762:	4422      	add	r2, r4
 8014764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801476c:	3302      	adds	r3, #2
 801476e:	e7c7      	b.n	8014700 <_printf_common+0x58>
 8014770:	2301      	movs	r3, #1
 8014772:	4622      	mov	r2, r4
 8014774:	4649      	mov	r1, r9
 8014776:	4638      	mov	r0, r7
 8014778:	47c0      	blx	r8
 801477a:	3001      	adds	r0, #1
 801477c:	d0e6      	beq.n	801474c <_printf_common+0xa4>
 801477e:	3601      	adds	r6, #1
 8014780:	e7d9      	b.n	8014736 <_printf_common+0x8e>
	...

08014784 <_printf_i>:
 8014784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014788:	460c      	mov	r4, r1
 801478a:	4691      	mov	r9, r2
 801478c:	7e27      	ldrb	r7, [r4, #24]
 801478e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014790:	2f78      	cmp	r7, #120	; 0x78
 8014792:	4680      	mov	r8, r0
 8014794:	469a      	mov	sl, r3
 8014796:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801479a:	d807      	bhi.n	80147ac <_printf_i+0x28>
 801479c:	2f62      	cmp	r7, #98	; 0x62
 801479e:	d80a      	bhi.n	80147b6 <_printf_i+0x32>
 80147a0:	2f00      	cmp	r7, #0
 80147a2:	f000 80d8 	beq.w	8014956 <_printf_i+0x1d2>
 80147a6:	2f58      	cmp	r7, #88	; 0x58
 80147a8:	f000 80a3 	beq.w	80148f2 <_printf_i+0x16e>
 80147ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80147b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80147b4:	e03a      	b.n	801482c <_printf_i+0xa8>
 80147b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80147ba:	2b15      	cmp	r3, #21
 80147bc:	d8f6      	bhi.n	80147ac <_printf_i+0x28>
 80147be:	a001      	add	r0, pc, #4	; (adr r0, 80147c4 <_printf_i+0x40>)
 80147c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80147c4:	0801481d 	.word	0x0801481d
 80147c8:	08014831 	.word	0x08014831
 80147cc:	080147ad 	.word	0x080147ad
 80147d0:	080147ad 	.word	0x080147ad
 80147d4:	080147ad 	.word	0x080147ad
 80147d8:	080147ad 	.word	0x080147ad
 80147dc:	08014831 	.word	0x08014831
 80147e0:	080147ad 	.word	0x080147ad
 80147e4:	080147ad 	.word	0x080147ad
 80147e8:	080147ad 	.word	0x080147ad
 80147ec:	080147ad 	.word	0x080147ad
 80147f0:	0801493d 	.word	0x0801493d
 80147f4:	08014861 	.word	0x08014861
 80147f8:	0801491f 	.word	0x0801491f
 80147fc:	080147ad 	.word	0x080147ad
 8014800:	080147ad 	.word	0x080147ad
 8014804:	0801495f 	.word	0x0801495f
 8014808:	080147ad 	.word	0x080147ad
 801480c:	08014861 	.word	0x08014861
 8014810:	080147ad 	.word	0x080147ad
 8014814:	080147ad 	.word	0x080147ad
 8014818:	08014927 	.word	0x08014927
 801481c:	680b      	ldr	r3, [r1, #0]
 801481e:	1d1a      	adds	r2, r3, #4
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	600a      	str	r2, [r1, #0]
 8014824:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801482c:	2301      	movs	r3, #1
 801482e:	e0a3      	b.n	8014978 <_printf_i+0x1f4>
 8014830:	6825      	ldr	r5, [r4, #0]
 8014832:	6808      	ldr	r0, [r1, #0]
 8014834:	062e      	lsls	r6, r5, #24
 8014836:	f100 0304 	add.w	r3, r0, #4
 801483a:	d50a      	bpl.n	8014852 <_printf_i+0xce>
 801483c:	6805      	ldr	r5, [r0, #0]
 801483e:	600b      	str	r3, [r1, #0]
 8014840:	2d00      	cmp	r5, #0
 8014842:	da03      	bge.n	801484c <_printf_i+0xc8>
 8014844:	232d      	movs	r3, #45	; 0x2d
 8014846:	426d      	negs	r5, r5
 8014848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801484c:	485e      	ldr	r0, [pc, #376]	; (80149c8 <_printf_i+0x244>)
 801484e:	230a      	movs	r3, #10
 8014850:	e019      	b.n	8014886 <_printf_i+0x102>
 8014852:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014856:	6805      	ldr	r5, [r0, #0]
 8014858:	600b      	str	r3, [r1, #0]
 801485a:	bf18      	it	ne
 801485c:	b22d      	sxthne	r5, r5
 801485e:	e7ef      	b.n	8014840 <_printf_i+0xbc>
 8014860:	680b      	ldr	r3, [r1, #0]
 8014862:	6825      	ldr	r5, [r4, #0]
 8014864:	1d18      	adds	r0, r3, #4
 8014866:	6008      	str	r0, [r1, #0]
 8014868:	0628      	lsls	r0, r5, #24
 801486a:	d501      	bpl.n	8014870 <_printf_i+0xec>
 801486c:	681d      	ldr	r5, [r3, #0]
 801486e:	e002      	b.n	8014876 <_printf_i+0xf2>
 8014870:	0669      	lsls	r1, r5, #25
 8014872:	d5fb      	bpl.n	801486c <_printf_i+0xe8>
 8014874:	881d      	ldrh	r5, [r3, #0]
 8014876:	4854      	ldr	r0, [pc, #336]	; (80149c8 <_printf_i+0x244>)
 8014878:	2f6f      	cmp	r7, #111	; 0x6f
 801487a:	bf0c      	ite	eq
 801487c:	2308      	moveq	r3, #8
 801487e:	230a      	movne	r3, #10
 8014880:	2100      	movs	r1, #0
 8014882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014886:	6866      	ldr	r6, [r4, #4]
 8014888:	60a6      	str	r6, [r4, #8]
 801488a:	2e00      	cmp	r6, #0
 801488c:	bfa2      	ittt	ge
 801488e:	6821      	ldrge	r1, [r4, #0]
 8014890:	f021 0104 	bicge.w	r1, r1, #4
 8014894:	6021      	strge	r1, [r4, #0]
 8014896:	b90d      	cbnz	r5, 801489c <_printf_i+0x118>
 8014898:	2e00      	cmp	r6, #0
 801489a:	d04d      	beq.n	8014938 <_printf_i+0x1b4>
 801489c:	4616      	mov	r6, r2
 801489e:	fbb5 f1f3 	udiv	r1, r5, r3
 80148a2:	fb03 5711 	mls	r7, r3, r1, r5
 80148a6:	5dc7      	ldrb	r7, [r0, r7]
 80148a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80148ac:	462f      	mov	r7, r5
 80148ae:	42bb      	cmp	r3, r7
 80148b0:	460d      	mov	r5, r1
 80148b2:	d9f4      	bls.n	801489e <_printf_i+0x11a>
 80148b4:	2b08      	cmp	r3, #8
 80148b6:	d10b      	bne.n	80148d0 <_printf_i+0x14c>
 80148b8:	6823      	ldr	r3, [r4, #0]
 80148ba:	07df      	lsls	r7, r3, #31
 80148bc:	d508      	bpl.n	80148d0 <_printf_i+0x14c>
 80148be:	6923      	ldr	r3, [r4, #16]
 80148c0:	6861      	ldr	r1, [r4, #4]
 80148c2:	4299      	cmp	r1, r3
 80148c4:	bfde      	ittt	le
 80148c6:	2330      	movle	r3, #48	; 0x30
 80148c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80148cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80148d0:	1b92      	subs	r2, r2, r6
 80148d2:	6122      	str	r2, [r4, #16]
 80148d4:	f8cd a000 	str.w	sl, [sp]
 80148d8:	464b      	mov	r3, r9
 80148da:	aa03      	add	r2, sp, #12
 80148dc:	4621      	mov	r1, r4
 80148de:	4640      	mov	r0, r8
 80148e0:	f7ff fee2 	bl	80146a8 <_printf_common>
 80148e4:	3001      	adds	r0, #1
 80148e6:	d14c      	bne.n	8014982 <_printf_i+0x1fe>
 80148e8:	f04f 30ff 	mov.w	r0, #4294967295
 80148ec:	b004      	add	sp, #16
 80148ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148f2:	4835      	ldr	r0, [pc, #212]	; (80149c8 <_printf_i+0x244>)
 80148f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80148f8:	6823      	ldr	r3, [r4, #0]
 80148fa:	680e      	ldr	r6, [r1, #0]
 80148fc:	061f      	lsls	r7, r3, #24
 80148fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8014902:	600e      	str	r6, [r1, #0]
 8014904:	d514      	bpl.n	8014930 <_printf_i+0x1ac>
 8014906:	07d9      	lsls	r1, r3, #31
 8014908:	bf44      	itt	mi
 801490a:	f043 0320 	orrmi.w	r3, r3, #32
 801490e:	6023      	strmi	r3, [r4, #0]
 8014910:	b91d      	cbnz	r5, 801491a <_printf_i+0x196>
 8014912:	6823      	ldr	r3, [r4, #0]
 8014914:	f023 0320 	bic.w	r3, r3, #32
 8014918:	6023      	str	r3, [r4, #0]
 801491a:	2310      	movs	r3, #16
 801491c:	e7b0      	b.n	8014880 <_printf_i+0xfc>
 801491e:	6823      	ldr	r3, [r4, #0]
 8014920:	f043 0320 	orr.w	r3, r3, #32
 8014924:	6023      	str	r3, [r4, #0]
 8014926:	2378      	movs	r3, #120	; 0x78
 8014928:	4828      	ldr	r0, [pc, #160]	; (80149cc <_printf_i+0x248>)
 801492a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801492e:	e7e3      	b.n	80148f8 <_printf_i+0x174>
 8014930:	065e      	lsls	r6, r3, #25
 8014932:	bf48      	it	mi
 8014934:	b2ad      	uxthmi	r5, r5
 8014936:	e7e6      	b.n	8014906 <_printf_i+0x182>
 8014938:	4616      	mov	r6, r2
 801493a:	e7bb      	b.n	80148b4 <_printf_i+0x130>
 801493c:	680b      	ldr	r3, [r1, #0]
 801493e:	6826      	ldr	r6, [r4, #0]
 8014940:	6960      	ldr	r0, [r4, #20]
 8014942:	1d1d      	adds	r5, r3, #4
 8014944:	600d      	str	r5, [r1, #0]
 8014946:	0635      	lsls	r5, r6, #24
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	d501      	bpl.n	8014950 <_printf_i+0x1cc>
 801494c:	6018      	str	r0, [r3, #0]
 801494e:	e002      	b.n	8014956 <_printf_i+0x1d2>
 8014950:	0671      	lsls	r1, r6, #25
 8014952:	d5fb      	bpl.n	801494c <_printf_i+0x1c8>
 8014954:	8018      	strh	r0, [r3, #0]
 8014956:	2300      	movs	r3, #0
 8014958:	6123      	str	r3, [r4, #16]
 801495a:	4616      	mov	r6, r2
 801495c:	e7ba      	b.n	80148d4 <_printf_i+0x150>
 801495e:	680b      	ldr	r3, [r1, #0]
 8014960:	1d1a      	adds	r2, r3, #4
 8014962:	600a      	str	r2, [r1, #0]
 8014964:	681e      	ldr	r6, [r3, #0]
 8014966:	6862      	ldr	r2, [r4, #4]
 8014968:	2100      	movs	r1, #0
 801496a:	4630      	mov	r0, r6
 801496c:	f7eb fc58 	bl	8000220 <memchr>
 8014970:	b108      	cbz	r0, 8014976 <_printf_i+0x1f2>
 8014972:	1b80      	subs	r0, r0, r6
 8014974:	6060      	str	r0, [r4, #4]
 8014976:	6863      	ldr	r3, [r4, #4]
 8014978:	6123      	str	r3, [r4, #16]
 801497a:	2300      	movs	r3, #0
 801497c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014980:	e7a8      	b.n	80148d4 <_printf_i+0x150>
 8014982:	6923      	ldr	r3, [r4, #16]
 8014984:	4632      	mov	r2, r6
 8014986:	4649      	mov	r1, r9
 8014988:	4640      	mov	r0, r8
 801498a:	47d0      	blx	sl
 801498c:	3001      	adds	r0, #1
 801498e:	d0ab      	beq.n	80148e8 <_printf_i+0x164>
 8014990:	6823      	ldr	r3, [r4, #0]
 8014992:	079b      	lsls	r3, r3, #30
 8014994:	d413      	bmi.n	80149be <_printf_i+0x23a>
 8014996:	68e0      	ldr	r0, [r4, #12]
 8014998:	9b03      	ldr	r3, [sp, #12]
 801499a:	4298      	cmp	r0, r3
 801499c:	bfb8      	it	lt
 801499e:	4618      	movlt	r0, r3
 80149a0:	e7a4      	b.n	80148ec <_printf_i+0x168>
 80149a2:	2301      	movs	r3, #1
 80149a4:	4632      	mov	r2, r6
 80149a6:	4649      	mov	r1, r9
 80149a8:	4640      	mov	r0, r8
 80149aa:	47d0      	blx	sl
 80149ac:	3001      	adds	r0, #1
 80149ae:	d09b      	beq.n	80148e8 <_printf_i+0x164>
 80149b0:	3501      	adds	r5, #1
 80149b2:	68e3      	ldr	r3, [r4, #12]
 80149b4:	9903      	ldr	r1, [sp, #12]
 80149b6:	1a5b      	subs	r3, r3, r1
 80149b8:	42ab      	cmp	r3, r5
 80149ba:	dcf2      	bgt.n	80149a2 <_printf_i+0x21e>
 80149bc:	e7eb      	b.n	8014996 <_printf_i+0x212>
 80149be:	2500      	movs	r5, #0
 80149c0:	f104 0619 	add.w	r6, r4, #25
 80149c4:	e7f5      	b.n	80149b2 <_printf_i+0x22e>
 80149c6:	bf00      	nop
 80149c8:	08017a25 	.word	0x08017a25
 80149cc:	08017a36 	.word	0x08017a36

080149d0 <_sbrk_r>:
 80149d0:	b538      	push	{r3, r4, r5, lr}
 80149d2:	4d06      	ldr	r5, [pc, #24]	; (80149ec <_sbrk_r+0x1c>)
 80149d4:	2300      	movs	r3, #0
 80149d6:	4604      	mov	r4, r0
 80149d8:	4608      	mov	r0, r1
 80149da:	602b      	str	r3, [r5, #0]
 80149dc:	f7ed f864 	bl	8001aa8 <_sbrk>
 80149e0:	1c43      	adds	r3, r0, #1
 80149e2:	d102      	bne.n	80149ea <_sbrk_r+0x1a>
 80149e4:	682b      	ldr	r3, [r5, #0]
 80149e6:	b103      	cbz	r3, 80149ea <_sbrk_r+0x1a>
 80149e8:	6023      	str	r3, [r4, #0]
 80149ea:	bd38      	pop	{r3, r4, r5, pc}
 80149ec:	20008ddc 	.word	0x20008ddc

080149f0 <__sread>:
 80149f0:	b510      	push	{r4, lr}
 80149f2:	460c      	mov	r4, r1
 80149f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149f8:	f000 f8a8 	bl	8014b4c <_read_r>
 80149fc:	2800      	cmp	r0, #0
 80149fe:	bfab      	itete	ge
 8014a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014a02:	89a3      	ldrhlt	r3, [r4, #12]
 8014a04:	181b      	addge	r3, r3, r0
 8014a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014a0a:	bfac      	ite	ge
 8014a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014a0e:	81a3      	strhlt	r3, [r4, #12]
 8014a10:	bd10      	pop	{r4, pc}

08014a12 <__swrite>:
 8014a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a16:	461f      	mov	r7, r3
 8014a18:	898b      	ldrh	r3, [r1, #12]
 8014a1a:	05db      	lsls	r3, r3, #23
 8014a1c:	4605      	mov	r5, r0
 8014a1e:	460c      	mov	r4, r1
 8014a20:	4616      	mov	r6, r2
 8014a22:	d505      	bpl.n	8014a30 <__swrite+0x1e>
 8014a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a28:	2302      	movs	r3, #2
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	f000 f870 	bl	8014b10 <_lseek_r>
 8014a30:	89a3      	ldrh	r3, [r4, #12]
 8014a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014a3a:	81a3      	strh	r3, [r4, #12]
 8014a3c:	4632      	mov	r2, r6
 8014a3e:	463b      	mov	r3, r7
 8014a40:	4628      	mov	r0, r5
 8014a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a46:	f000 b817 	b.w	8014a78 <_write_r>

08014a4a <__sseek>:
 8014a4a:	b510      	push	{r4, lr}
 8014a4c:	460c      	mov	r4, r1
 8014a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a52:	f000 f85d 	bl	8014b10 <_lseek_r>
 8014a56:	1c43      	adds	r3, r0, #1
 8014a58:	89a3      	ldrh	r3, [r4, #12]
 8014a5a:	bf15      	itete	ne
 8014a5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8014a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014a66:	81a3      	strheq	r3, [r4, #12]
 8014a68:	bf18      	it	ne
 8014a6a:	81a3      	strhne	r3, [r4, #12]
 8014a6c:	bd10      	pop	{r4, pc}

08014a6e <__sclose>:
 8014a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a72:	f000 b81b 	b.w	8014aac <_close_r>
	...

08014a78 <_write_r>:
 8014a78:	b538      	push	{r3, r4, r5, lr}
 8014a7a:	4d07      	ldr	r5, [pc, #28]	; (8014a98 <_write_r+0x20>)
 8014a7c:	4604      	mov	r4, r0
 8014a7e:	4608      	mov	r0, r1
 8014a80:	4611      	mov	r1, r2
 8014a82:	2200      	movs	r2, #0
 8014a84:	602a      	str	r2, [r5, #0]
 8014a86:	461a      	mov	r2, r3
 8014a88:	f7ec ffbd 	bl	8001a06 <_write>
 8014a8c:	1c43      	adds	r3, r0, #1
 8014a8e:	d102      	bne.n	8014a96 <_write_r+0x1e>
 8014a90:	682b      	ldr	r3, [r5, #0]
 8014a92:	b103      	cbz	r3, 8014a96 <_write_r+0x1e>
 8014a94:	6023      	str	r3, [r4, #0]
 8014a96:	bd38      	pop	{r3, r4, r5, pc}
 8014a98:	20008ddc 	.word	0x20008ddc

08014a9c <abort>:
 8014a9c:	b508      	push	{r3, lr}
 8014a9e:	2006      	movs	r0, #6
 8014aa0:	f000 f88e 	bl	8014bc0 <raise>
 8014aa4:	2001      	movs	r0, #1
 8014aa6:	f7ec ff87 	bl	80019b8 <_exit>
	...

08014aac <_close_r>:
 8014aac:	b538      	push	{r3, r4, r5, lr}
 8014aae:	4d06      	ldr	r5, [pc, #24]	; (8014ac8 <_close_r+0x1c>)
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	4604      	mov	r4, r0
 8014ab4:	4608      	mov	r0, r1
 8014ab6:	602b      	str	r3, [r5, #0]
 8014ab8:	f7ec ffc1 	bl	8001a3e <_close>
 8014abc:	1c43      	adds	r3, r0, #1
 8014abe:	d102      	bne.n	8014ac6 <_close_r+0x1a>
 8014ac0:	682b      	ldr	r3, [r5, #0]
 8014ac2:	b103      	cbz	r3, 8014ac6 <_close_r+0x1a>
 8014ac4:	6023      	str	r3, [r4, #0]
 8014ac6:	bd38      	pop	{r3, r4, r5, pc}
 8014ac8:	20008ddc 	.word	0x20008ddc

08014acc <_fstat_r>:
 8014acc:	b538      	push	{r3, r4, r5, lr}
 8014ace:	4d07      	ldr	r5, [pc, #28]	; (8014aec <_fstat_r+0x20>)
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	4604      	mov	r4, r0
 8014ad4:	4608      	mov	r0, r1
 8014ad6:	4611      	mov	r1, r2
 8014ad8:	602b      	str	r3, [r5, #0]
 8014ada:	f7ec ffbc 	bl	8001a56 <_fstat>
 8014ade:	1c43      	adds	r3, r0, #1
 8014ae0:	d102      	bne.n	8014ae8 <_fstat_r+0x1c>
 8014ae2:	682b      	ldr	r3, [r5, #0]
 8014ae4:	b103      	cbz	r3, 8014ae8 <_fstat_r+0x1c>
 8014ae6:	6023      	str	r3, [r4, #0]
 8014ae8:	bd38      	pop	{r3, r4, r5, pc}
 8014aea:	bf00      	nop
 8014aec:	20008ddc 	.word	0x20008ddc

08014af0 <_isatty_r>:
 8014af0:	b538      	push	{r3, r4, r5, lr}
 8014af2:	4d06      	ldr	r5, [pc, #24]	; (8014b0c <_isatty_r+0x1c>)
 8014af4:	2300      	movs	r3, #0
 8014af6:	4604      	mov	r4, r0
 8014af8:	4608      	mov	r0, r1
 8014afa:	602b      	str	r3, [r5, #0]
 8014afc:	f7ec ffbb 	bl	8001a76 <_isatty>
 8014b00:	1c43      	adds	r3, r0, #1
 8014b02:	d102      	bne.n	8014b0a <_isatty_r+0x1a>
 8014b04:	682b      	ldr	r3, [r5, #0]
 8014b06:	b103      	cbz	r3, 8014b0a <_isatty_r+0x1a>
 8014b08:	6023      	str	r3, [r4, #0]
 8014b0a:	bd38      	pop	{r3, r4, r5, pc}
 8014b0c:	20008ddc 	.word	0x20008ddc

08014b10 <_lseek_r>:
 8014b10:	b538      	push	{r3, r4, r5, lr}
 8014b12:	4d07      	ldr	r5, [pc, #28]	; (8014b30 <_lseek_r+0x20>)
 8014b14:	4604      	mov	r4, r0
 8014b16:	4608      	mov	r0, r1
 8014b18:	4611      	mov	r1, r2
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	602a      	str	r2, [r5, #0]
 8014b1e:	461a      	mov	r2, r3
 8014b20:	f7ec ffb4 	bl	8001a8c <_lseek>
 8014b24:	1c43      	adds	r3, r0, #1
 8014b26:	d102      	bne.n	8014b2e <_lseek_r+0x1e>
 8014b28:	682b      	ldr	r3, [r5, #0]
 8014b2a:	b103      	cbz	r3, 8014b2e <_lseek_r+0x1e>
 8014b2c:	6023      	str	r3, [r4, #0]
 8014b2e:	bd38      	pop	{r3, r4, r5, pc}
 8014b30:	20008ddc 	.word	0x20008ddc

08014b34 <__malloc_lock>:
 8014b34:	4801      	ldr	r0, [pc, #4]	; (8014b3c <__malloc_lock+0x8>)
 8014b36:	f7ff bb45 	b.w	80141c4 <__retarget_lock_acquire_recursive>
 8014b3a:	bf00      	nop
 8014b3c:	20008de4 	.word	0x20008de4

08014b40 <__malloc_unlock>:
 8014b40:	4801      	ldr	r0, [pc, #4]	; (8014b48 <__malloc_unlock+0x8>)
 8014b42:	f7ff bb40 	b.w	80141c6 <__retarget_lock_release_recursive>
 8014b46:	bf00      	nop
 8014b48:	20008de4 	.word	0x20008de4

08014b4c <_read_r>:
 8014b4c:	b538      	push	{r3, r4, r5, lr}
 8014b4e:	4d07      	ldr	r5, [pc, #28]	; (8014b6c <_read_r+0x20>)
 8014b50:	4604      	mov	r4, r0
 8014b52:	4608      	mov	r0, r1
 8014b54:	4611      	mov	r1, r2
 8014b56:	2200      	movs	r2, #0
 8014b58:	602a      	str	r2, [r5, #0]
 8014b5a:	461a      	mov	r2, r3
 8014b5c:	f7ec ff36 	bl	80019cc <_read>
 8014b60:	1c43      	adds	r3, r0, #1
 8014b62:	d102      	bne.n	8014b6a <_read_r+0x1e>
 8014b64:	682b      	ldr	r3, [r5, #0]
 8014b66:	b103      	cbz	r3, 8014b6a <_read_r+0x1e>
 8014b68:	6023      	str	r3, [r4, #0]
 8014b6a:	bd38      	pop	{r3, r4, r5, pc}
 8014b6c:	20008ddc 	.word	0x20008ddc

08014b70 <_raise_r>:
 8014b70:	291f      	cmp	r1, #31
 8014b72:	b538      	push	{r3, r4, r5, lr}
 8014b74:	4604      	mov	r4, r0
 8014b76:	460d      	mov	r5, r1
 8014b78:	d904      	bls.n	8014b84 <_raise_r+0x14>
 8014b7a:	2316      	movs	r3, #22
 8014b7c:	6003      	str	r3, [r0, #0]
 8014b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8014b82:	bd38      	pop	{r3, r4, r5, pc}
 8014b84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014b86:	b112      	cbz	r2, 8014b8e <_raise_r+0x1e>
 8014b88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014b8c:	b94b      	cbnz	r3, 8014ba2 <_raise_r+0x32>
 8014b8e:	4620      	mov	r0, r4
 8014b90:	f000 f830 	bl	8014bf4 <_getpid_r>
 8014b94:	462a      	mov	r2, r5
 8014b96:	4601      	mov	r1, r0
 8014b98:	4620      	mov	r0, r4
 8014b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014b9e:	f000 b817 	b.w	8014bd0 <_kill_r>
 8014ba2:	2b01      	cmp	r3, #1
 8014ba4:	d00a      	beq.n	8014bbc <_raise_r+0x4c>
 8014ba6:	1c59      	adds	r1, r3, #1
 8014ba8:	d103      	bne.n	8014bb2 <_raise_r+0x42>
 8014baa:	2316      	movs	r3, #22
 8014bac:	6003      	str	r3, [r0, #0]
 8014bae:	2001      	movs	r0, #1
 8014bb0:	e7e7      	b.n	8014b82 <_raise_r+0x12>
 8014bb2:	2400      	movs	r4, #0
 8014bb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014bb8:	4628      	mov	r0, r5
 8014bba:	4798      	blx	r3
 8014bbc:	2000      	movs	r0, #0
 8014bbe:	e7e0      	b.n	8014b82 <_raise_r+0x12>

08014bc0 <raise>:
 8014bc0:	4b02      	ldr	r3, [pc, #8]	; (8014bcc <raise+0xc>)
 8014bc2:	4601      	mov	r1, r0
 8014bc4:	6818      	ldr	r0, [r3, #0]
 8014bc6:	f7ff bfd3 	b.w	8014b70 <_raise_r>
 8014bca:	bf00      	nop
 8014bcc:	20000018 	.word	0x20000018

08014bd0 <_kill_r>:
 8014bd0:	b538      	push	{r3, r4, r5, lr}
 8014bd2:	4d07      	ldr	r5, [pc, #28]	; (8014bf0 <_kill_r+0x20>)
 8014bd4:	2300      	movs	r3, #0
 8014bd6:	4604      	mov	r4, r0
 8014bd8:	4608      	mov	r0, r1
 8014bda:	4611      	mov	r1, r2
 8014bdc:	602b      	str	r3, [r5, #0]
 8014bde:	f7ec fed9 	bl	8001994 <_kill>
 8014be2:	1c43      	adds	r3, r0, #1
 8014be4:	d102      	bne.n	8014bec <_kill_r+0x1c>
 8014be6:	682b      	ldr	r3, [r5, #0]
 8014be8:	b103      	cbz	r3, 8014bec <_kill_r+0x1c>
 8014bea:	6023      	str	r3, [r4, #0]
 8014bec:	bd38      	pop	{r3, r4, r5, pc}
 8014bee:	bf00      	nop
 8014bf0:	20008ddc 	.word	0x20008ddc

08014bf4 <_getpid_r>:
 8014bf4:	f7ec bec6 	b.w	8001984 <_getpid>

08014bf8 <_init>:
 8014bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bfa:	bf00      	nop
 8014bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014bfe:	bc08      	pop	{r3}
 8014c00:	469e      	mov	lr, r3
 8014c02:	4770      	bx	lr

08014c04 <_fini>:
 8014c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c06:	bf00      	nop
 8014c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c0a:	bc08      	pop	{r3}
 8014c0c:	469e      	mov	lr, r3
 8014c0e:	4770      	bx	lr
